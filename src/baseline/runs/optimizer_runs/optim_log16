# optimizer:
# <function gp_minimize at 0x7f8417d48ae8>
# opt-args:
# (<function opt_baseline at 0x7f8417d4d620>, [(1.0, 6.0), (7.0, 11.0), (15,), (500, 1400), (0.02, 0.1)])
# opt-kwargs:
# {'verbose': True, 'random_state': 0, 'n_calls': 350}
# 
# Iteration No: 1 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.37706299432407', '--iterations': '15', '--factors': '1263', '--NB_smoothing': '3.964223091125092', '--content_scale_factor': '0.0698850957428778'}
# Iteration No: 1 ended. Evaluation done at random point.
# Time taken: 2189.1322
# Function value obtained: -0.1736
# Current minimum: -0.1736
# Iteration No: 2 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.190138426177889', '--iterations': '15', '--factors': '745', '--NB_smoothing': '2.9219085364634996', '--content_scale_factor': '0.058213209385707995'}
# Iteration No: 2 ended. Evaluation done at random point.
# Time taken: 847.8520
# Function value obtained: -0.1865
# Current minimum: -0.1865
# Iteration No: 3 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.919908689500229', '--iterations': '15', '--factors': '1252', '--NB_smoothing': '5.060843643877467', '--content_scale_factor': '0.046991692833381477'}
# Iteration No: 3 ended. Evaluation done at random point.
# Time taken: 1774.9569
# Function value obtained: -0.1857
# Current minimum: -0.1865
# Iteration No: 4 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.472966159362192', '--iterations': '15', '--factors': '626', '--NB_smoothing': '4.240859360255986', '--content_scale_factor': '0.08960698066867494'}
# Iteration No: 4 ended. Evaluation done at random point.
# Time taken: 667.7666
# Function value obtained: -0.1735
# Current minimum: -0.1865
# Iteration No: 5 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.203643007918577', '--iterations': '15', '--factors': '1111', '--NB_smoothing': '3.368040226368553', '--content_scale_factor': '0.07765061237807334'}
# Iteration No: 5 ended. Evaluation done at random point.
# Time taken: 2806.3178
# Function value obtained: -0.1710
# Current minimum: -0.1865
# Iteration No: 6 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '9.149492917796042', '--iterations': '15', '--factors': '595', '--NB_smoothing': '3.910098960375536', '--content_scale_factor': '0.0578880335477326'}
# Iteration No: 6 ended. Evaluation done at random point.
# Time taken: 665.6516
# Function value obtained: -0.1819
# Current minimum: -0.1865
# Iteration No: 7 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '9.947672708515833', '--iterations': '15', '--factors': '622', '--NB_smoothing': '1.9316617166338', '--content_scale_factor': '0.04593128062345713'}
# Iteration No: 7 ended. Evaluation done at random point.
# Time taken: 666.8557
# Function value obtained: -0.1798
# Current minimum: -0.1865
# Iteration No: 8 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.889285553006351', '--iterations': '15', '--factors': '1312', '--NB_smoothing': '1.7483743359184158', '--content_scale_factor': '0.055995999192898216'}
# Iteration No: 8 ended. Evaluation done at random point.
# Time taken: 2455.8103
# Function value obtained: -0.1887
# Current minimum: -0.1887
# Iteration No: 9 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.609394332695938', '--iterations': '15', '--factors': '1373', '--NB_smoothing': '4.065317289420663', '--content_scale_factor': '0.07225120286383502'}
# Iteration No: 9 ended. Evaluation done at random point.
# Time taken: 2264.7944
# Function value obtained: -0.1716
# Current minimum: -0.1887
# Iteration No: 10 started. Evaluating function at random point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.4326086678781', '--iterations': '15', '--factors': '1047', '--NB_smoothing': '1.854547925680226', '--content_scale_factor': '0.0460037783206682'}
# Iteration No: 10 ended. Evaluation done at random point.
# Time taken: 1403.9584
# Function value obtained: -0.1876
# Current minimum: -0.1887
# Iteration No: 11 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.2242579883171292', '--content_scale_factor': '0.02'}
# Iteration No: 11 ended. Search finished for the next optimal point.
# Time taken: 2384.9978
# Function value obtained: -0.1903
# Current minimum: -0.1903
# Iteration No: 12 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '500', '--NB_smoothing': '6.0', '--content_scale_factor': '0.02'}
# Iteration No: 12 ended. Search finished for the next optimal point.
# Time taken: 484.3608
# Function value obtained: -0.1863
# Current minimum: -0.1903
# Iteration No: 13 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.050904706312099354'}
# Iteration No: 13 ended. Search finished for the next optimal point.
# Time taken: 2305.9223
# Function value obtained: -0.1914
# Current minimum: -0.1914
# Iteration No: 14 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.910117869797343', '--iterations': '15', '--factors': '1335', '--NB_smoothing': '1.5649712864485075', '--content_scale_factor': '0.020419210471721606'}
# Iteration No: 14 ended. Search finished for the next optimal point.
# Time taken: 2152.5567
# Function value obtained: -0.1759
# Current minimum: -0.1914
# Iteration No: 15 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.033490978645894', '--iterations': '15', '--factors': '1096', '--NB_smoothing': '1.0527469168446504', '--content_scale_factor': '0.09852857573369399'}
# Iteration No: 15 ended. Search finished for the next optimal point.
# Time taken: 2117.9097
# Function value obtained: -0.1740
# Current minimum: -0.1914
# Iteration No: 16 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.022494676155118', '--iterations': '15', '--factors': '1204', '--NB_smoothing': '1.3849113763175727', '--content_scale_factor': '0.03876743697995229'}
# Iteration No: 16 ended. Search finished for the next optimal point.
# Time taken: 2498.5874
# Function value obtained: -0.1908
# Current minimum: -0.1914
# Iteration No: 17 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.025076542395048', '--iterations': '15', '--factors': '685', '--NB_smoothing': '1.0321614150176648', '--content_scale_factor': '0.04668937399319178'}
# Iteration No: 17 ended. Search finished for the next optimal point.
# Time taken: 804.4302
# Function value obtained: -0.1900
# Current minimum: -0.1914
# Iteration No: 18 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0231290984006485', '--iterations': '15', '--factors': '1363', '--NB_smoothing': '4.995513201507972', '--content_scale_factor': '0.020904967106607088'}
# Iteration No: 18 ended. Search finished for the next optimal point.
# Time taken: 2153.0356
# Function value obtained: -0.1903
# Current minimum: -0.1914
# Iteration No: 19 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.023833944475605', '--iterations': '15', '--factors': '1377', '--NB_smoothing': '5.923595821950591', '--content_scale_factor': '0.04399793882681281'}
# Iteration No: 19 ended. Search finished for the next optimal point.
# Time taken: 2281.5620
# Function value obtained: -0.1914
# Current minimum: -0.1914
# Iteration No: 20 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041626409426470064'}
# Iteration No: 20 ended. Search finished for the next optimal point.
# Time taken: 2152.5784
# Function value obtained: -0.1911
# Current minimum: -0.1914
# Iteration No: 21 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04179760479557918'}
# Iteration No: 21 ended. Search finished for the next optimal point.
# Time taken: 2154.8948
# Function value obtained: -0.1911
# Current minimum: -0.1914
# Iteration No: 22 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0041673832974', '--iterations': '15', '--factors': '533', '--NB_smoothing': '1.2075473972455428', '--content_scale_factor': '0.022457596472013047'}
# Iteration No: 22 ended. Search finished for the next optimal point.
# Time taken: 540.5208
# Function value obtained: -0.1869
# Current minimum: -0.1914
# Iteration No: 23 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.043679476593803446'}
# Iteration No: 23 ended. Search finished for the next optimal point.
# Time taken: 2148.8451
# Function value obtained: -0.1915
# Current minimum: -0.1915
# Iteration No: 24 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.024308712899505', '--iterations': '15', '--factors': '596', '--NB_smoothing': '5.846300551391977', '--content_scale_factor': '0.05715912119593171'}
# Iteration No: 24 ended. Search finished for the next optimal point.
# Time taken: 582.0440
# Function value obtained: -0.1891
# Current minimum: -0.1915
# Iteration No: 25 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.017863043379697', '--iterations': '15', '--factors': '625', '--NB_smoothing': '5.826187095539673', '--content_scale_factor': '0.020117799585750468'}
# Iteration No: 25 ended. Search finished for the next optimal point.
# Time taken: 660.6390
# Function value obtained: -0.1884
# Current minimum: -0.1915
# Iteration No: 26 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.002877925048904', '--iterations': '15', '--factors': '788', '--NB_smoothing': '1.0755175352391069', '--content_scale_factor': '0.06053822230960029'}
# Iteration No: 26 ended. Search finished for the next optimal point.
# Time taken: 1055.8682
# Function value obtained: -0.1899
# Current minimum: -0.1915
# Iteration No: 27 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.00560641392663', '--iterations': '15', '--factors': '502', '--NB_smoothing': '5.925378261653524', '--content_scale_factor': '0.040138615183225014'}
# Iteration No: 27 ended. Search finished for the next optimal point.
# Time taken: 491.1429
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 28 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.023872983289131', '--iterations': '15', '--factors': '1375', '--NB_smoothing': '5.40094306847542', '--content_scale_factor': '0.0692913552041665'}
# Iteration No: 28 ended. Search finished for the next optimal point.
# Time taken: 2269.3754
# Function value obtained: -0.1880
# Current minimum: -0.1915
# Iteration No: 29 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0467285689810275', '--iterations': '15', '--factors': '891', '--NB_smoothing': '1.1272966796135455', '--content_scale_factor': '0.02088492488492989'}
# Iteration No: 29 ended. Search finished for the next optimal point.
# Time taken: 1355.4872
# Function value obtained: -0.1897
# Current minimum: -0.1915
# Iteration No: 30 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.011067487013064', '--iterations': '15', '--factors': '1399', '--NB_smoothing': '1.4425768051712948', '--content_scale_factor': '0.06021334798616142'}
# Iteration No: 30 ended. Search finished for the next optimal point.
# Time taken: 2258.9090
# Function value obtained: -0.1906
# Current minimum: -0.1915
# Iteration No: 31 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.095123201946348', '--iterations': '15', '--factors': '1372', '--NB_smoothing': '1.3050489902815223', '--content_scale_factor': '0.020195351394105093'}
# Iteration No: 31 ended. Search finished for the next optimal point.
# Time taken: 2080.9388
# Function value obtained: -0.1901
# Current minimum: -0.1915
# Iteration No: 32 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.63193215432717', '--iterations': '15', '--factors': '1370', '--NB_smoothing': '5.441056417382201', '--content_scale_factor': '0.02036996219608187'}
# Iteration No: 32 ended. Search finished for the next optimal point.
# Time taken: 2127.6423
# Function value obtained: -0.1777
# Current minimum: -0.1915
# Iteration No: 33 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.018298537837781', '--iterations': '15', '--factors': '1210', '--NB_smoothing': '1.0188596355434634', '--content_scale_factor': '0.09961153311818377'}
# Iteration No: 33 ended. Search finished for the next optimal point.
# Time taken: 2547.1288
# Function value obtained: -0.1735
# Current minimum: -0.1915
# Iteration No: 34 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.027775773271685', '--iterations': '15', '--factors': '1326', '--NB_smoothing': '1.1098441976794202', '--content_scale_factor': '0.0564907957698203'}
# Iteration No: 34 ended. Search finished for the next optimal point.
# Time taken: 2026.4625
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 35 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041953135735988925'}
# Iteration No: 35 ended. Search finished for the next optimal point.
# Time taken: 2164.4296
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 36 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.030256257045417', '--iterations': '15', '--factors': '525', '--NB_smoothing': '5.718911683898272', '--content_scale_factor': '0.06993048086011754'}
# Iteration No: 36 ended. Search finished for the next optimal point.
# Time taken: 521.8302
# Function value obtained: -0.1858
# Current minimum: -0.1915
# Iteration No: 37 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.10003419387221', '--iterations': '15', '--factors': '1269', '--NB_smoothing': '5.990873279848988', '--content_scale_factor': '0.020399261895323085'}
# Iteration No: 37 ended. Search finished for the next optimal point.
# Time taken: 1885.9638
# Function value obtained: -0.1901
# Current minimum: -0.1915
# Iteration No: 38 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0178249014029745', '--iterations': '15', '--factors': '549', '--NB_smoothing': '1.0692386473169304', '--content_scale_factor': '0.04314328838463593'}
# Iteration No: 38 ended. Search finished for the next optimal point.
# Time taken: 548.8443
# Function value obtained: -0.1889
# Current minimum: -0.1915
# Iteration No: 39 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.1430877996134745', '--iterations': '15', '--factors': '1342', '--NB_smoothing': '5.888752946404437', '--content_scale_factor': '0.020048114153754543'}
# Iteration No: 39 ended. Search finished for the next optimal point.
# Time taken: 2057.7353
# Function value obtained: -0.1899
# Current minimum: -0.1915
# Iteration No: 40 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.052581378045952', '--iterations': '15', '--factors': '506', '--NB_smoothing': '1.2813937233978154', '--content_scale_factor': '0.042061453340868575'}
# Iteration No: 40 ended. Search finished for the next optimal point.
# Time taken: 498.6754
# Function value obtained: -0.1878
# Current minimum: -0.1915
# Iteration No: 41 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.007770820171585', '--iterations': '15', '--factors': '561', '--NB_smoothing': '1.5669481502424052', '--content_scale_factor': '0.02084989984798777'}
# Iteration No: 41 ended. Search finished for the next optimal point.
# Time taken: 595.5292
# Function value obtained: -0.1879
# Current minimum: -0.1915
# Iteration No: 42 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.041694133504300734'}
# Iteration No: 42 ended. Search finished for the next optimal point.
# Time taken: 2142.1974
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 43 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0416377183591978'}
# Iteration No: 43 ended. Search finished for the next optimal point.
# Time taken: 2139.8191
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 44 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.994361121142287', '--iterations': '15', '--factors': '1355', '--NB_smoothing': '3.2831971852859345', '--content_scale_factor': '0.09996534348848092'}
# Iteration No: 44 ended. Search finished for the next optimal point.
# Time taken: 2120.7718
# Function value obtained: -0.1574
# Current minimum: -0.1915
# Iteration No: 45 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04219159633229412'}
# Iteration No: 45 ended. Search finished for the next optimal point.
# Time taken: 2149.2298
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 46 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.023490173601066', '--iterations': '15', '--factors': '1352', '--NB_smoothing': '1.2448310528579207', '--content_scale_factor': '0.062331523057235966'}
# Iteration No: 46 ended. Search finished for the next optimal point.
# Time taken: 2020.9830
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 47 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.004187254968376', '--iterations': '15', '--factors': '519', '--NB_smoothing': '5.901383257196336', '--content_scale_factor': '0.044276729492768056'}
# Iteration No: 47 ended. Search finished for the next optimal point.
# Time taken: 519.8602
# Function value obtained: -0.1882
# Current minimum: -0.1915
# Iteration No: 48 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04193347117294874'}
# Iteration No: 48 ended. Search finished for the next optimal point.
# Time taken: 2147.9410
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 49 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.018944492078276', '--iterations': '15', '--factors': '1361', '--NB_smoothing': '5.088824429981701', '--content_scale_factor': '0.020750893068219485'}
# Iteration No: 49 ended. Search finished for the next optimal point.
# Time taken: 2226.2021
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 50 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04187079024309674'}
# Iteration No: 50 ended. Search finished for the next optimal point.
# Time taken: 2174.0540
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 51 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041905839203312666'}
# Iteration No: 51 ended. Search finished for the next optimal point.
# Time taken: 2146.9437
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 52 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04238898237152174'}
# Iteration No: 52 ended. Search finished for the next optimal point.
# Time taken: 2151.5765
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 53 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04192402386214614'}
# Iteration No: 53 ended. Search finished for the next optimal point.
# Time taken: 2174.4694
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 54 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04242236905162748'}
# Iteration No: 54 ended. Search finished for the next optimal point.
# Time taken: 2270.0143
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 55 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.021303494409494', '--iterations': '15', '--factors': '1376', '--NB_smoothing': '5.823129981394824', '--content_scale_factor': '0.06473023454335056'}
# Iteration No: 55 ended. Search finished for the next optimal point.
# Time taken: 2145.3517
# Function value obtained: -0.1898
# Current minimum: -0.1915
# Iteration No: 56 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.000528578985445', '--iterations': '15', '--factors': '503', '--NB_smoothing': '4.087035346031511', '--content_scale_factor': '0.020018978665387533'}
# Iteration No: 56 ended. Search finished for the next optimal point.
# Time taken: 533.1666
# Function value obtained: -0.1864
# Current minimum: -0.1915
# Iteration No: 57 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042630856782826'}
# Iteration No: 57 ended. Search finished for the next optimal point.
# Time taken: 2212.6686
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 58 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.873744771391138', '--iterations': '15', '--factors': '1294', '--NB_smoothing': '1.888689056224027', '--content_scale_factor': '0.020191205809079085'}
# Iteration No: 58 ended. Search finished for the next optimal point.
# Time taken: 1957.1016
# Function value obtained: -0.1761
# Current minimum: -0.1915
# Iteration No: 59 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.08321397502033', '--iterations': '15', '--factors': '1307', '--NB_smoothing': '5.864600841057313', '--content_scale_factor': '0.020169273399064026'}
# Iteration No: 59 ended. Search finished for the next optimal point.
# Time taken: 2082.8644
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 60 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04271406736449824'}
# Iteration No: 60 ended. Search finished for the next optimal point.
# Time taken: 2171.2710
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 61 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.009319766629201', '--iterations': '15', '--factors': '1378', '--NB_smoothing': '5.205492215282373', '--content_scale_factor': '0.07426751966723331'}
# Iteration No: 61 ended. Search finished for the next optimal point.
# Time taken: 2173.5684
# Function value obtained: -0.1862
# Current minimum: -0.1915
# Iteration No: 62 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04239143360093943'}
# Iteration No: 62 ended. Search finished for the next optimal point.
# Time taken: 2161.5850
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 63 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.032083278085317', '--iterations': '15', '--factors': '1361', '--NB_smoothing': '1.4062058509634725', '--content_scale_factor': '0.020340798230305417'}
# Iteration No: 63 ended. Search finished for the next optimal point.
# Time taken: 2195.0530
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 64 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.015432992757666', '--iterations': '15', '--factors': '530', '--NB_smoothing': '1.4533383739222097', '--content_scale_factor': '0.06592877430051716'}
# Iteration No: 64 ended. Search finished for the next optimal point.
# Time taken: 533.0706
# Function value obtained: -0.1867
# Current minimum: -0.1915
# Iteration No: 65 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042335302400075644'}
# Iteration No: 65 ended. Search finished for the next optimal point.
# Time taken: 2144.7845
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 66 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.026070615857426', '--iterations': '15', '--factors': '512', '--NB_smoothing': '2.543430596385564', '--content_scale_factor': '0.020167858360653927'}
# Iteration No: 66 ended. Search finished for the next optimal point.
# Time taken: 488.4879
# Function value obtained: -0.1867
# Current minimum: -0.1915
# Iteration No: 67 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.01144254292281', '--iterations': '15', '--factors': '1356', '--NB_smoothing': '5.704907830204427', '--content_scale_factor': '0.020211837161262212'}
# Iteration No: 67 ended. Search finished for the next optimal point.
# Time taken: 2023.4257
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 68 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04249702367491414'}
# Iteration No: 68 ended. Search finished for the next optimal point.
# Time taken: 2155.6200
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 69 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04234115788280805'}
# Iteration No: 69 ended. Search finished for the next optimal point.
# Time taken: 2152.1643
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 70 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.062551337355794', '--iterations': '15', '--factors': '564', '--NB_smoothing': '5.760845861559143', '--content_scale_factor': '0.09943134925096889'}
# Iteration No: 70 ended. Search finished for the next optimal point.
# Time taken: 550.0536
# Function value obtained: -0.1732
# Current minimum: -0.1915
# Iteration No: 71 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.114793850835595', '--iterations': '15', '--factors': '509', '--NB_smoothing': '5.945270922270973', '--content_scale_factor': '0.048016115759324796'}
# Iteration No: 71 ended. Search finished for the next optimal point.
# Time taken: 507.8635
# Function value obtained: -0.1881
# Current minimum: -0.1915
# Iteration No: 72 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.09397767702531', '--iterations': '15', '--factors': '1391', '--NB_smoothing': '5.9493803541762205', '--content_scale_factor': '0.06705911742052013'}
# Iteration No: 72 ended. Search finished for the next optimal point.
# Time taken: 2278.8135
# Function value obtained: -0.1886
# Current minimum: -0.1915
# Iteration No: 73 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.01312070462564', '--iterations': '15', '--factors': '1389', '--NB_smoothing': '1.0516106089682284', '--content_scale_factor': '0.020283681200442584'}
# Iteration No: 73 ended. Search finished for the next optimal point.
# Time taken: 2196.2531
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 74 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0706544148594785', '--iterations': '15', '--factors': '517', '--NB_smoothing': '1.215368828579608', '--content_scale_factor': '0.04121186002464357'}
# Iteration No: 74 ended. Search finished for the next optimal point.
# Time taken: 520.9107
# Function value obtained: -0.1879
# Current minimum: -0.1915
# Iteration No: 75 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04210489044869584'}
# Iteration No: 75 ended. Search finished for the next optimal point.
# Time taken: 2145.1272
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 76 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.836364818296186', '--iterations': '15', '--factors': '522', '--NB_smoothing': '5.672135774711995', '--content_scale_factor': '0.021730865857726683'}
# Iteration No: 76 ended. Search finished for the next optimal point.
# Time taken: 521.6875
# Function value obtained: -0.1754
# Current minimum: -0.1915
# Iteration No: 77 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042103390526281856'}
# Iteration No: 77 ended. Search finished for the next optimal point.
# Time taken: 2196.6886
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 78 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.004091748328099', '--iterations': '15', '--factors': '1371', '--NB_smoothing': '1.7254448446580581', '--content_scale_factor': '0.020778352785343745'}
# Iteration No: 78 ended. Search finished for the next optimal point.
# Time taken: 2195.5035
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 79 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.04315136742665', '--iterations': '15', '--factors': '569', '--NB_smoothing': '1.3661993212407373', '--content_scale_factor': '0.06631755814015555'}
# Iteration No: 79 ended. Search finished for the next optimal point.
# Time taken: 592.7430
# Function value obtained: -0.1872
# Current minimum: -0.1915
# Iteration No: 80 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0184216094184295', '--iterations': '15', '--factors': '1316', '--NB_smoothing': '1.6025488386582545', '--content_scale_factor': '0.06999106421899201'}
# Iteration No: 80 ended. Search finished for the next optimal point.
# Time taken: 1955.3724
# Function value obtained: -0.1879
# Current minimum: -0.1915
# Iteration No: 81 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0153530950547776', '--iterations': '15', '--factors': '1395', '--NB_smoothing': '1.8382862922041696', '--content_scale_factor': '0.07317430230904554'}
# Iteration No: 81 ended. Search finished for the next optimal point.
# Time taken: 2247.6892
# Function value obtained: -0.1866
# Current minimum: -0.1915
# Iteration No: 82 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.176767331247465', '--iterations': '15', '--factors': '507', '--NB_smoothing': '5.952707064460486', '--content_scale_factor': '0.04828512851614682'}
# Iteration No: 82 ended. Search finished for the next optimal point.
# Time taken: 514.4997
# Function value obtained: -0.1879
# Current minimum: -0.1915
# Iteration No: 83 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04217057194856494'}
# Iteration No: 83 ended. Search finished for the next optimal point.
# Time taken: 2154.6878
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 84 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04219128906809297'}
# Iteration No: 84 ended. Search finished for the next optimal point.
# Time taken: 2154.1078
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 85 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.034714754428749', '--iterations': '15', '--factors': '525', '--NB_smoothing': '1.4074948594399874', '--content_scale_factor': '0.021635626488306123'}
# Iteration No: 85 ended. Search finished for the next optimal point.
# Time taken: 530.8298
# Function value obtained: -0.1870
# Current minimum: -0.1915
# Iteration No: 86 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.058034805090351', '--iterations': '15', '--factors': '505', '--NB_smoothing': '5.71793006842791', '--content_scale_factor': '0.04385897752569658'}
# Iteration No: 86 ended. Search finished for the next optimal point.
# Time taken: 506.6147
# Function value obtained: -0.1880
# Current minimum: -0.1915
# Iteration No: 87 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04237772170703981'}
# Iteration No: 87 ended. Search finished for the next optimal point.
# Time taken: 2186.0169
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 88 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.036452368291694', '--iterations': '15', '--factors': '1350', '--NB_smoothing': '5.5351493676630525', '--content_scale_factor': '0.02014888892192139'}
# Iteration No: 88 ended. Search finished for the next optimal point.
# Time taken: 2084.7089
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 89 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.007464137719704', '--iterations': '15', '--factors': '1381', '--NB_smoothing': '5.648307980813961', '--content_scale_factor': '0.02256131118690563'}
# Iteration No: 89 ended. Search finished for the next optimal point.
# Time taken: 2180.4383
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 90 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04237331455157367'}
# Iteration No: 90 ended. Search finished for the next optimal point.
# Time taken: 2163.3609
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 91 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0415932245793496', '--iterations': '15', '--factors': '1389', '--NB_smoothing': '5.610895193326647', '--content_scale_factor': '0.021918891918181513'}
# Iteration No: 91 ended. Search finished for the next optimal point.
# Time taken: 2207.0395
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 92 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04220820364445615'}
# Iteration No: 92 ended. Search finished for the next optimal point.
# Time taken: 2155.9780
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 93 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.038372206434373', '--iterations': '15', '--factors': '506', '--NB_smoothing': '5.540982920145119', '--content_scale_factor': '0.06681801467019911'}
# Iteration No: 93 ended. Search finished for the next optimal point.
# Time taken: 506.4479
# Function value obtained: -0.1859
# Current minimum: -0.1915
# Iteration No: 94 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.076360210010609', '--iterations': '15', '--factors': '1378', '--NB_smoothing': '1.0107756237856578', '--content_scale_factor': '0.06813337837524486'}
# Iteration No: 94 ended. Search finished for the next optimal point.
# Time taken: 2183.6708
# Function value obtained: -0.1884
# Current minimum: -0.1915
# Iteration No: 95 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042113271089740265'}
# Iteration No: 95 ended. Search finished for the next optimal point.
# Time taken: 2165.1381
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 96 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042422086591553346'}
# Iteration No: 96 ended. Search finished for the next optimal point.
# Time taken: 2168.5517
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 97 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.003322209572982', '--iterations': '15', '--factors': '1387', '--NB_smoothing': '5.281698655231296', '--content_scale_factor': '0.09964337094025208'}
# Iteration No: 97 ended. Search finished for the next optimal point.
# Time taken: 2225.5664
# Function value obtained: -0.1736
# Current minimum: -0.1915
# Iteration No: 98 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04223652082854656'}
# Iteration No: 98 ended. Search finished for the next optimal point.
# Time taken: 2154.9410
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 99 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.947129557568374', '--iterations': '15', '--factors': '1377', '--NB_smoothing': '5.434762575938571', '--content_scale_factor': '0.02126750222202096'}
# Iteration No: 99 ended. Search finished for the next optimal point.
# Time taken: 2253.9969
# Function value obtained: -0.1757
# Current minimum: -0.1915
# Iteration No: 100 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0644574672786336', '--iterations': '15', '--factors': '689', '--NB_smoothing': '1.1510776979329427', '--content_scale_factor': '0.020808657315570498'}
# Iteration No: 100 ended. Search finished for the next optimal point.
# Time taken: 757.9213
# Function value obtained: -0.1889
# Current minimum: -0.1915
# Iteration No: 101 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0457192903687895', '--iterations': '15', '--factors': '532', '--NB_smoothing': '5.925068647658883', '--content_scale_factor': '0.051362525502684775'}
# Iteration No: 101 ended. Search finished for the next optimal point.
# Time taken: 517.5252
# Function value obtained: -0.1886
# Current minimum: -0.1915
# Iteration No: 102 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04220757898080672'}
# Iteration No: 102 ended. Search finished for the next optimal point.
# Time taken: 2157.6164
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 103 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.042792707430765', '--iterations': '15', '--factors': '571', '--NB_smoothing': '1.6527808180458945', '--content_scale_factor': '0.02013804778993543'}
# Iteration No: 103 ended. Search finished for the next optimal point.
# Time taken: 590.6163
# Function value obtained: -0.1881
# Current minimum: -0.1915
# Iteration No: 104 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04210078850435818'}
# Iteration No: 104 ended. Search finished for the next optimal point.
# Time taken: 2156.2149
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 105 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042117684782567756'}
# Iteration No: 105 ended. Search finished for the next optimal point.
# Time taken: 2151.4578
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 106 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0267805255881255', '--iterations': '15', '--factors': '1313', '--NB_smoothing': '1.6109891830340959', '--content_scale_factor': '0.020004953412101838'}
# Iteration No: 106 ended. Search finished for the next optimal point.
# Time taken: 2073.8005
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 107 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04212526007838689'}
# Iteration No: 107 ended. Search finished for the next optimal point.
# Time taken: 2155.7953
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 108 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.104661741582006', '--iterations': '15', '--factors': '528', '--NB_smoothing': '1.0178978235099476', '--content_scale_factor': '0.02040976142955751'}
# Iteration No: 108 ended. Search finished for the next optimal point.
# Time taken: 514.0884
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 109 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.151833607235736', '--iterations': '15', '--factors': '1384', '--NB_smoothing': '1.0060988573039333', '--content_scale_factor': '0.02060930975439794'}
# Iteration No: 109 ended. Search finished for the next optimal point.
# Time taken: 2111.4545
# Function value obtained: -0.1898
# Current minimum: -0.1915
# Iteration No: 110 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.079301325744681', '--iterations': '15', '--factors': '501', '--NB_smoothing': '5.979142444186048', '--content_scale_factor': '0.04173621845780439'}
# Iteration No: 110 ended. Search finished for the next optimal point.
# Time taken: 501.9739
# Function value obtained: -0.1876
# Current minimum: -0.1915
# Iteration No: 111 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.024859998629298', '--iterations': '15', '--factors': '524', '--NB_smoothing': '1.0550698496571478', '--content_scale_factor': '0.06688350285913829'}
# Iteration No: 111 ended. Search finished for the next optimal point.
# Time taken: 508.7387
# Function value obtained: -0.1862
# Current minimum: -0.1915
# Iteration No: 112 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04214739341483281'}
# Iteration No: 112 ended. Search finished for the next optimal point.
# Time taken: 2158.3175
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 113 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042165564048451266'}
# Iteration No: 113 ended. Search finished for the next optimal point.
# Time taken: 2159.1221
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 114 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.040936461229807', '--iterations': '15', '--factors': '1265', '--NB_smoothing': '5.9489247294471586', '--content_scale_factor': '0.07115941978065014'}
# Iteration No: 114 ended. Search finished for the next optimal point.
# Time taken: 1949.1529
# Function value obtained: -0.1874
# Current minimum: -0.1915
# Iteration No: 115 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04236861393021789'}
# Iteration No: 115 ended. Search finished for the next optimal point.
# Time taken: 2155.0029
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 116 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.991831442720011', '--iterations': '15', '--factors': '1394', '--NB_smoothing': '5.5736514536311565', '--content_scale_factor': '0.050084189214284494'}
# Iteration No: 116 ended. Search finished for the next optimal point.
# Time taken: 2230.6419
# Function value obtained: -0.1754
# Current minimum: -0.1915
# Iteration No: 117 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0136987429843085', '--iterations': '15', '--factors': '506', '--NB_smoothing': '5.523335233804516', '--content_scale_factor': '0.03457156736301611'}
# Iteration No: 117 ended. Search finished for the next optimal point.
# Time taken: 506.3399
# Function value obtained: -0.1870
# Current minimum: -0.1915
# Iteration No: 118 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.001358032351738', '--iterations': '15', '--factors': '562', '--NB_smoothing': '1.0536059846246684', '--content_scale_factor': '0.099821356694815'}
# Iteration No: 118 ended. Search finished for the next optimal point.
# Time taken: 572.4250
# Function value obtained: -0.1733
# Current minimum: -0.1915
# Iteration No: 119 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04255315283289665'}
# Iteration No: 119 ended. Search finished for the next optimal point.
# Time taken: 2157.5535
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 120 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.102031870921465', '--iterations': '15', '--factors': '1395', '--NB_smoothing': '5.620075513496697', '--content_scale_factor': '0.022121372912736217'}
# Iteration No: 120 ended. Search finished for the next optimal point.
# Time taken: 2246.8466
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 121 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042480345922099406'}
# Iteration No: 121 ended. Search finished for the next optimal point.
# Time taken: 2167.6823
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 122 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.05306129535695', '--iterations': '15', '--factors': '1358', '--NB_smoothing': '5.92811828675435', '--content_scale_factor': '0.07562775830599239'}
# Iteration No: 122 ended. Search finished for the next optimal point.
# Time taken: 2112.3318
# Function value obtained: -0.1854
# Current minimum: -0.1915
# Iteration No: 123 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042461983528263525'}
# Iteration No: 123 ended. Search finished for the next optimal point.
# Time taken: 2167.4516
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 124 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.032788834745571', '--iterations': '15', '--factors': '1302', '--NB_smoothing': '5.723052033262685', '--content_scale_factor': '0.021000232431597654'}
# Iteration No: 124 ended. Search finished for the next optimal point.
# Time taken: 1962.3989
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 125 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.044569106890728', '--iterations': '15', '--factors': '519', '--NB_smoothing': '5.869564678705477', '--content_scale_factor': '0.03270220682191131'}
# Iteration No: 125 ended. Search finished for the next optimal point.
# Time taken: 537.8135
# Function value obtained: -0.1874
# Current minimum: -0.1915
# Iteration No: 126 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.03150429521416', '--iterations': '15', '--factors': '1378', '--NB_smoothing': '1.1876137621636798', '--content_scale_factor': '0.06804013971135169'}
# Iteration No: 126 ended. Search finished for the next optimal point.
# Time taken: 2181.8207
# Function value obtained: -0.1885
# Current minimum: -0.1915
# Iteration No: 127 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042517204640700225'}
# Iteration No: 127 ended. Search finished for the next optimal point.
# Time taken: 2149.0970
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 128 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.22219665649496', '--iterations': '15', '--factors': '1399', '--NB_smoothing': '5.92425968530814', '--content_scale_factor': '0.02121803086835797'}
# Iteration No: 128 ended. Search finished for the next optimal point.
# Time taken: 2262.8943
# Function value obtained: -0.1897
# Current minimum: -0.1915
# Iteration No: 129 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.006950475082026', '--iterations': '15', '--factors': '518', '--NB_smoothing': '1.1909196325960545', '--content_scale_factor': '0.05630142741870714'}
# Iteration No: 129 ended. Search finished for the next optimal point.
# Time taken: 523.7862
# Function value obtained: -0.1883
# Current minimum: -0.1915
# Iteration No: 130 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042343858922068725'}
# Iteration No: 130 ended. Search finished for the next optimal point.
# Time taken: 2157.8578
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 131 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0423275171010188'}
# Iteration No: 131 ended. Search finished for the next optimal point.
# Time taken: 2182.8714
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 132 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.966195791773632', '--iterations': '15', '--factors': '1373', '--NB_smoothing': '3.835668892898937', '--content_scale_factor': '0.02018395043418069'}
# Iteration No: 132 ended. Search finished for the next optimal point.
# Time taken: 2169.6570
# Function value obtained: -0.1757
# Current minimum: -0.1915
# Iteration No: 133 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.024051338815093', '--iterations': '15', '--factors': '1399', '--NB_smoothing': '5.1155461135274924', '--content_scale_factor': '0.07279074651655924'}
# Iteration No: 133 ended. Search finished for the next optimal point.
# Time taken: 2251.9310
# Function value obtained: -0.1868
# Current minimum: -0.1915
# Iteration No: 134 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04234438422685509'}
# Iteration No: 134 ended. Search finished for the next optimal point.
# Time taken: 2152.7136
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 135 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042505848786486534'}
# Iteration No: 135 ended. Search finished for the next optimal point.
# Time taken: 2181.5437
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 136 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.011939637949731', '--iterations': '15', '--factors': '1347', '--NB_smoothing': '5.820277332423793', '--content_scale_factor': '0.06704421336383165'}
# Iteration No: 136 ended. Search finished for the next optimal point.
# Time taken: 2126.8609
# Function value obtained: -0.1890
# Current minimum: -0.1915
# Iteration No: 137 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.876156031109645', '--iterations': '15', '--factors': '531', '--NB_smoothing': '5.600151279363777', '--content_scale_factor': '0.0998291770814577'}
# Iteration No: 137 ended. Search finished for the next optimal point.
# Time taken: 542.9570
# Function value obtained: -0.1578
# Current minimum: -0.1915
# Iteration No: 138 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.041064461427905', '--iterations': '15', '--factors': '1392', '--NB_smoothing': '4.1216182491940625', '--content_scale_factor': '0.02047725525697503'}
# Iteration No: 138 ended. Search finished for the next optimal point.
# Time taken: 2170.1284
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 139 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042438266250861834'}
# Iteration No: 139 ended. Search finished for the next optimal point.
# Time taken: 2146.0337
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 140 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.02387244227361', '--iterations': '15', '--factors': '1388', '--NB_smoothing': '1.421601461490272', '--content_scale_factor': '0.02179517892988579'}
# Iteration No: 140 ended. Search finished for the next optimal point.
# Time taken: 2160.5759
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 141 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04238155374864323'}
# Iteration No: 141 ended. Search finished for the next optimal point.
# Time taken: 2147.3637
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 142 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04242098070467659'}
# Iteration No: 142 ended. Search finished for the next optimal point.
# Time taken: 2145.6322
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 143 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04238768921741306'}
# Iteration No: 143 ended. Search finished for the next optimal point.
# Time taken: 2147.8984
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 144 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04242696865618971'}
# Iteration No: 144 ended. Search finished for the next optimal point.
# Time taken: 2145.0371
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 145 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.094090841759177', '--iterations': '15', '--factors': '1392', '--NB_smoothing': '5.219496006492276', '--content_scale_factor': '0.02013136735474884'}
# Iteration No: 145 ended. Search finished for the next optimal point.
# Time taken: 2199.1734
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 146 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04232369445408009'}
# Iteration No: 146 ended. Search finished for the next optimal point.
# Time taken: 2143.6489
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 147 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042425047279322045'}
# Iteration No: 147 ended. Search finished for the next optimal point.
# Time taken: 2145.5235
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 148 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042330227589813724'}
# Iteration No: 148 ended. Search finished for the next optimal point.
# Time taken: 2149.1891
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 149 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0050064924690485', '--iterations': '15', '--factors': '552', '--NB_smoothing': '5.769645702452419', '--content_scale_factor': '0.020959340571448222'}
# Iteration No: 149 ended. Search finished for the next optimal point.
# Time taken: 541.6918
# Function value obtained: -0.1878
# Current minimum: -0.1915
# Iteration No: 150 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04244476343418513'}
# Iteration No: 150 ended. Search finished for the next optimal point.
# Time taken: 2182.8157
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 151 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042283141829741536'}
# Iteration No: 151 ended. Search finished for the next optimal point.
# Time taken: 2166.7295
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 152 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042290185811686434'}
# Iteration No: 152 ended. Search finished for the next optimal point.
# Time taken: 2147.3537
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 153 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.039390083015276', '--iterations': '15', '--factors': '524', '--NB_smoothing': '5.94075835112183', '--content_scale_factor': '0.03795226896537815'}
# Iteration No: 153 ended. Search finished for the next optimal point.
# Time taken: 513.3135
# Function value obtained: -0.1877
# Current minimum: -0.1915
# Iteration No: 154 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.875449572988902', '--iterations': '15', '--factors': '1393', '--NB_smoothing': '1.2843763104901775', '--content_scale_factor': '0.05085446975794908'}
# Iteration No: 154 ended. Search finished for the next optimal point.
# Time taken: 2342.7379
# Function value obtained: -0.1757
# Current minimum: -0.1915
# Iteration No: 155 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04257135775671457'}
# Iteration No: 155 ended. Search finished for the next optimal point.
# Time taken: 2150.3331
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 156 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.005567396881989', '--iterations': '15', '--factors': '520', '--NB_smoothing': '1.6052877525759217', '--content_scale_factor': '0.06626864980407873'}
# Iteration No: 156 ended. Search finished for the next optimal point.
# Time taken: 506.6299
# Function value obtained: -0.1866
# Current minimum: -0.1915
# Iteration No: 157 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0422849117270585'}
# Iteration No: 157 ended. Search finished for the next optimal point.
# Time taken: 2147.4340
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 158 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.194061746547396', '--iterations': '15', '--factors': '501', '--NB_smoothing': '1.102717644926692', '--content_scale_factor': '0.02176319526127114'}
# Iteration No: 158 ended. Search finished for the next optimal point.
# Time taken: 505.9988
# Function value obtained: -0.1868
# Current minimum: -0.1915
# Iteration No: 159 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.062564744353493', '--iterations': '15', '--factors': '1384', '--NB_smoothing': '5.456204843629548', '--content_scale_factor': '0.07165272740289658'}
# Iteration No: 159 ended. Search finished for the next optimal point.
# Time taken: 2179.8726
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 160 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04260023335116376'}
# Iteration No: 160 ended. Search finished for the next optimal point.
# Time taken: 2166.1090
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 161 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.132584729300215', '--iterations': '15', '--factors': '511', '--NB_smoothing': '1.00836052295075', '--content_scale_factor': '0.06575177651849734'}
# Iteration No: 161 ended. Search finished for the next optimal point.
# Time taken: 529.2526
# Function value obtained: -0.1863
# Current minimum: -0.1915
# Iteration No: 162 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.928321048535693', '--iterations': '15', '--factors': '1389', '--NB_smoothing': '1.3695715998576516', '--content_scale_factor': '0.020256315195230235'}
# Iteration No: 162 ended. Search finished for the next optimal point.
# Time taken: 2257.6037
# Function value obtained: -0.1759
# Current minimum: -0.1915
# Iteration No: 163 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.050267098382691', '--iterations': '15', '--factors': '504', '--NB_smoothing': '1.598323949743127', '--content_scale_factor': '0.0218173715343291'}
# Iteration No: 163 ended. Search finished for the next optimal point.
# Time taken: 487.9697
# Function value obtained: -0.1866
# Current minimum: -0.1915
# Iteration No: 164 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.026837920692142', '--iterations': '15', '--factors': '544', '--NB_smoothing': '1.0416858478208126', '--content_scale_factor': '0.06311116552849275'}
# Iteration No: 164 ended. Search finished for the next optimal point.
# Time taken: 534.6581
# Function value obtained: -0.1875
# Current minimum: -0.1915
# Iteration No: 165 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.03936879181778', '--iterations': '15', '--factors': '1360', '--NB_smoothing': '5.918736827018737', '--content_scale_factor': '0.07725538052466761'}
# Iteration No: 165 ended. Search finished for the next optimal point.
# Time taken: 2119.4263
# Function value obtained: -0.1850
# Current minimum: -0.1915
# Iteration No: 166 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.060718945605028', '--iterations': '15', '--factors': '1390', '--NB_smoothing': '5.443441188521088', '--content_scale_factor': '0.09968955776326527'}
# Iteration No: 166 ended. Search finished for the next optimal point.
# Time taken: 2260.3137
# Function value obtained: -0.1733
# Current minimum: -0.1915
# Iteration No: 167 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04274760575997198'}
# Iteration No: 167 ended. Search finished for the next optimal point.
# Time taken: 2148.6447
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 168 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04281018722796254'}
# Iteration No: 168 ended. Search finished for the next optimal point.
# Time taken: 2146.8081
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 169 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.067844790347442', '--iterations': '15', '--factors': '1316', '--NB_smoothing': '5.533736935891684', '--content_scale_factor': '0.02048468383124086'}
# Iteration No: 169 ended. Search finished for the next optimal point.
# Time taken: 1947.6347
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 170 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042656557438398864'}
# Iteration No: 170 ended. Search finished for the next optimal point.
# Time taken: 2170.2962
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 171 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04279023449532727'}
# Iteration No: 171 ended. Search finished for the next optimal point.
# Time taken: 2152.0306
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 172 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042657008628494794'}
# Iteration No: 172 ended. Search finished for the next optimal point.
# Time taken: 2142.1204
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 173 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.047376169458273', '--iterations': '15', '--factors': '549', '--NB_smoothing': '5.861198609873786', '--content_scale_factor': '0.03611764856765672'}
# Iteration No: 173 ended. Search finished for the next optimal point.
# Time taken: 562.1139
# Function value obtained: -0.1881
# Current minimum: -0.1915
# Iteration No: 174 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04294977430059048'}
# Iteration No: 174 ended. Search finished for the next optimal point.
# Time taken: 2150.5408
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 175 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04274482995595049'}
# Iteration No: 175 ended. Search finished for the next optimal point.
# Time taken: 2160.5507
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 176 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.01940747110491', '--iterations': '15', '--factors': '1374', '--NB_smoothing': '5.558312305204054', '--content_scale_factor': '0.02265255912458833'}
# Iteration No: 176 ended. Search finished for the next optimal point.
# Time taken: 2161.2308
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 177 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042716002062488406'}
# Iteration No: 177 ended. Search finished for the next optimal point.
# Time taken: 2154.5697
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 178 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04272012315090698'}
# Iteration No: 178 ended. Search finished for the next optimal point.
# Time taken: 2164.1385
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 179 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.013415383259635', '--iterations': '15', '--factors': '1386', '--NB_smoothing': '5.9534407761856585', '--content_scale_factor': '0.021287769423349756'}
# Iteration No: 179 ended. Search finished for the next optimal point.
# Time taken: 2177.7133
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 180 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04302649997923903'}
# Iteration No: 180 ended. Search finished for the next optimal point.
# Time taken: 2154.2141
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 181 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042663245776421554'}
# Iteration No: 181 ended. Search finished for the next optimal point.
# Time taken: 2150.4154
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 182 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.003810693890566', '--iterations': '15', '--factors': '543', '--NB_smoothing': '5.4737589331738326', '--content_scale_factor': '0.0673090167709778'}
# Iteration No: 182 ended. Search finished for the next optimal point.
# Time taken: 570.2335
# Function value obtained: -0.1866
# Current minimum: -0.1915
# Iteration No: 183 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04303691370648286'}
# Iteration No: 183 ended. Search finished for the next optimal point.
# Time taken: 2178.5060
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 184 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04277152447692818'}
# Iteration No: 184 ended. Search finished for the next optimal point.
# Time taken: 2161.3564
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 185 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04303316026566853'}
# Iteration No: 185 ended. Search finished for the next optimal point.
# Time taken: 2165.4664
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 186 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04276485893317492'}
# Iteration No: 186 ended. Search finished for the next optimal point.
# Time taken: 2171.8868
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 187 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.017061032214016', '--iterations': '15', '--factors': '525', '--NB_smoothing': '1.898003907288813', '--content_scale_factor': '0.020044764424322493'}
# Iteration No: 187 ended. Search finished for the next optimal point.
# Time taken: 536.6017
# Function value obtained: -0.1870
# Current minimum: -0.1915
# Iteration No: 188 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04303488655315592'}
# Iteration No: 188 ended. Search finished for the next optimal point.
# Time taken: 2182.0482
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 189 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.025065743652759', '--iterations': '15', '--factors': '1390', '--NB_smoothing': '5.2385496914963365', '--content_scale_factor': '0.020680842745157565'}
# Iteration No: 189 ended. Search finished for the next optimal point.
# Time taken: 2225.0055
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 190 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04304523523172206'}
# Iteration No: 190 ended. Search finished for the next optimal point.
# Time taken: 2210.4067
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 191 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.030261776257934', '--iterations': '15', '--factors': '1376', '--NB_smoothing': '1.3796081503280364', '--content_scale_factor': '0.07054663290633745'}
# Iteration No: 191 ended. Search finished for the next optimal point.
# Time taken: 2155.8717
# Function value obtained: -0.1878
# Current minimum: -0.1915
# Iteration No: 192 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04274598836684628'}
# Iteration No: 192 ended. Search finished for the next optimal point.
# Time taken: 2440.4375
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 193 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04275214993422213'}
# Iteration No: 193 ended. Search finished for the next optimal point.
# Time taken: 2434.1814
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 194 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.043122479631583374'}
# Iteration No: 194 ended. Search finished for the next optimal point.
# Time taken: 2434.1768
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 195 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04275664934080661'}
# Iteration No: 195 ended. Search finished for the next optimal point.
# Time taken: 2512.3889
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 196 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.033280076332065', '--iterations': '15', '--factors': '505', '--NB_smoothing': '5.48480400365193', '--content_scale_factor': '0.03459863227465383'}
# Iteration No: 196 ended. Search finished for the next optimal point.
# Time taken: 566.2059
# Function value obtained: -0.1871
# Current minimum: -0.1915
# Iteration No: 197 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04307157375916967'}
# Iteration No: 197 ended. Search finished for the next optimal point.
# Time taken: 2366.4125
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 198 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.043052640301971826'}
# Iteration No: 198 ended. Search finished for the next optimal point.
# Time taken: 2257.3018
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 199 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.076708208259434', '--iterations': '15', '--factors': '1376', '--NB_smoothing': '5.5679676145582375', '--content_scale_factor': '0.020111578178629408'}
# Iteration No: 199 ended. Search finished for the next optimal point.
# Time taken: 2229.0445
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 200 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.051393226659838', '--iterations': '15', '--factors': '1307', '--NB_smoothing': '1.3932532312628674', '--content_scale_factor': '0.02063139694787509'}
# Iteration No: 200 ended. Search finished for the next optimal point.
# Time taken: 2078.4701
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 201 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042967550080469076'}
# Iteration No: 201 ended. Search finished for the next optimal point.
# Time taken: 2237.0463
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 202 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.110601098115407', '--iterations': '15', '--factors': '518', '--NB_smoothing': '1.2281434388055292', '--content_scale_factor': '0.020982652279923526'}
# Iteration No: 202 ended. Search finished for the next optimal point.
# Time taken: 534.8544
# Function value obtained: -0.1868
# Current minimum: -0.1915
# Iteration No: 203 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04340101103938428'}
# Iteration No: 203 ended. Search finished for the next optimal point.
# Time taken: 2233.8198
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 204 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.15226174839833', '--iterations': '15', '--factors': '1345', '--NB_smoothing': '1.3323285070698645', '--content_scale_factor': '0.020158707413727397'}
# Iteration No: 204 ended. Search finished for the next optimal point.
# Time taken: 2285.8260
# Function value obtained: -0.1898
# Current minimum: -0.1915
# Iteration No: 205 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0430430918159186'}
# Iteration No: 205 ended. Search finished for the next optimal point.
# Time taken: 2184.8392
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 206 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04334155024258722'}
# Iteration No: 206 ended. Search finished for the next optimal point.
# Time taken: 2156.5448
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 207 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.975270624408953', '--iterations': '15', '--factors': '501', '--NB_smoothing': '1.0580044018460202', '--content_scale_factor': '0.039735350670060406'}
# Iteration No: 207 ended. Search finished for the next optimal point.
# Time taken: 515.8988
# Function value obtained: -0.1749
# Current minimum: -0.1915
# Iteration No: 208 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04294771822966911'}
# Iteration No: 208 ended. Search finished for the next optimal point.
# Time taken: 2149.7324
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 209 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04293998231119637'}
# Iteration No: 209 ended. Search finished for the next optimal point.
# Time taken: 2163.8375
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 210 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.022712951039867', '--iterations': '15', '--factors': '1369', '--NB_smoothing': '5.876166664890101', '--content_scale_factor': '0.07235510228915196'}
# Iteration No: 210 ended. Search finished for the next optimal point.
# Time taken: 2146.0910
# Function value obtained: -0.1871
# Current minimum: -0.1915
# Iteration No: 211 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.055727323512536', '--iterations': '15', '--factors': '516', '--NB_smoothing': '5.960931329102874', '--content_scale_factor': '0.03918733959927528'}
# Iteration No: 211 ended. Search finished for the next optimal point.
# Time taken: 506.7388
# Function value obtained: -0.1877
# Current minimum: -0.1915
# Iteration No: 212 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.001534251003956', '--iterations': '15', '--factors': '513', '--NB_smoothing': '5.752871891454404', '--content_scale_factor': '0.058954274287295536'}
# Iteration No: 212 ended. Search finished for the next optimal point.
# Time taken: 533.6006
# Function value obtained: -0.1876
# Current minimum: -0.1915
# Iteration No: 213 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.031687467209249', '--iterations': '15', '--factors': '1376', '--NB_smoothing': '1.0800483036720356', '--content_scale_factor': '0.022097797417457512'}
# Iteration No: 213 ended. Search finished for the next optimal point.
# Time taken: 2160.8142
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 214 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.062577467644893', '--iterations': '15', '--factors': '1384', '--NB_smoothing': '1.057897047858267', '--content_scale_factor': '0.07721754529807921'}
# Iteration No: 214 ended. Search finished for the next optimal point.
# Time taken: 2285.7492
# Function value obtained: -0.1848
# Current minimum: -0.1915
# Iteration No: 215 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.9968675479751', '--iterations': '15', '--factors': '524', '--NB_smoothing': '2.5237163569347816', '--content_scale_factor': '0.02024497956301449'}
# Iteration No: 215 ended. Search finished for the next optimal point.
# Time taken: 518.4853
# Function value obtained: -0.1750
# Current minimum: -0.1915
# Iteration No: 216 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.039231612610252', '--iterations': '15', '--factors': '1366', '--NB_smoothing': '5.11485041931175', '--content_scale_factor': '0.09957818439670653'}
# Iteration No: 216 ended. Search finished for the next optimal point.
# Time taken: 2168.1865
# Function value obtained: -0.1735
# Current minimum: -0.1915
# Iteration No: 217 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.027971910552251', '--iterations': '15', '--factors': '509', '--NB_smoothing': '1.4745124077503728', '--content_scale_factor': '0.05486369222462252'}
# Iteration No: 217 ended. Search finished for the next optimal point.
# Time taken: 517.6501
# Function value obtained: -0.1878
# Current minimum: -0.1915
# Iteration No: 218 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.068838710579577', '--iterations': '15', '--factors': '506', '--NB_smoothing': '5.9140393056660665', '--content_scale_factor': '0.03627283294645944'}
# Iteration No: 218 ended. Search finished for the next optimal point.
# Time taken: 511.1111
# Function value obtained: -0.1872
# Current minimum: -0.1915
# Iteration No: 219 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.986045120525628', '--iterations': '15', '--factors': '1343', '--NB_smoothing': '5.6147130274684365', '--content_scale_factor': '0.06246958746583153'}
# Iteration No: 219 ended. Search finished for the next optimal point.
# Time taken: 2200.9196
# Function value obtained: -0.1726
# Current minimum: -0.1915
# Iteration No: 220 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.041052297903246', '--iterations': '15', '--factors': '514', '--NB_smoothing': '1.530326051847509', '--content_scale_factor': '0.07191564762244855'}
# Iteration No: 220 ended. Search finished for the next optimal point.
# Time taken: 524.7575
# Function value obtained: -0.1848
# Current minimum: -0.1915
# Iteration No: 221 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04282653808737351'}
# Iteration No: 221 ended. Search finished for the next optimal point.
# Time taken: 2186.0632
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 222 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.008163809388325', '--iterations': '15', '--factors': '534', '--NB_smoothing': '4.418641398263474', '--content_scale_factor': '0.020469201793404616'}
# Iteration No: 222 ended. Search finished for the next optimal point.
# Time taken: 547.2336
# Function value obtained: -0.1874
# Current minimum: -0.1915
# Iteration No: 223 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0428232822097933'}
# Iteration No: 223 ended. Search finished for the next optimal point.
# Time taken: 2211.0302
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 224 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.08183995273836', '--iterations': '15', '--factors': '1394', '--NB_smoothing': '5.083247509000152', '--content_scale_factor': '0.020401191760896165'}
# Iteration No: 224 ended. Search finished for the next optimal point.
# Time taken: 2262.8550
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 225 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04278242108445936'}
# Iteration No: 225 ended. Search finished for the next optimal point.
# Time taken: 2166.2846
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 226 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.03322350457453', '--iterations': '15', '--factors': '506', '--NB_smoothing': '5.963945006778651', '--content_scale_factor': '0.03654133218979687'}
# Iteration No: 226 ended. Search finished for the next optimal point.
# Time taken: 511.5941
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 227 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04300567199728042'}
# Iteration No: 227 ended. Search finished for the next optimal point.
# Time taken: 2177.5256
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 228 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.038250245376302', '--iterations': '15', '--factors': '508', '--NB_smoothing': '1.0400397644610984', '--content_scale_factor': '0.05827821637258193'}
# Iteration No: 228 ended. Search finished for the next optimal point.
# Time taken: 497.5979
# Function value obtained: -0.1877
# Current minimum: -0.1915
# Iteration No: 229 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.053807518594697', '--iterations': '15', '--factors': '1357', '--NB_smoothing': '5.994226150323637', '--content_scale_factor': '0.06711095594406868'}
# Iteration No: 229 ended. Search finished for the next optimal point.
# Time taken: 2146.2348
# Function value obtained: -0.1887
# Current minimum: -0.1915
# Iteration No: 230 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.035700942361674', '--iterations': '15', '--factors': '1334', '--NB_smoothing': '1.011581952029568', '--content_scale_factor': '0.07121933079035717'}
# Iteration No: 230 ended. Search finished for the next optimal point.
# Time taken: 2088.5761
# Function value obtained: -0.1874
# Current minimum: -0.1915
# Iteration No: 231 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.043036003889860064'}
# Iteration No: 231 ended. Search finished for the next optimal point.
# Time taken: 2191.9664
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 232 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.020009272402923', '--iterations': '15', '--factors': '1315', '--NB_smoothing': '5.622358048025827', '--content_scale_factor': '0.02012496746155623'}
# Iteration No: 232 ended. Search finished for the next optimal point.
# Time taken: 2099.1807
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 233 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.03471588628456', '--iterations': '15', '--factors': '532', '--NB_smoothing': '1.6735657178295842', '--content_scale_factor': '0.09912544994900344'}
# Iteration No: 233 ended. Search finished for the next optimal point.
# Time taken: 526.2879
# Function value obtained: -0.1732
# Current minimum: -0.1915
# Iteration No: 234 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.007015832092802', '--iterations': '15', '--factors': '579', '--NB_smoothing': '1.1729221300093304', '--content_scale_factor': '0.020152749318144193'}
# Iteration No: 234 ended. Search finished for the next optimal point.
# Time taken: 607.5080
# Function value obtained: -0.1880
# Current minimum: -0.1915
# Iteration No: 235 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042853229293074314'}
# Iteration No: 235 ended. Search finished for the next optimal point.
# Time taken: 2198.9641
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 236 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04285829052625275'}
# Iteration No: 236 ended. Search finished for the next optimal point.
# Time taken: 2188.1768
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 237 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04286264170999303'}
# Iteration No: 237 ended. Search finished for the next optimal point.
# Time taken: 2171.3314
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 238 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.005724286947987', '--iterations': '15', '--factors': '1384', '--NB_smoothing': '1.0436218053897393', '--content_scale_factor': '0.06919757905237373'}
# Iteration No: 238 ended. Search finished for the next optimal point.
# Time taken: 2169.1265
# Function value obtained: -0.1882
# Current minimum: -0.1915
# Iteration No: 239 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04280906335585011'}
# Iteration No: 239 ended. Search finished for the next optimal point.
# Time taken: 2276.4636
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 240 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.979246975120425', '--iterations': '15', '--factors': '554', '--NB_smoothing': '1.3940229968689708', '--content_scale_factor': '0.09949026724370155'}
# Iteration No: 240 ended. Search finished for the next optimal point.
# Time taken: 567.8774
# Function value obtained: -0.1574
# Current minimum: -0.1915
# Iteration No: 241 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04277880926022113'}
# Iteration No: 241 ended. Search finished for the next optimal point.
# Time taken: 2170.6776
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 242 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.021535142441249', '--iterations': '15', '--factors': '1387', '--NB_smoothing': '1.2355656380720506', '--content_scale_factor': '0.022241048936551808'}
# Iteration No: 242 ended. Search finished for the next optimal point.
# Time taken: 2231.4907
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 243 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04286798460215483'}
# Iteration No: 243 ended. Search finished for the next optimal point.
# Time taken: 2178.8448
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 244 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04286520135163311'}
# Iteration No: 244 ended. Search finished for the next optimal point.
# Time taken: 2213.3777
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 245 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04286992511202463'}
# Iteration No: 245 ended. Search finished for the next optimal point.
# Time taken: 2247.3245
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 246 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042876295568135055'}
# Iteration No: 246 ended. Search finished for the next optimal point.
# Time taken: 2387.7992
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 247 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04323125646855196'}
# Iteration No: 247 ended. Search finished for the next optimal point.
# Time taken: 2291.6104
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 248 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042869385598078895'}
# Iteration No: 248 ended. Search finished for the next optimal point.
# Time taken: 2172.6023
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 249 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04325954481901494'}
# Iteration No: 249 ended. Search finished for the next optimal point.
# Time taken: 2277.3134
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 250 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.849602645674086', '--iterations': '15', '--factors': '1397', '--NB_smoothing': '3.02783700665645', '--content_scale_factor': '0.020676137526649478'}
# Iteration No: 250 ended. Search finished for the next optimal point.
# Time taken: 2521.3550
# Function value obtained: -0.1763
# Current minimum: -0.1915
# Iteration No: 251 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.007524370603949', '--iterations': '15', '--factors': '529', '--NB_smoothing': '1.2208186579766447', '--content_scale_factor': '0.02245243694381447'}
# Iteration No: 251 ended. Search finished for the next optimal point.
# Time taken: 626.9099
# Function value obtained: -0.1872
# Current minimum: -0.1915
# Iteration No: 252 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04325746107380796'}
# Iteration No: 252 ended. Search finished for the next optimal point.
# Time taken: 2304.1452
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 253 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04299934814253527'}
# Iteration No: 253 ended. Search finished for the next optimal point.
# Time taken: 2480.7046
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 254 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.078954206142523', '--iterations': '15', '--factors': '1324', '--NB_smoothing': '1.3841723995001756', '--content_scale_factor': '0.02064827767724884'}
# Iteration No: 254 ended. Search finished for the next optimal point.
# Time taken: 2103.4598
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 255 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.033013844014731', '--iterations': '15', '--factors': '1368', '--NB_smoothing': '1.0469834103188234', '--content_scale_factor': '0.06832335796432225'}
# Iteration No: 255 ended. Search finished for the next optimal point.
# Time taken: 2109.8020
# Function value obtained: -0.1884
# Current minimum: -0.1915
# Iteration No: 256 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042972625600881414'}
# Iteration No: 256 ended. Search finished for the next optimal point.
# Time taken: 2166.5909
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 257 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04295468775007519'}
# Iteration No: 257 ended. Search finished for the next optimal point.
# Time taken: 2189.8489
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 258 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.019622572859716', '--iterations': '15', '--factors': '1352', '--NB_smoothing': '5.809341130029782', '--content_scale_factor': '0.06924882933407651'}
# Iteration No: 258 ended. Search finished for the next optimal point.
# Time taken: 2046.0216
# Function value obtained: -0.1880
# Current minimum: -0.1915
# Iteration No: 259 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0119701087397575', '--iterations': '15', '--factors': '559', '--NB_smoothing': '5.682652752160242', '--content_scale_factor': '0.069783431506976'}
# Iteration No: 259 ended. Search finished for the next optimal point.
# Time taken: 592.9583
# Function value obtained: -0.1864
# Current minimum: -0.1915
# Iteration No: 260 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.011665315283012', '--iterations': '15', '--factors': '1290', '--NB_smoothing': '1.2303465700982794', '--content_scale_factor': '0.020525157626506134'}
# Iteration No: 260 ended. Search finished for the next optimal point.
# Time taken: 1924.8899
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 261 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04333056704549013'}
# Iteration No: 261 ended. Search finished for the next optimal point.
# Time taken: 2259.4119
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 262 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04330494319189247'}
# Iteration No: 262 ended. Search finished for the next optimal point.
# Time taken: 2183.6492
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 263 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.020593465387285', '--iterations': '15', '--factors': '1299', '--NB_smoothing': '1.0571043721921378', '--content_scale_factor': '0.02047943124056082'}
# Iteration No: 263 ended. Search finished for the next optimal point.
# Time taken: 2020.6066
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 264 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.043204339022987065'}
# Iteration No: 264 ended. Search finished for the next optimal point.
# Time taken: 2247.7966
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 265 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.011121137226077', '--iterations': '15', '--factors': '510', '--NB_smoothing': '5.654089372366851', '--content_scale_factor': '0.051698028254985526'}
# Iteration No: 265 ended. Search finished for the next optimal point.
# Time taken: 547.9494
# Function value obtained: -0.1879
# Current minimum: -0.1915
# Iteration No: 266 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04306723951022232'}
# Iteration No: 266 ended. Search finished for the next optimal point.
# Time taken: 2242.3394
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 267 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04306085821303282'}
# Iteration No: 267 ended. Search finished for the next optimal point.
# Time taken: 2183.2325
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 268 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.99990254757122', '--iterations': '15', '--factors': '1392', '--NB_smoothing': '5.05179081859324', '--content_scale_factor': '0.04807231757820741'}
# Iteration No: 268 ended. Search finished for the next optimal point.
# Time taken: 2237.0148
# Function value obtained: -0.1754
# Current minimum: -0.1915
# Iteration No: 269 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04300407584842501'}
# Iteration No: 269 ended. Search finished for the next optimal point.
# Time taken: 2282.5068
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 270 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04301613513334181'}
# Iteration No: 270 ended. Search finished for the next optimal point.
# Time taken: 2247.3923
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 271 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.145880828753024', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.018286046229617', '--content_scale_factor': '0.020136189678981883'}
# Iteration No: 271 ended. Search finished for the next optimal point.
# Time taken: 2212.4812
# Function value obtained: -0.1880
# Current minimum: -0.1915
# Iteration No: 272 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0427208715395474'}
# Iteration No: 272 ended. Search finished for the next optimal point.
# Time taken: 2198.6389
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 273 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04272069354421478'}
# Iteration No: 273 ended. Search finished for the next optimal point.
# Time taken: 2170.9402
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 274 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04272875265388856'}
# Iteration No: 274 ended. Search finished for the next optimal point.
# Time taken: 2170.6467
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 275 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04273012070254544'}
# Iteration No: 275 ended. Search finished for the next optimal point.
# Time taken: 2211.9021
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 276 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.017676660188476', '--iterations': '15', '--factors': '505', '--NB_smoothing': '5.968414306987542', '--content_scale_factor': '0.06175098889171758'}
# Iteration No: 276 ended. Search finished for the next optimal point.
# Time taken: 519.9398
# Function value obtained: -0.1869
# Current minimum: -0.1915
# Iteration No: 277 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0298696592253105', '--iterations': '15', '--factors': '514', '--NB_smoothing': '3.6759135978592585', '--content_scale_factor': '0.020322386484914884'}
# Iteration No: 277 ended. Search finished for the next optimal point.
# Time taken: 531.5963
# Function value obtained: -0.1867
# Current minimum: -0.1915
# Iteration No: 278 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.028801566855681', '--iterations': '15', '--factors': '1360', '--NB_smoothing': '5.954738936877795', '--content_scale_factor': '0.020070726696465098'}
# Iteration No: 278 ended. Search finished for the next optimal point.
# Time taken: 2090.2837
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 279 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.039302911095127', '--iterations': '15', '--factors': '1362', '--NB_smoothing': '5.931279344774813', '--content_scale_factor': '0.060332320515566654'}
# Iteration No: 279 ended. Search finished for the next optimal point.
# Time taken: 2142.4870
# Function value obtained: -0.1906
# Current minimum: -0.1915
# Iteration No: 280 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.009517924568972', '--iterations': '15', '--factors': '540', '--NB_smoothing': '1.3131065709213476', '--content_scale_factor': '0.07612410732156782'}
# Iteration No: 280 ended. Search finished for the next optimal point.
# Time taken: 540.7204
# Function value obtained: -0.1840
# Current minimum: -0.1915
# Iteration No: 281 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04283790779580232'}
# Iteration No: 281 ended. Search finished for the next optimal point.
# Time taken: 2185.0445
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 282 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.04652244244234', '--iterations': '15', '--factors': '536', '--NB_smoothing': '1.183299588035114', '--content_scale_factor': '0.020314690457787325'}
# Iteration No: 282 ended. Search finished for the next optimal point.
# Time taken: 534.3584
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 283 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.78265213704368', '--iterations': '15', '--factors': '1380', '--NB_smoothing': '5.602746115581427', '--content_scale_factor': '0.02000485503485706'}
# Iteration No: 283 ended. Search finished for the next optimal point.
# Time taken: 2117.0563
# Function value obtained: -0.1767
# Current minimum: -0.1915
# Iteration No: 284 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04295934155730494'}
# Iteration No: 284 ended. Search finished for the next optimal point.
# Time taken: 2225.5699
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 285 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042965558193531025'}
# Iteration No: 285 ended. Search finished for the next optimal point.
# Time taken: 2203.8770
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 286 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.080449645131898', '--iterations': '15', '--factors': '528', '--NB_smoothing': '5.65710014069965', '--content_scale_factor': '0.020133678483234777'}
# Iteration No: 286 ended. Search finished for the next optimal point.
# Time taken: 527.2756
# Function value obtained: -0.1873
# Current minimum: -0.1915
# Iteration No: 287 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04283386709981335'}
# Iteration No: 287 ended. Search finished for the next optimal point.
# Time taken: 2165.6056
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 288 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042945505146852504'}
# Iteration No: 288 ended. Search finished for the next optimal point.
# Time taken: 2222.2556
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 289 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '9.097842830638266', '--iterations': '15', '--factors': '1377', '--NB_smoothing': '5.934634650637216', '--content_scale_factor': '0.03504515022567051'}
# Iteration No: 289 ended. Search finished for the next optimal point.
# Time taken: 2361.7493
# Function value obtained: -0.1847
# Current minimum: -0.1915
# Iteration No: 290 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.021422174668731', '--iterations': '15', '--factors': '1365', '--NB_smoothing': '5.443490118696897', '--content_scale_factor': '0.020393951431420882'}
# Iteration No: 290 ended. Search finished for the next optimal point.
# Time taken: 2305.0388
# Function value obtained: -0.1903
# Current minimum: -0.1915
# Iteration No: 291 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04266207356765267'}
# Iteration No: 291 ended. Search finished for the next optimal point.
# Time taken: 2395.4501
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 292 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.0426577192684269'}
# Iteration No: 292 ended. Search finished for the next optimal point.
# Time taken: 2292.9352
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 293 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04249975133598273'}
# Iteration No: 293 ended. Search finished for the next optimal point.
# Time taken: 2241.8438
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 294 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04266315947379348'}
# Iteration No: 294 ended. Search finished for the next optimal point.
# Time taken: 2234.6348
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 295 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.152174595459276', '--iterations': '15', '--factors': '1399', '--NB_smoothing': '5.2146195999095895', '--content_scale_factor': '0.09970267230380943'}
# Iteration No: 295 ended. Search finished for the next optimal point.
# Time taken: 2317.4410
# Function value obtained: -0.1732
# Current minimum: -0.1915
# Iteration No: 296 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04272749441224595'}
# Iteration No: 296 ended. Search finished for the next optimal point.
# Time taken: 2277.8578
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 297 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04265754145816897'}
# Iteration No: 297 ended. Search finished for the next optimal point.
# Time taken: 2254.7844
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 298 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042637321869987824'}
# Iteration No: 298 ended. Search finished for the next optimal point.
# Time taken: 2383.9710
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 299 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04265480211592751'}
# Iteration No: 299 ended. Search finished for the next optimal point.
# Time taken: 2335.8401
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 300 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.011641394222632', '--iterations': '15', '--factors': '1390', '--NB_smoothing': '5.85404101872205', '--content_scale_factor': '0.0697314120105756'}
# Iteration No: 300 ended. Search finished for the next optimal point.
# Time taken: 2363.0994
# Function value obtained: -0.1878
# Current minimum: -0.1915
# Iteration No: 301 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04263312812931337'}
# Iteration No: 301 ended. Search finished for the next optimal point.
# Time taken: 2199.8322
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 302 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04268015524116148'}
# Iteration No: 302 ended. Search finished for the next optimal point.
# Time taken: 2186.2301
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 303 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04268340850170952'}
# Iteration No: 303 ended. Search finished for the next optimal point.
# Time taken: 2200.1793
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 304 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04263853016242633'}
# Iteration No: 304 ended. Search finished for the next optimal point.
# Time taken: 2223.8704
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 305 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042685219397432604'}
# Iteration No: 305 ended. Search finished for the next optimal point.
# Time taken: 2176.9153
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 306 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042687698048985326'}
# Iteration No: 306 ended. Search finished for the next optimal point.
# Time taken: 2208.4940
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 307 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.089683936879094', '--iterations': '15', '--factors': '1395', '--NB_smoothing': '1.0556776683312898', '--content_scale_factor': '0.07912330678249345'}
# Iteration No: 307 ended. Search finished for the next optimal point.
# Time taken: 2277.1698
# Function value obtained: -0.1838
# Current minimum: -0.1915
# Iteration No: 308 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.014948519334029', '--iterations': '15', '--factors': '518', '--NB_smoothing': '5.736520663803038', '--content_scale_factor': '0.0357850157550734'}
# Iteration No: 308 ended. Search finished for the next optimal point.
# Time taken: 536.1950
# Function value obtained: -0.1874
# Current minimum: -0.1915
# Iteration No: 309 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0427623643671174'}
# Iteration No: 309 ended. Search finished for the next optimal point.
# Time taken: 2169.7737
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 310 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042762616750317874'}
# Iteration No: 310 ended. Search finished for the next optimal point.
# Time taken: 2182.1979
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 311 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04286837901007235'}
# Iteration No: 311 ended. Search finished for the next optimal point.
# Time taken: 2204.6064
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 312 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.038307494903272', '--iterations': '15', '--factors': '1388', '--NB_smoothing': '2.1654259092579236', '--content_scale_factor': '0.020295776661241174'}
# Iteration No: 312 ended. Search finished for the next optimal point.
# Time taken: 2157.6194
# Function value obtained: -0.1904
# Current minimum: -0.1915
# Iteration No: 313 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.0427795111199675'}
# Iteration No: 313 ended. Search finished for the next optimal point.
# Time taken: 2201.2458
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 314 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042842791322435306'}
# Iteration No: 314 ended. Search finished for the next optimal point.
# Time taken: 2207.4817
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 315 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042794773364096386'}
# Iteration No: 315 ended. Search finished for the next optimal point.
# Time taken: 2213.8194
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 316 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04283626585676112'}
# Iteration No: 316 ended. Search finished for the next optimal point.
# Time taken: 2205.5331
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 317 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042754459545125245'}
# Iteration No: 317 ended. Search finished for the next optimal point.
# Time taken: 2249.6333
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 318 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04275110374063021'}
# Iteration No: 318 ended. Search finished for the next optimal point.
# Time taken: 2289.0201
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 319 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042849204175999855'}
# Iteration No: 319 ended. Search finished for the next optimal point.
# Time taken: 2272.0389
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 320 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04274828591610111'}
# Iteration No: 320 ended. Search finished for the next optimal point.
# Time taken: 2242.7951
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 321 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04275551398137322'}
# Iteration No: 321 ended. Search finished for the next optimal point.
# Time taken: 2227.0491
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 322 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04286673608685432'}
# Iteration No: 322 ended. Search finished for the next optimal point.
# Time taken: 2243.6531
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 323 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.042759115280349674'}
# Iteration No: 323 ended. Search finished for the next optimal point.
# Time taken: 2258.0507
# Function value obtained: -0.1914
# Current minimum: -0.1915
# Iteration No: 324 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.053506312321002', '--iterations': '15', '--factors': '1291', '--NB_smoothing': '5.977149236733112', '--content_scale_factor': '0.021002470066329017'}
# Iteration No: 324 ended. Search finished for the next optimal point.
# Time taken: 2035.6202
# Function value obtained: -0.1902
# Current minimum: -0.1915
# Iteration No: 325 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '10.986486596788385', '--iterations': '15', '--factors': '1381', '--NB_smoothing': '1.4264689058695514', '--content_scale_factor': '0.06902015577720814'}
# Iteration No: 325 ended. Search finished for the next optimal point.
# Time taken: 2278.1312
# Function value obtained: -0.1708
# Current minimum: -0.1915
# Iteration No: 326 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042636720144247124'}
# Iteration No: 326 ended. Search finished for the next optimal point.
# Time taken: 2252.9371
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 327 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04263591493437939'}
# Iteration No: 327 ended. Search finished for the next optimal point.
# Time taken: 2244.4109
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 328 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042635612329672126'}
# Iteration No: 328 ended. Search finished for the next optimal point.
# Time taken: 2282.4998
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 329 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.970666914890664', '--iterations': '15', '--factors': '1386', '--NB_smoothing': '5.756977326608724', '--content_scale_factor': '0.03122504919332925'}
# Iteration No: 329 ended. Search finished for the next optimal point.
# Time taken: 2271.3355
# Function value obtained: -0.1851
# Current minimum: -0.1915
# Iteration No: 330 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.470541934906889', '--iterations': '15', '--factors': '1389', '--NB_smoothing': '1.3413411893945102', '--content_scale_factor': '0.020235139673727965'}
# Iteration No: 330 ended. Search finished for the next optimal point.
# Time taken: 2314.3127
# Function value obtained: -0.1870
# Current minimum: -0.1915
# Iteration No: 331 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041428156036507145'}
# Iteration No: 331 ended. Search finished for the next optimal point.
# Time taken: 2230.4312
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 332 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04147227467757601'}
# Iteration No: 332 ended. Search finished for the next optimal point.
# Time taken: 2213.6185
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 333 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04225378525482612'}
# Iteration No: 333 ended. Search finished for the next optimal point.
# Time taken: 2201.1881
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 334 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04225675470859999'}
# Iteration No: 334 ended. Search finished for the next optimal point.
# Time taken: 2274.2925
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 335 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04153509932022029'}
# Iteration No: 335 ended. Search finished for the next optimal point.
# Time taken: 2229.3588
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 336 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04228734573633644'}
# Iteration No: 336 ended. Search finished for the next optimal point.
# Time taken: 2239.0515
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 337 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04153612614896497'}
# Iteration No: 337 ended. Search finished for the next optimal point.
# Time taken: 2210.1457
# Function value obtained: -0.1911
# Current minimum: -0.1915
# Iteration No: 338 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042309557503686805'}
# Iteration No: 338 ended. Search finished for the next optimal point.
# Time taken: 2207.8037
# Function value obtained: -0.1913
# Current minimum: -0.1915
# Iteration No: 339 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.775634759834045', '--iterations': '15', '--factors': '1318', '--NB_smoothing': '1.0231984961325804', '--content_scale_factor': '0.020209212679639172'}
# Iteration No: 339 ended. Search finished for the next optimal point.
# Time taken: 2049.2465
# Function value obtained: -0.1858
# Current minimum: -0.1915
# Iteration No: 340 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041310711327973246'}
# Iteration No: 340 ended. Search finished for the next optimal point.
# Time taken: 2220.4339
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 341 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04135591357854336'}
# Iteration No: 341 ended. Search finished for the next optimal point.
# Time taken: 2203.8354
# Function value obtained: -0.1909
# Current minimum: -0.1915
# Iteration No: 342 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04141252086030368'}
# Iteration No: 342 ended. Search finished for the next optimal point.
# Time taken: 2201.4648
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 343 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.557995752438556', '--iterations': '15', '--factors': '1385', '--NB_smoothing': '5.896865368558301', '--content_scale_factor': '0.031100811716620956'}
# Iteration No: 343 ended. Search finished for the next optimal point.
# Time taken: 2243.6459
# Function value obtained: -0.1866
# Current minimum: -0.1915
# Iteration No: 344 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.042102896174515'}
# Iteration No: 344 ended. Search finished for the next optimal point.
# Time taken: 2217.5578
# Function value obtained: -0.1912
# Current minimum: -0.1915
# Iteration No: 345 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.041233646671317535'}
# Iteration No: 345 ended. Search finished for the next optimal point.
# Time taken: 2216.2672
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 346 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '8.91087668462566', '--iterations': '15', '--factors': '534', '--NB_smoothing': '1.032305049461195', '--content_scale_factor': '0.0351822462534699'}
# Iteration No: 346 ended. Search finished for the next optimal point.
# Time taken: 564.5944
# Function value obtained: -0.1846
# Current minimum: -0.1915
# Iteration No: 347 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04104360512605208'}
# Iteration No: 347 ended. Search finished for the next optimal point.
# Time taken: 2200.1340
# Function value obtained: -0.1909
# Current minimum: -0.1915
# Iteration No: 348 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04108584027142875'}
# Iteration No: 348 ended. Search finished for the next optimal point.
# Time taken: 2210.4354
# Function value obtained: -0.1909
# Current minimum: -0.1915
# Iteration No: 349 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '1.0', '--content_scale_factor': '0.04111599495853424'}
# Iteration No: 349 ended. Search finished for the next optimal point.
# Time taken: 2209.1126
# Function value obtained: -0.1910
# Current minimum: -0.1915
# Iteration No: 350 started. Searching for the next optimal point.
# Args: {'--base_model': 'BaselineModel', '--num_k_folds': '10', '--topk': '3', '--regularization': '7.0', '--iterations': '15', '--factors': '1400', '--NB_smoothing': '6.0', '--content_scale_factor': '0.04189387599754939'}
# Iteration No: 350 ended. Search finished for the next optimal point.
# Time taken: 2198.0484
# Function value obtained: -0.1911
# Current minimum: -0.1915


#           fun: -0.1914542929874981
    func_vals: array([-0.17362607, -0.18653815, -0.18565022, -0.17347889, -0.17102218,
       -0.18188893, -0.17981739, -0.18865196, -0.17163491, -0.18757381,
       -0.19029642, -0.18633875, -0.19135173, -0.17590542, -0.17399926,
       -0.19081385, -0.19001722, -0.19032119, -0.19139245, -0.19106529,
       -0.19110268, -0.18694393, -0.19145429, -0.18906908, -0.18839376,
       -0.18987443, -0.18727448, -0.1879937 , -0.18965251, -0.19059339,
       -0.1901441 , -0.17767925, -0.17349678, -0.19112638, -0.19114056,
       -0.18578583, -0.19010781, -0.18887279, -0.18986625, -0.1877753 ,
       -0.18786372, -0.19109035, -0.19106529, -0.15740396, -0.19121665,
       -0.19015432, -0.18815223, -0.19115307, -0.19033338, -0.19112802,
       -0.19112804, -0.1913296 , -0.19114055, -0.19131708, -0.18976496,
       -0.18638575, -0.19131708, -0.17609328, -0.19016982, -0.19135438,
       -0.18616552, -0.1913296 , -0.19024556, -0.18671696, -0.19127951,
       -0.18667603, -0.19024601, -0.19132971, -0.19129203, -0.17317976,
       -0.18807649, -0.18857167, -0.19033415, -0.18790323, -0.19117883,
       -0.17542798, -0.19117883, -0.19039716, -0.18715765, -0.18787897,
       -0.18656962, -0.18787659, -0.19121665, -0.19121665, -0.18700543,
       -0.18796678, -0.1913296 , -0.19020795, -0.19035882, -0.19131706,
       -0.19028344, -0.19122929, -0.18593515, -0.1883695 , -0.19119148,
       -0.19131708, -0.17359813, -0.19125448, -0.17570395, -0.18889752,
       -0.18863024, -0.19122929, -0.18811295, -0.1911659 , -0.19119148,
       -0.19015781, -0.19119148, -0.18731818, -0.18984109, -0.1875885 ,
       -0.18617433, -0.19121665, -0.19121665, -0.18742646, -0.19131706,
       -0.17537331, -0.18696674, -0.17329413, -0.19132971, -0.19020689,
       -0.19131706, -0.18544556, -0.19130448, -0.19027087, -0.18738324,
       -0.1885086 , -0.19132971, -0.18971481, -0.18827425, -0.19130454,
       -0.19127951, -0.17571744, -0.18676022, -0.19130454, -0.19132971,
       -0.18901016, -0.15779349, -0.19028362, -0.1913046 , -0.19028324,
       -0.1913296 , -0.19131708, -0.1913296 , -0.19131708, -0.19016918,
       -0.19127951, -0.19131708, -0.19127951, -0.18783686, -0.19129196,
       -0.19127951, -0.19127951, -0.18767576, -0.17573702, -0.19134225,
       -0.18664016, -0.19127951, -0.18683017, -0.18731352, -0.19134225,
       -0.18625996, -0.17589295, -0.18656211, -0.18747137, -0.18499209,
       -0.1732573 , -0.19136703, -0.19136703, -0.19020764, -0.19134214,
       -0.19136703, -0.19132949, -0.18814142, -0.19136687, -0.19135438,
       -0.19033395, -0.19135438, -0.19135438, -0.19037164, -0.19136703,
       -0.19132949, -0.18659381, -0.19135411, -0.19136703, -0.19136703,
       -0.19136703, -0.18704262, -0.19136703, -0.19029594, -0.19136703,
       -0.18777951, -0.19135438, -0.19136703, -0.1913413 , -0.19136703,
       -0.1871472 , -0.19135423, -0.19136715, -0.19019493, -0.190195  ,
       -0.19136687, -0.18680217, -0.19137919, -0.18982902, -0.19136703,
       -0.19137919, -0.17485584, -0.19136687, -0.19136687, -0.18705004,
       -0.18765029, -0.18761876, -0.19029604, -0.18480341, -0.17502331,
       -0.17347074, -0.18783639, -0.18720699, -0.17263535, -0.18483026,
       -0.19135439, -0.18738274, -0.19135439, -0.1902071 , -0.19136703,
       -0.18725758, -0.19139207, -0.1877465 , -0.18874856, -0.18741361,
       -0.19135411, -0.19035949, -0.17321839, -0.18800336, -0.19132882,
       -0.19132882, -0.19134147, -0.18821976, -0.19136703, -0.15739947,
       -0.19136703, -0.19027149, -0.19134147, -0.19134147, -0.19134147,
       -0.19135411, -0.19134129, -0.19134147, -0.19136658, -0.17628167,
       -0.18721944, -0.19136658, -0.19137956, -0.19018244, -0.18842052,
       -0.19136687, -0.19136687, -0.18804346, -0.18637914, -0.19027035,
       -0.19137919, -0.19135407, -0.1903344 , -0.19134116, -0.18793798,
       -0.19136715, -0.19136715, -0.17540074, -0.19139207, -0.19139207,
       -0.18799497, -0.19135438, -0.19135438, -0.19135438, -0.19135438,
       -0.1868787 , -0.18666299, -0.19037213, -0.19058123, -0.18404831,
       -0.19134133, -0.18733407, -0.17668412, -0.19136687, -0.19136687,
       -0.1872568 , -0.19132881, -0.19136687, -0.18474453, -0.19032105,
       -0.19132949, -0.19132949, -0.19132971, -0.19132949, -0.17319305,
       -0.19135438, -0.19132949, -0.19131708, -0.19134214, -0.1878293 ,
       -0.19131708, -0.19134213, -0.19134213, -0.19131708, -0.19134213,
       -0.19134213, -0.18376942, -0.18743307, -0.19136703, -0.19136703,
       -0.19134147, -0.19037192, -0.19136703, -0.19134133, -0.19136703,
       -0.19132881, -0.19136703, -0.19136703, -0.19132882, -0.19136703,
       -0.19136703, -0.19134147, -0.19136703, -0.19015814, -0.17082787,
       -0.19131708, -0.19131708, -0.19131708, -0.18514709, -0.18700743,
       -0.19097719, -0.19098979, -0.19126699, -0.19126699, -0.19105276,
       -0.19127951, -0.19105276, -0.19127951, -0.18578803, -0.19095255,
       -0.19093949, -0.19098971, -0.18661998, -0.19117883, -0.19095247,
       -0.18455741, -0.19091533, -0.19092781, -0.19095294, -0.19112804])
       models: [GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396)]
 random_state: <mtrand.RandomState object at 0x7f8417d47a68>
        space: Space([Real(low=1.0, high=6.0, prior='uniform', transform='normalize'),
       Real(low=7.0, high=11.0, prior='uniform', transform='normalize'),
       Categorical(categories=(15,), prior=None),
       Integer(low=500, high=1400),
       Real(low=0.02, high=0.1, prior='uniform', transform='normalize')])
        specs: {'args': {'n_jobs': 1, 'kappa': 1.96, 'xi': 0.01, 'n_restarts_optimizer': 5, 'n_points': 10000, 'callback': None, 'verbose': True, 'random_state': <mtrand.RandomState object at 0x7f8417d47a68>, 'y0': None, 'x0': None, 'acq_optimizer': 'auto', 'acq_func': 'gp_hedge', 'n_random_starts': 10, 'n_calls': 350, 'base_estimator': GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
                         kernel=1**2 * Matern(length_scale=[1, 1, 1, 1, 1], nu=2.5),
                         n_restarts_optimizer=2, noise='gaussian',
                         normalize_y=True, optimizer='fmin_l_bfgs_b',
                         random_state=209652396), 'dimensions': Space([Real(low=1.0, high=6.0, prior='uniform', transform='normalize'),
       Real(low=7.0, high=11.0, prior='uniform', transform='normalize'),
       Categorical(categories=(15,), prior=None),
       Integer(low=500, high=1400),
       Real(low=0.02, high=0.1, prior='uniform', transform='normalize')]), 'func': <function opt_baseline at 0x7f8417d4d620>}, 'function': 'base_minimize'}
            x: [6.0, 7.0, 15, 1400, 0.043679476593803446]
      x_iters: [[3.964223091125092, 10.37706299432407, 15, 1263, 0.0698850957428778], [2.9219085364634996, 8.190138426177889, 15, 745, 0.058213209385707995], [5.060843643877467, 8.919908689500229, 15, 1252, 0.046991692833381477], [4.240859360255986, 8.472966159362192, 15, 626, 0.08960698066867494], [3.368040226368553, 10.203643007918577, 15, 1111, 0.07765061237807334], [3.910098960375536, 9.149492917796042, 15, 595, 0.0578880335477326], [1.9316617166338, 9.947672708515833, 15, 622, 0.04593128062345713], [1.7483743359184158, 7.889285553006351, 15, 1312, 0.055995999192898216], [4.065317289420663, 10.609394332695938, 15, 1373, 0.07225120286383502], [1.854547925680226, 8.4326086678781, 15, 1047, 0.0460037783206682], [1.2242579883171292, 7.0, 15, 1400, 0.02], [6.0, 7.0, 15, 500, 0.02], [6.0, 7.0, 15, 1400, 0.050904706312099354], [1.5649712864485075, 10.910117869797343, 15, 1335, 0.020419210471721606], [1.0527469168446504, 7.033490978645894, 15, 1096, 0.09852857573369399], [1.3849113763175727, 7.022494676155118, 15, 1204, 0.03876743697995229], [1.0321614150176648, 7.025076542395048, 15, 685, 0.04668937399319178], [4.995513201507972, 7.0231290984006485, 15, 1363, 0.020904967106607088], [5.923595821950591, 7.023833944475605, 15, 1377, 0.04399793882681281], [1.0, 7.0, 15, 1400, 0.041626409426470064], [6.0, 7.0, 15, 1400, 0.04179760479557918], [1.2075473972455428, 7.0041673832974, 15, 533, 0.022457596472013047], [6.0, 7.0, 15, 1400, 0.043679476593803446], [5.846300551391977, 7.024308712899505, 15, 596, 0.05715912119593171], [5.826187095539673, 7.017863043379697, 15, 625, 0.020117799585750468], [1.0755175352391069, 7.002877925048904, 15, 788, 0.06053822230960029], [5.925378261653524, 7.00560641392663, 15, 502, 0.040138615183225014], [5.40094306847542, 7.023872983289131, 15, 1375, 0.0692913552041665], [1.1272966796135455, 7.0467285689810275, 15, 891, 0.02088492488492989], [1.4425768051712948, 7.011067487013064, 15, 1399, 0.06021334798616142], [1.3050489902815223, 7.095123201946348, 15, 1372, 0.020195351394105093], [5.441056417382201, 10.63193215432717, 15, 1370, 0.02036996219608187], [1.0188596355434634, 7.018298537837781, 15, 1210, 0.09961153311818377], [1.1098441976794202, 7.027775773271685, 15, 1326, 0.0564907957698203], [1.0, 7.0, 15, 1400, 0.041953135735988925], [5.718911683898272, 7.030256257045417, 15, 525, 0.06993048086011754], [5.990873279848988, 7.10003419387221, 15, 1269, 0.020399261895323085], [1.0692386473169304, 7.0178249014029745, 15, 549, 0.04314328838463593], [5.888752946404437, 7.1430877996134745, 15, 1342, 0.020048114153754543], [1.2813937233978154, 7.052581378045952, 15, 506, 0.042061453340868575], [1.5669481502424052, 7.007770820171585, 15, 561, 0.02084989984798777], [6.0, 7.0, 15, 1400, 0.041694133504300734], [1.0, 7.0, 15, 1400, 0.0416377183591978], [3.2831971852859345, 10.994361121142287, 15, 1355, 0.09996534348848092], [6.0, 7.0, 15, 1400, 0.04219159633229412], [1.2448310528579207, 7.023490173601066, 15, 1352, 0.062331523057235966], [5.901383257196336, 7.004187254968376, 15, 519, 0.044276729492768056], [1.0, 7.0, 15, 1400, 0.04193347117294874], [5.088824429981701, 7.018944492078276, 15, 1361, 0.020750893068219485], [1.0, 7.0, 15, 1400, 0.04187079024309674], [1.0, 7.0, 15, 1400, 0.041905839203312666], [6.0, 7.0, 15, 1400, 0.04238898237152174], [1.0, 7.0, 15, 1400, 0.04192402386214614], [6.0, 7.0, 15, 1400, 0.04242236905162748], [5.823129981394824, 7.021303494409494, 15, 1376, 0.06473023454335056], [4.087035346031511, 7.000528578985445, 15, 503, 0.020018978665387533], [1.0, 7.0, 15, 1400, 0.042630856782826], [1.888689056224027, 10.873744771391138, 15, 1294, 0.020191205809079085], [5.864600841057313, 7.08321397502033, 15, 1307, 0.020169273399064026], [6.0, 7.0, 15, 1400, 0.04271406736449824], [5.205492215282373, 7.009319766629201, 15, 1378, 0.07426751966723331], [1.0, 7.0, 15, 1400, 0.04239143360093943], [1.4062058509634725, 7.032083278085317, 15, 1361, 0.020340798230305417], [1.4533383739222097, 7.015432992757666, 15, 530, 0.06592877430051716], [6.0, 7.0, 15, 1400, 0.042335302400075644], [2.543430596385564, 7.026070615857426, 15, 512, 0.020167858360653927], [5.704907830204427, 7.01144254292281, 15, 1356, 0.020211837161262212], [6.0, 7.0, 15, 1400, 0.04249702367491414], [1.0, 7.0, 15, 1400, 0.04234115788280805], [5.760845861559143, 7.062551337355794, 15, 564, 0.09943134925096889], [5.945270922270973, 7.114793850835595, 15, 509, 0.048016115759324796], [5.9493803541762205, 7.09397767702531, 15, 1391, 0.06705911742052013], [1.0516106089682284, 7.01312070462564, 15, 1389, 0.020283681200442584], [1.215368828579608, 7.0706544148594785, 15, 517, 0.04121186002464357], [6.0, 7.0, 15, 1400, 0.04210489044869584], [5.672135774711995, 10.836364818296186, 15, 522, 0.021730865857726683], [6.0, 7.0, 15, 1400, 0.042103390526281856], [1.7254448446580581, 7.004091748328099, 15, 1371, 0.020778352785343745], [1.3661993212407373, 7.04315136742665, 15, 569, 0.06631755814015555], [1.6025488386582545, 7.0184216094184295, 15, 1316, 0.06999106421899201], [1.8382862922041696, 7.0153530950547776, 15, 1395, 0.07317430230904554], [5.952707064460486, 7.176767331247465, 15, 507, 0.04828512851614682], [1.0, 7.0, 15, 1400, 0.04217057194856494], [1.0, 7.0, 15, 1400, 0.04219128906809297], [1.4074948594399874, 7.034714754428749, 15, 525, 0.021635626488306123], [5.71793006842791, 7.058034805090351, 15, 505, 0.04385897752569658], [1.0, 7.0, 15, 1400, 0.04237772170703981], [5.5351493676630525, 7.036452368291694, 15, 1350, 0.02014888892192139], [5.648307980813961, 7.007464137719704, 15, 1381, 0.02256131118690563], [6.0, 7.0, 15, 1400, 0.04237331455157367], [5.610895193326647, 7.0415932245793496, 15, 1389, 0.021918891918181513], [1.0, 7.0, 15, 1400, 0.04220820364445615], [5.540982920145119, 7.038372206434373, 15, 506, 0.06681801467019911], [1.0107756237856578, 7.076360210010609, 15, 1378, 0.06813337837524486], [1.0, 7.0, 15, 1400, 0.042113271089740265], [6.0, 7.0, 15, 1400, 0.042422086591553346], [5.281698655231296, 7.003322209572982, 15, 1387, 0.09964337094025208], [1.0, 7.0, 15, 1400, 0.04223652082854656], [5.434762575938571, 10.947129557568374, 15, 1377, 0.02126750222202096], [1.1510776979329427, 7.0644574672786336, 15, 689, 0.020808657315570498], [5.925068647658883, 7.0457192903687895, 15, 532, 0.051362525502684775], [6.0, 7.0, 15, 1400, 0.04220757898080672], [1.6527808180458945, 7.042792707430765, 15, 571, 0.02013804778993543], [1.0, 7.0, 15, 1400, 0.04210078850435818], [1.0, 7.0, 15, 1400, 0.042117684782567756], [1.6109891830340959, 7.0267805255881255, 15, 1313, 0.020004953412101838], [1.0, 7.0, 15, 1400, 0.04212526007838689], [1.0178978235099476, 7.104661741582006, 15, 528, 0.02040976142955751], [1.0060988573039333, 7.151833607235736, 15, 1384, 0.02060930975439794], [5.979142444186048, 7.079301325744681, 15, 501, 0.04173621845780439], [1.0550698496571478, 7.024859998629298, 15, 524, 0.06688350285913829], [1.0, 7.0, 15, 1400, 0.04214739341483281], [1.0, 7.0, 15, 1400, 0.042165564048451266], [5.9489247294471586, 7.040936461229807, 15, 1265, 0.07115941978065014], [1.0, 7.0, 15, 1400, 0.04236861393021789], [5.5736514536311565, 10.991831442720011, 15, 1394, 0.050084189214284494], [5.523335233804516, 7.0136987429843085, 15, 506, 0.03457156736301611], [1.0536059846246684, 7.001358032351738, 15, 562, 0.099821356694815], [1.0, 7.0, 15, 1400, 0.04255315283289665], [5.620075513496697, 7.102031870921465, 15, 1395, 0.022121372912736217], [1.0, 7.0, 15, 1400, 0.042480345922099406], [5.92811828675435, 7.05306129535695, 15, 1358, 0.07562775830599239], [1.0, 7.0, 15, 1400, 0.042461983528263525], [5.723052033262685, 7.032788834745571, 15, 1302, 0.021000232431597654], [5.869564678705477, 7.044569106890728, 15, 519, 0.03270220682191131], [1.1876137621636798, 7.03150429521416, 15, 1378, 0.06804013971135169], [1.0, 7.0, 15, 1400, 0.042517204640700225], [5.92425968530814, 7.22219665649496, 15, 1399, 0.02121803086835797], [1.1909196325960545, 7.006950475082026, 15, 518, 0.05630142741870714], [1.0, 7.0, 15, 1400, 0.042343858922068725], [1.0, 7.0, 15, 1400, 0.0423275171010188], [3.835668892898937, 10.966195791773632, 15, 1373, 0.02018395043418069], [5.1155461135274924, 7.024051338815093, 15, 1399, 0.07279074651655924], [1.0, 7.0, 15, 1400, 0.04234438422685509], [6.0, 7.0, 15, 1400, 0.042505848786486534], [5.820277332423793, 7.011939637949731, 15, 1347, 0.06704421336383165], [5.600151279363777, 10.876156031109645, 15, 531, 0.0998291770814577], [4.1216182491940625, 7.041064461427905, 15, 1392, 0.02047725525697503], [6.0, 7.0, 15, 1400, 0.042438266250861834], [1.421601461490272, 7.02387244227361, 15, 1388, 0.02179517892988579], [1.0, 7.0, 15, 1400, 0.04238155374864323], [6.0, 7.0, 15, 1400, 0.04242098070467659], [1.0, 7.0, 15, 1400, 0.04238768921741306], [6.0, 7.0, 15, 1400, 0.04242696865618971], [5.219496006492276, 7.094090841759177, 15, 1392, 0.02013136735474884], [1.0, 7.0, 15, 1400, 0.04232369445408009], [6.0, 7.0, 15, 1400, 0.042425047279322045], [1.0, 7.0, 15, 1400, 0.042330227589813724], [5.769645702452419, 7.0050064924690485, 15, 552, 0.020959340571448222], [6.0, 7.0, 15, 1400, 0.04244476343418513], [1.0, 7.0, 15, 1400, 0.042283141829741536], [1.0, 7.0, 15, 1400, 0.042290185811686434], [5.94075835112183, 7.039390083015276, 15, 524, 0.03795226896537815], [1.2843763104901775, 10.875449572988902, 15, 1393, 0.05085446975794908], [6.0, 7.0, 15, 1400, 0.04257135775671457], [1.6052877525759217, 7.005567396881989, 15, 520, 0.06626864980407873], [1.0, 7.0, 15, 1400, 0.0422849117270585], [1.102717644926692, 7.194061746547396, 15, 501, 0.02176319526127114], [5.456204843629548, 7.062564744353493, 15, 1384, 0.07165272740289658], [6.0, 7.0, 15, 1400, 0.04260023335116376], [1.00836052295075, 7.132584729300215, 15, 511, 0.06575177651849734], [1.3695715998576516, 10.928321048535693, 15, 1389, 0.020256315195230235], [1.598323949743127, 7.050267098382691, 15, 504, 0.0218173715343291], [1.0416858478208126, 7.026837920692142, 15, 544, 0.06311116552849275], [5.918736827018737, 7.03936879181778, 15, 1360, 0.07725538052466761], [5.443441188521088, 7.060718945605028, 15, 1390, 0.09968955776326527], [1.0, 7.0, 15, 1400, 0.04274760575997198], [6.0, 7.0, 15, 1400, 0.04281018722796254], [5.533736935891684, 7.067844790347442, 15, 1316, 0.02048468383124086], [1.0, 7.0, 15, 1400, 0.042656557438398864], [6.0, 7.0, 15, 1400, 0.04279023449532727], [1.0, 7.0, 15, 1400, 0.042657008628494794], [5.861198609873786, 7.047376169458273, 15, 549, 0.03611764856765672], [6.0, 7.0, 15, 1400, 0.04294977430059048], [1.0, 7.0, 15, 1400, 0.04274482995595049], [5.558312305204054, 7.01940747110491, 15, 1374, 0.02265255912458833], [1.0, 7.0, 15, 1400, 0.042716002062488406], [1.0, 7.0, 15, 1400, 0.04272012315090698], [5.9534407761856585, 7.013415383259635, 15, 1386, 0.021287769423349756], [6.0, 7.0, 15, 1400, 0.04302649997923903], [1.0, 7.0, 15, 1400, 0.042663245776421554], [5.4737589331738326, 7.003810693890566, 15, 543, 0.0673090167709778], [6.0, 7.0, 15, 1400, 0.04303691370648286], [1.0, 7.0, 15, 1400, 0.04277152447692818], [6.0, 7.0, 15, 1400, 0.04303316026566853], [1.0, 7.0, 15, 1400, 0.04276485893317492], [1.898003907288813, 7.017061032214016, 15, 525, 0.020044764424322493], [6.0, 7.0, 15, 1400, 0.04303488655315592], [5.2385496914963365, 7.025065743652759, 15, 1390, 0.020680842745157565], [6.0, 7.0, 15, 1400, 0.04304523523172206], [1.3796081503280364, 7.030261776257934, 15, 1376, 0.07054663290633745], [1.0, 7.0, 15, 1400, 0.04274598836684628], [1.0, 7.0, 15, 1400, 0.04275214993422213], [6.0, 7.0, 15, 1400, 0.043122479631583374], [1.0, 7.0, 15, 1400, 0.04275664934080661], [5.48480400365193, 7.033280076332065, 15, 505, 0.03459863227465383], [1.0, 7.0, 15, 1400, 0.04307157375916967], [1.0, 7.0, 15, 1400, 0.043052640301971826], [5.5679676145582375, 7.076708208259434, 15, 1376, 0.020111578178629408], [1.3932532312628674, 7.051393226659838, 15, 1307, 0.02063139694787509], [1.0, 7.0, 15, 1400, 0.042967550080469076], [1.2281434388055292, 7.110601098115407, 15, 518, 0.020982652279923526], [6.0, 7.0, 15, 1400, 0.04340101103938428], [1.3323285070698645, 7.15226174839833, 15, 1345, 0.020158707413727397], [1.0, 7.0, 15, 1400, 0.0430430918159186], [6.0, 7.0, 15, 1400, 0.04334155024258722], [1.0580044018460202, 10.975270624408953, 15, 501, 0.039735350670060406], [1.0, 7.0, 15, 1400, 0.04294771822966911], [1.0, 7.0, 15, 1400, 0.04293998231119637], [5.876166664890101, 7.022712951039867, 15, 1369, 0.07235510228915196], [5.960931329102874, 7.055727323512536, 15, 516, 0.03918733959927528], [5.752871891454404, 7.001534251003956, 15, 513, 0.058954274287295536], [1.0800483036720356, 7.031687467209249, 15, 1376, 0.022097797417457512], [1.057897047858267, 7.062577467644893, 15, 1384, 0.07721754529807921], [2.5237163569347816, 10.9968675479751, 15, 524, 0.02024497956301449], [5.11485041931175, 7.039231612610252, 15, 1366, 0.09957818439670653], [1.4745124077503728, 7.027971910552251, 15, 509, 0.05486369222462252], [5.9140393056660665, 7.068838710579577, 15, 506, 0.03627283294645944], [5.6147130274684365, 10.986045120525628, 15, 1343, 0.06246958746583153], [1.530326051847509, 7.041052297903246, 15, 514, 0.07191564762244855], [1.0, 7.0, 15, 1400, 0.04282653808737351], [4.418641398263474, 7.008163809388325, 15, 534, 0.020469201793404616], [1.0, 7.0, 15, 1400, 0.0428232822097933], [5.083247509000152, 7.08183995273836, 15, 1394, 0.020401191760896165], [1.0, 7.0, 15, 1400, 0.04278242108445936], [5.963945006778651, 7.03322350457453, 15, 506, 0.03654133218979687], [1.0, 7.0, 15, 1400, 0.04300567199728042], [1.0400397644610984, 7.038250245376302, 15, 508, 0.05827821637258193], [5.994226150323637, 7.053807518594697, 15, 1357, 0.06711095594406868], [1.011581952029568, 7.035700942361674, 15, 1334, 0.07121933079035717], [1.0, 7.0, 15, 1400, 0.043036003889860064], [5.622358048025827, 7.020009272402923, 15, 1315, 0.02012496746155623], [1.6735657178295842, 7.03471588628456, 15, 532, 0.09912544994900344], [1.1729221300093304, 7.007015832092802, 15, 579, 0.020152749318144193], [1.0, 7.0, 15, 1400, 0.042853229293074314], [1.0, 7.0, 15, 1400, 0.04285829052625275], [1.0, 7.0, 15, 1400, 0.04286264170999303], [1.0436218053897393, 7.005724286947987, 15, 1384, 0.06919757905237373], [1.0, 7.0, 15, 1400, 0.04280906335585011], [1.3940229968689708, 10.979246975120425, 15, 554, 0.09949026724370155], [1.0, 7.0, 15, 1400, 0.04277880926022113], [1.2355656380720506, 7.021535142441249, 15, 1387, 0.022241048936551808], [1.0, 7.0, 15, 1400, 0.04286798460215483], [1.0, 7.0, 15, 1400, 0.04286520135163311], [1.0, 7.0, 15, 1400, 0.04286992511202463], [1.0, 7.0, 15, 1400, 0.042876295568135055], [6.0, 7.0, 15, 1400, 0.04323125646855196], [1.0, 7.0, 15, 1400, 0.042869385598078895], [6.0, 7.0, 15, 1400, 0.04325954481901494], [3.02783700665645, 10.849602645674086, 15, 1397, 0.020676137526649478], [1.2208186579766447, 7.007524370603949, 15, 529, 0.02245243694381447], [6.0, 7.0, 15, 1400, 0.04325746107380796], [1.0, 7.0, 15, 1400, 0.04299934814253527], [1.3841723995001756, 7.078954206142523, 15, 1324, 0.02064827767724884], [1.0469834103188234, 7.033013844014731, 15, 1368, 0.06832335796432225], [1.0, 7.0, 15, 1400, 0.042972625600881414], [1.0, 7.0, 15, 1400, 0.04295468775007519], [5.809341130029782, 7.019622572859716, 15, 1352, 0.06924882933407651], [5.682652752160242, 7.0119701087397575, 15, 559, 0.069783431506976], [1.2303465700982794, 7.011665315283012, 15, 1290, 0.020525157626506134], [6.0, 7.0, 15, 1400, 0.04333056704549013], [6.0, 7.0, 15, 1400, 0.04330494319189247], [1.0571043721921378, 7.020593465387285, 15, 1299, 0.02047943124056082], [1.0, 7.0, 15, 1400, 0.043204339022987065], [5.654089372366851, 7.011121137226077, 15, 510, 0.051698028254985526], [1.0, 7.0, 15, 1400, 0.04306723951022232], [1.0, 7.0, 15, 1400, 0.04306085821303282], [5.05179081859324, 10.99990254757122, 15, 1392, 0.04807231757820741], [1.0, 7.0, 15, 1400, 0.04300407584842501], [1.0, 7.0, 15, 1400, 0.04301613513334181], [1.018286046229617, 8.145880828753024, 15, 1400, 0.020136189678981883], [1.0, 7.0, 15, 1400, 0.0427208715395474], [1.0, 7.0, 15, 1400, 0.04272069354421478], [1.0, 7.0, 15, 1400, 0.04272875265388856], [1.0, 7.0, 15, 1400, 0.04273012070254544], [5.968414306987542, 7.017676660188476, 15, 505, 0.06175098889171758], [3.6759135978592585, 7.0298696592253105, 15, 514, 0.020322386484914884], [5.954738936877795, 7.028801566855681, 15, 1360, 0.020070726696465098], [5.931279344774813, 7.039302911095127, 15, 1362, 0.060332320515566654], [1.3131065709213476, 7.009517924568972, 15, 540, 0.07612410732156782], [6.0, 7.0, 15, 1400, 0.04283790779580232], [1.183299588035114, 7.04652244244234, 15, 536, 0.020314690457787325], [5.602746115581427, 10.78265213704368, 15, 1380, 0.02000485503485706], [1.0, 7.0, 15, 1400, 0.04295934155730494], [1.0, 7.0, 15, 1400, 0.042965558193531025], [5.65710014069965, 7.080449645131898, 15, 528, 0.020133678483234777], [6.0, 7.0, 15, 1400, 0.04283386709981335], [1.0, 7.0, 15, 1400, 0.042945505146852504], [5.934634650637216, 9.097842830638266, 15, 1377, 0.03504515022567051], [5.443490118696897, 7.021422174668731, 15, 1365, 0.020393951431420882], [6.0, 7.0, 15, 1400, 0.04266207356765267], [6.0, 7.0, 15, 1400, 0.0426577192684269], [1.0, 7.0, 15, 1400, 0.04249975133598273], [6.0, 7.0, 15, 1400, 0.04266315947379348], [5.2146195999095895, 7.152174595459276, 15, 1399, 0.09970267230380943], [6.0, 7.0, 15, 1400, 0.04272749441224595], [1.0, 7.0, 15, 1400, 0.04265754145816897], [1.0, 7.0, 15, 1400, 0.042637321869987824], [1.0, 7.0, 15, 1400, 0.04265480211592751], [5.85404101872205, 7.011641394222632, 15, 1390, 0.0697314120105756], [6.0, 7.0, 15, 1400, 0.04263312812931337], [1.0, 7.0, 15, 1400, 0.04268015524116148], [1.0, 7.0, 15, 1400, 0.04268340850170952], [6.0, 7.0, 15, 1400, 0.04263853016242633], [1.0, 7.0, 15, 1400, 0.042685219397432604], [1.0, 7.0, 15, 1400, 0.042687698048985326], [1.0556776683312898, 7.089683936879094, 15, 1395, 0.07912330678249345], [5.736520663803038, 7.014948519334029, 15, 518, 0.0357850157550734], [1.0, 7.0, 15, 1400, 0.0427623643671174], [1.0, 7.0, 15, 1400, 0.042762616750317874], [6.0, 7.0, 15, 1400, 0.04286837901007235], [2.1654259092579236, 7.038307494903272, 15, 1388, 0.020295776661241174], [1.0, 7.0, 15, 1400, 0.0427795111199675], [6.0, 7.0, 15, 1400, 0.042842791322435306], [1.0, 7.0, 15, 1400, 0.042794773364096386], [6.0, 7.0, 15, 1400, 0.04283626585676112], [1.0, 7.0, 15, 1400, 0.042754459545125245], [1.0, 7.0, 15, 1400, 0.04275110374063021], [6.0, 7.0, 15, 1400, 0.042849204175999855], [1.0, 7.0, 15, 1400, 0.04274828591610111], [1.0, 7.0, 15, 1400, 0.04275551398137322], [6.0, 7.0, 15, 1400, 0.04286673608685432], [1.0, 7.0, 15, 1400, 0.042759115280349674], [5.977149236733112, 7.053506312321002, 15, 1291, 0.021002470066329017], [1.4264689058695514, 10.986486596788385, 15, 1381, 0.06902015577720814], [6.0, 7.0, 15, 1400, 0.042636720144247124], [6.0, 7.0, 15, 1400, 0.04263591493437939], [6.0, 7.0, 15, 1400, 0.042635612329672126], [5.756977326608724, 8.970666914890664, 15, 1386, 0.03122504919332925], [1.3413411893945102, 8.470541934906889, 15, 1389, 0.020235139673727965], [1.0, 7.0, 15, 1400, 0.041428156036507145], [1.0, 7.0, 15, 1400, 0.04147227467757601], [6.0, 7.0, 15, 1400, 0.04225378525482612], [6.0, 7.0, 15, 1400, 0.04225675470859999], [1.0, 7.0, 15, 1400, 0.04153509932022029], [6.0, 7.0, 15, 1400, 0.04228734573633644], [1.0, 7.0, 15, 1400, 0.04153612614896497], [6.0, 7.0, 15, 1400, 0.042309557503686805], [1.0231984961325804, 8.775634759834045, 15, 1318, 0.020209212679639172], [1.0, 7.0, 15, 1400, 0.041310711327973246], [1.0, 7.0, 15, 1400, 0.04135591357854336], [1.0, 7.0, 15, 1400, 0.04141252086030368], [5.896865368558301, 8.557995752438556, 15, 1385, 0.031100811716620956], [6.0, 7.0, 15, 1400, 0.042102896174515], [1.0, 7.0, 15, 1400, 0.041233646671317535], [1.032305049461195, 8.91087668462566, 15, 534, 0.0351822462534699], [1.0, 7.0, 15, 1400, 0.04104360512605208], [1.0, 7.0, 15, 1400, 0.04108584027142875], [1.0, 7.0, 15, 1400, 0.04111599495853424], [6.0, 7.0, 15, 1400, 0.04189387599754939]]
