--nn_model: NeuMF
--is_tag: "1"
--eval_recall: "1"
--topk: "3"
--big_tag: "0"
--epochs: "300"
--lr: "0.00001"
--num_factors: "94"
--early_stopping: "45"
--layers: "[512,96]"
--reg_layers: "[0,0]"
--test_dataset: "1"
--mf_pretrain: "Pretrain/_GMF_94_[64,32,16,8]_1568411865.h5"
--mlp_pretrain: "Pretrain/_MLP_8_[512,96]_1568498541.h5"

# Launched by terminal.
# NeuMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[512,96]', learner='adam', lr=1e-05, mf_pretrain='Pretrain/_GMF_94_[64,32,16,8]_1568411865.h5', mlp_pretrain='Pretrain/_MLP_8_[512,96]_1568498541.h5', nn_model='NeuMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_NeuMF_94_[512,96]_1568629824.h5
--weights_path: Pretrain/_NeuMF_94_[512,96]_1568629824.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# Load pretrained GMF (Pretrain/_GMF_94_[64,32,16,8]_1568411865.h5) and MLP (Pretrain/_MLP_8_[512,96]_1568498541.h5) models done. 
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# mlp_embedding_user (Embedding)  (None, 1, 256)       5120000     user_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_3 (Flatten)             (None, 256)          0           mlp_embedding_user[0][0]         
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# mlp_embedding_item (Embedding)  (None, 1, 256)       512000      item_input[0][0]                 
# __________________________________________________________________________________________________
# mf_embedding_user (Embedding)   (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# mf_embedding_item (Embedding)   (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1256)         0           flatten_3[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# flatten_4 (Flatten)             (None, 256)          0           mlp_embedding_item[0][0]         
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           mf_embedding_user[0][0]          
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           mf_embedding_item[0][0]          
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 1512)         0           concatenate_1[0][0]              
#                                                                  flatten_4[0][0]                  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# layer1 (Dense)                  (None, 96)           145248      concatenate_2[0][0]              
# __________________________________________________________________________________________________
# concatenate_3 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  layer1[0][0]                     
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_3[0][0]              
# ==================================================================================================
# Total params: 7,845,439
# Trainable params: 7,845,439
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.3965, Jaccard score = 0.3076
# Iteration 0 fit: [31.2 s]: Recall = 0.3960, Jaccard score = 0.3072, loss = 0.000602, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 1 fit: [30.6 s]: Recall = 0.3949, Jaccard score = 0.3060, loss = 0.000464, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 2 fit: [30.4 s]: Recall = 0.3947, Jaccard score = 0.3058, loss = 0.000450, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 3 fit: [30.6 s]: Recall = 0.3956, Jaccard score = 0.3067, loss = 0.000502, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 4 fit: [30.4 s]: Recall = 0.3918, Jaccard score = 0.3029, loss = 0.000439, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 5 fit: [30.5 s]: Recall = 0.3936, Jaccard score = 0.3047, loss = 0.000481, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 6 fit: [30.5 s]: Recall = 0.3923, Jaccard score = 0.3034, loss = 0.000465, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 7 fit: [30.6 s]: Recall = 0.3933, Jaccard score = 0.3044, loss = 0.000458, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 8 fit: [30.5 s]: Recall = 0.3976, Jaccard score = 0.3088, loss = 0.000364, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 9 fit: [30.6 s]: Recall = 0.3959, Jaccard score = 0.3071, loss = 0.000466, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 10 fit: [30.6 s]: Recall = 0.3956, Jaccard score = 0.3067, loss = 0.000385, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 11 fit: [30.5 s]: Recall = 0.3911, Jaccard score = 0.3022, loss = 0.000385, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 12 fit: [30.6 s]: Recall = 0.3965, Jaccard score = 0.3076, loss = 0.000421, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 13 fit: [30.5 s]: Recall = 0.3958, Jaccard score = 0.3069, loss = 0.000438, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 14 fit: [30.5 s]: Recall = 0.3966, Jaccard score = 0.3077, loss = 0.000413, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 15 fit: [30.5 s]: Recall = 0.3923, Jaccard score = 0.3034, loss = 0.000378, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 16 fit: [30.6 s]: Recall = 0.3901, Jaccard score = 0.3012, loss = 0.000385, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 17 fit: [30.5 s]: Recall = 0.3942, Jaccard score = 0.3053, loss = 0.000396, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 18 fit: [30.6 s]: Recall = 0.3936, Jaccard score = 0.3047, loss = 0.000438, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 19 fit: [30.4 s]: Recall = 0.3940, Jaccard score = 0.3051, loss = 0.000398, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 20 fit: [30.6 s]: Recall = 0.3911, Jaccard score = 0.3022, loss = 0.000340, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 21 fit: [30.4 s]: Recall = 0.3954, Jaccard score = 0.3065, loss = 0.000386, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 22 fit: [30.5 s]: Recall = 0.3940, Jaccard score = 0.3051, loss = 0.000360, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 23 fit: [30.6 s]: Recall = 0.3942, Jaccard score = 0.3053, loss = 0.000363, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 24 fit: [30.4 s]: Recall = 0.3949, Jaccard score = 0.3060, loss = 0.000355, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 25 fit: [30.5 s]: Recall = 0.3935, Jaccard score = 0.3046, loss = 0.000376, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 26 fit: [30.4 s]: Recall = 0.3942, Jaccard score = 0.3053, loss = 0.000359, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 27 fit: [30.5 s]: Recall = 0.3914, Jaccard score = 0.3024, loss = 0.000342, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 28 fit: [30.4 s]: Recall = 0.3903, Jaccard score = 0.3014, loss = 0.000332, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 29 fit: [30.6 s]: Recall = 0.3925, Jaccard score = 0.3036, loss = 0.000348, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 30 fit: [30.4 s]: Recall = 0.3974, Jaccard score = 0.3086, loss = 0.000333, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 31 fit: [30.5 s]: Recall = 0.3924, Jaccard score = 0.3035, loss = 0.000357, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 32 fit: [30.4 s]: Recall = 0.3944, Jaccard score = 0.3055, loss = 0.000348, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 33 fit: [30.6 s]: Recall = 0.3968, Jaccard score = 0.3080, loss = 0.000300, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 34 fit: [30.4 s]: Recall = 0.3923, Jaccard score = 0.3034, loss = 0.000280, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 35 fit: [30.6 s]: Recall = 0.3975, Jaccard score = 0.3087, loss = 0.000329, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 36 fit: [30.4 s]: Recall = 0.3943, Jaccard score = 0.3054, loss = 0.000298, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 37 fit: [30.4 s]: Recall = 0.3922, Jaccard score = 0.3032, loss = 0.000307, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 38 fit: [30.6 s]: Recall = 0.3946, Jaccard score = 0.3057, loss = 0.000338, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 39 fit: [30.5 s]: Recall = 0.3905, Jaccard score = 0.3015, loss = 0.000321, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 40 fit: [30.5 s]: Recall = 0.3908, Jaccard score = 0.3019, loss = 0.000251, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 41 fit: [30.7 s]: Recall = 0.3919, Jaccard score = 0.3030, loss = 0.000338, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 42 fit: [30.5 s]: Recall = 0.3944, Jaccard score = 0.3055, loss = 0.000373, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 43 fit: [30.5 s]: Recall = 0.3941, Jaccard score = 0.3052, loss = 0.000350, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 44 fit: [30.7 s]: Recall = 0.3940, Jaccard score = 0.3051, loss = 0.000291, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 45 fit: [30.5 s]: Recall = 0.3978, Jaccard score = 0.3089, loss = 0.000351, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 46 fit: [30.4 s]: Recall = 0.3901, Jaccard score = 0.3012, loss = 0.000337, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 47 fit: [30.5 s]: Recall = 0.3915, Jaccard score = 0.3026, loss = 0.000365, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 48 fit: [30.6 s]: Recall = 0.3949, Jaccard score = 0.3060, loss = 0.000308, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 49 fit: [30.5 s]: Recall = 0.3954, Jaccard score = 0.3065, loss = 0.000346, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 50 fit: [30.4 s]: Recall = 0.3979, Jaccard score = 0.3090, loss = 0.000356, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 51 fit: [30.7 s]: Recall = 0.3935, Jaccard score = 0.3046, loss = 0.000277, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 52 fit: [30.5 s]: Recall = 0.3895, Jaccard score = 0.3006, loss = 0.000294, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 53 fit: [30.5 s]: Recall = 0.3951, Jaccard score = 0.3062, loss = 0.000286, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 54 fit: [30.6 s]: Recall = 0.3946, Jaccard score = 0.3057, loss = 0.000290, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 55 fit: [30.4 s]: Recall = 0.3966, Jaccard score = 0.3077, loss = 0.000281, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 56 fit: [30.5 s]: Recall = 0.3930, Jaccard score = 0.3040, loss = 0.000299, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 57 fit: [30.6 s]: Recall = 0.3879, Jaccard score = 0.2990, loss = 0.000279, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 58 fit: [30.6 s]: Recall = 0.3932, Jaccard score = 0.3043, loss = 0.000343, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 59 fit: [30.5 s]: Recall = 0.3909, Jaccard score = 0.3020, loss = 0.000248, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 60 fit: [30.6 s]: Recall = 0.3920, Jaccard score = 0.3031, loss = 0.000322, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 61 fit: [30.5 s]: Recall = 0.3942, Jaccard score = 0.3053, loss = 0.000297, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 62 fit: [30.5 s]: Recall = 0.3930, Jaccard score = 0.3040, loss = 0.000268, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 63 fit: [30.5 s]: Recall = 0.3950, Jaccard score = 0.3061, loss = 0.000306, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 64 fit: [30.6 s]: Recall = 0.3956, Jaccard score = 0.3067, loss = 0.000296, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 65 fit: [30.4 s]: Recall = 0.3941, Jaccard score = 0.3052, loss = 0.000320, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 66 fit: [30.5 s]: Recall = 0.3924, Jaccard score = 0.3035, loss = 0.000290, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 67 fit: [30.5 s]: Recall = 0.3987, Jaccard score = 0.3098, loss = 0.000339, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 68 fit: [30.4 s]: Recall = 0.3916, Jaccard score = 0.3027, loss = 0.000279, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 69 fit: [30.5 s]: Recall = 0.3934, Jaccard score = 0.3045, loss = 0.000287, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 70 fit: [30.5 s]: Recall = 0.3911, Jaccard score = 0.3022, loss = 0.000273, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 71 fit: [30.6 s]: Recall = 0.3966, Jaccard score = 0.3077, loss = 0.000283, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 72 fit: [30.4 s]: Recall = 0.3940, Jaccard score = 0.3051, loss = 0.000257, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 73 fit: [30.5 s]: Recall = 0.3907, Jaccard score = 0.3017, loss = 0.000260, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 74 fit: [30.5 s]: Recall = 0.3943, Jaccard score = 0.3054, loss = 0.000264, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 75 fit: [30.5 s]: Recall = 0.3962, Jaccard score = 0.3073, loss = 0.000300, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 76 fit: [30.5 s]: Recall = 0.3912, Jaccard score = 0.3023, loss = 0.000265, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 77 fit: [30.5 s]: Recall = 0.3954, Jaccard score = 0.3065, loss = 0.000273, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 78 fit: [30.5 s]: Recall = 0.3907, Jaccard score = 0.3017, loss = 0.000286, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 79 fit: [30.5 s]: Recall = 0.3900, Jaccard score = 0.3011, loss = 0.000269, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 80 fit: [30.5 s]: Recall = 0.3922, Jaccard score = 0.3032, loss = 0.000251, gradient norm = 1.0000, eval: [7.8 s]
# Iteration 81 fit: [30.4 s]: Recall = 0.3943, Jaccard score = 0.3054, loss = 0.000246, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 82 fit: [30.6 s]: Recall = 0.3970, Jaccard score = 0.3081, loss = 0.000324, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 83 fit: [30.6 s]: Recall = 0.3982, Jaccard score = 0.3094, loss = 0.000255, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 84 fit: [30.4 s]: Recall = 0.3912, Jaccard score = 0.3023, loss = 0.000258, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 85 fit: [30.7 s]: Recall = 0.3949, Jaccard score = 0.3060, loss = 0.000288, gradient norm = 1.0000, eval: [7.7 s]
# Iteration 86 fit: [30.5 s]: Recall = 0.3919, Jaccard score = 0.3030, loss = 0.000285, gradient norm = 1.0000, eval: [7.9 s]
# Iteration 87 fit: [30.6 s]: Recall = 0.3948, Jaccard score = 0.3059, loss = 0.000277, gradient norm = 1.0000, eval: [7.8 s]
# Model test performed 
# Recall score: 0.18544967641151527     Jaccard score: 0.1249624060150376