--nn_model: GMF
--is_tag: "1"
--eval_recall: "1"
--topk: "3"
--big_tag: "0"
--epochs: "300"
--num_factors: "94"
--early_stopping: "145"
--test_dataset: "1"


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566465223.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566465223.h5
# Load data done [2.0 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 512)          2048        user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 606)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# final_dense_layer (Dense)       (None, 96)           58272       concatenate_2[0][0]              
# __________________________________________________________________________________________________
# final_dense_layer_bn (BatchNorm (None, 96)           384         final_dense_layer[0][0]          
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           final_dense_layer_bn[0][0]       
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          leaky_re_lu_2[0][0]              
# ==================================================================================================
# Total params: 2,689,441
# Trainable params: 2,688,225
# Non-trainable params: 1,216
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0291, Jaccard score = 0.0176
# Iteration 0 fit: [23.7 s]: Recall = 0.2454, Jaccard score = 0.1704, loss = 0.4185, eval: [8.7 s]
# Iteration 1 fit: [22.7 s]: Recall = 0.2650, Jaccard score = 0.1866, loss = 0.3800, eval: [8.7 s]
# Iteration 2 fit: [22.7 s]: Recall = 0.2756, Jaccard score = 0.1955, loss = 0.3599, eval: [8.6 s]
# Iteration 3 fit: [22.6 s]: Recall = 0.2746, Jaccard score = 0.1947, loss = 0.3439, eval: [8.6 s]
# Iteration 4 fit: [22.8 s]: Recall = 0.2769, Jaccard score = 0.1966, loss = 0.3283, eval: [8.6 s]
# Iteration 5 fit: [22.7 s]: Recall = 0.2714, Jaccard score = 0.1920, loss = 0.3132, eval: [8.6 s]
# Iteration 6 fit: [22.6 s]: Recall = 0.2699, Jaccard score = 0.1907, loss = 0.2960, eval: [8.6 s]
# Iteration 7 fit: [22.7 s]: Recall = 0.2703, Jaccard score = 0.1910, loss = 0.2782, eval: [8.6 s]
# Iteration 8 fit: [22.6 s]: Recall = 0.2635, Jaccard score = 0.1853, loss = 0.2592, eval: [8.6 s]
# Iteration 9 fit: [22.7 s]: Recall = 0.2488, Jaccard score = 0.1732, loss = 0.2402, eval: [8.6 s]
# Iteration 10 fit: [22.6 s]: Recall = 0.2501, Jaccard score = 0.1742, loss = 0.2216, eval: [8.6 s]
# Iteration 11 fit: [22.6 s]: Recall = 0.2439, Jaccard score = 0.1692, loss = 0.2030, eval: [8.6 s]
# Iteration 12 fit: [22.6 s]: Recall = 0.2393, Jaccard score = 0.1655, loss = 0.1845, eval: [8.6 s]
# Iteration 13 fit: [22.7 s]: Recall = 0.2327, Jaccard score = 0.1602, loss = 0.1691, eval: [8.6 s]
# Iteration 14 fit: [22.6 s]: Recall = 0.2297, Jaccard score = 0.1578, loss = 0.1531, eval: [8.6 s]
# Iteration 15 fit: [22.7 s]: Recall = 0.2314, Jaccard score = 0.1592, loss = 0.1388, eval: [8.6 s]
# Iteration 16 fit: [22.7 s]: Recall = 0.2255, Jaccard score = 0.1545, loss = 0.1267, eval: [8.6 s]
# Iteration 17 fit: [22.7 s]: Recall = 0.2290, Jaccard score = 0.1573, loss = 0.1151, eval: [8.7 s]
# Iteration 18 fit: [22.7 s]: Recall = 0.2260, Jaccard score = 0.1548, loss = 0.1053, eval: [8.6 s]
# Iteration 19 fit: [22.7 s]: Recall = 0.2186, Jaccard score = 0.1491, loss = 0.0961, eval: [8.6 s]
# Iteration 20 fit: [22.6 s]: Recall = 0.2214, Jaccard score = 0.1512, loss = 0.0886, eval: [8.6 s]
# Iteration 21 fit: [22.6 s]: Recall = 0.2236, Jaccard score = 0.1529, loss = 0.0817, eval: [8.6 s]
# Iteration 22 fit: [22.7 s]: Recall = 0.2218, Jaccard score = 0.1516, loss = 0.0755, eval: [8.6 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566466253.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566466253.h5
# Load data done [2.1 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_1[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 512)          2048        user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 606)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# final_dense_layer (Dense)       (None, 96)           58272       concatenate_2[0][0]              
# __________________________________________________________________________________________________
# final_dense_layer_bn (BatchNorm (None, 96)           384         final_dense_layer[0][0]          
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           final_dense_layer_bn[0][0]       
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          leaky_re_lu_2[0][0]              
# ==================================================================================================
# Total params: 2,689,441
# Trainable params: 2,688,225
# Non-trainable params: 1,216
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0280, Jaccard score = 0.0169
# Iteration 0 fit: [23.5 s]: Recall = 0.0427, Jaccard score = 0.0260, loss = 0.5074, eval: [8.4 s]
# Iteration 1 fit: [22.8 s]: Recall = 0.1594, Jaccard score = 0.1044, loss = 0.4739, eval: [8.5 s]
# Iteration 2 fit: [22.2 s]: Recall = 0.1684, Jaccard score = 0.1110, loss = 0.4256, eval: [8.5 s]
# Iteration 3 fit: [25.0 s]: Recall = 0.1672, Jaccard score = 0.1102, loss = 0.4033, eval: [8.4 s]
# Iteration 4 fit: [22.2 s]: Recall = 0.1693, Jaccard score = 0.1117, loss = 0.3832, eval: [8.5 s]
# Iteration 5 fit: [22.2 s]: Recall = 0.1652, Jaccard score = 0.1087, loss = 0.3605, eval: [8.6 s]
# Iteration 6 fit: [22.6 s]: Recall = 0.1608, Jaccard score = 0.1055, loss = 0.3357, eval: [8.5 s]
# Iteration 7 fit: [22.2 s]: Recall = 0.1518, Jaccard score = 0.0990, loss = 0.3086, eval: [8.5 s]
# Iteration 8 fit: [22.7 s]: Recall = 0.1463, Jaccard score = 0.0951, loss = 0.2807, eval: [8.6 s]
# Iteration 9 fit: [22.2 s]: Recall = 0.1411, Jaccard score = 0.0914, loss = 0.2534, eval: [8.5 s]
# Iteration 10 fit: [22.2 s]: Recall = 0.1390, Jaccard score = 0.0899, loss = 0.2283, eval: [8.6 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566466617.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566466617.h5
# Load data done [1.8 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566466645.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566466645.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 512)          2048        user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 606)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            607         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,631,295
# Trainable params: 2,630,271
# Non-trainable params: 1,024
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0275, Jaccard score = 0.0166
# Iteration 0 fit: [20.0 s]: Recall = 0.2314, Jaccard score = 0.1592, loss = 0.4240, eval: [8.0 s]
# Iteration 1 fit: [19.6 s]: Recall = 0.2553, Jaccard score = 0.1785, loss = 0.3873, eval: [8.0 s]
# Iteration 2 fit: [19.4 s]: Recall = 0.2671, Jaccard score = 0.1883, loss = 0.3676, eval: [8.1 s]
# Iteration 3 fit: [19.4 s]: Recall = 0.2753, Jaccard score = 0.1952, loss = 0.3535, eval: [8.0 s]
# Iteration 4 fit: [19.4 s]: Recall = 0.2755, Jaccard score = 0.1954, loss = 0.3395, eval: [8.0 s]
# Iteration 5 fit: [19.5 s]: Recall = 0.2739, Jaccard score = 0.1941, loss = 0.3249, eval: [8.0 s]
# Iteration 6 fit: [19.4 s]: Recall = 0.2691, Jaccard score = 0.1900, loss = 0.3089, eval: [8.1 s]
# Iteration 7 fit: [19.5 s]: Recall = 0.2625, Jaccard score = 0.1845, loss = 0.2913, eval: [8.1 s]
# Iteration 8 fit: [19.5 s]: Recall = 0.2569, Jaccard score = 0.1798, loss = 0.2716, eval: [8.0 s]
# Iteration 9 fit: [19.4 s]: Recall = 0.2539, Jaccard score = 0.1774, loss = 0.2519, eval: [8.0 s]
# Iteration 10 fit: [19.5 s]: Recall = 0.2505, Jaccard score = 0.1746, loss = 0.2301, eval: [8.0 s]
# Iteration 11 fit: [19.4 s]: Recall = 0.2421, Jaccard score = 0.1677, loss = 0.2089, eval: [8.0 s]
# Iteration 12 fit: [19.5 s]: Recall = 0.2423, Jaccard score = 0.1679, loss = 0.1885, eval: [8.0 s]
# Iteration 13 fit: [19.4 s]: Recall = 0.2352, Jaccard score = 0.1622, loss = 0.1692, eval: [8.0 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566467763.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566467763.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 128)          140160      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 128)          512         user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 128)          0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 222)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            223         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,208,895
# Trainable params: 2,208,639
# Non-trainable params: 256
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0274, Jaccard score = 0.0165
# Iteration 0 fit: [19.0 s]: Recall = 0.2317, Jaccard score = 0.1594, loss = 0.4271, eval: [8.1 s]
# Iteration 1 fit: [17.8 s]: Recall = 0.2535, Jaccard score = 0.1770, loss = 0.3898, eval: [8.1 s]
# Iteration 2 fit: [18.2 s]: Recall = 0.2673, Jaccard score = 0.1885, loss = 0.3717, eval: [8.1 s]
# Iteration 3 fit: [17.8 s]: Recall = 0.2758, Jaccard score = 0.1956, loss = 0.3581, eval: [8.2 s]
# Iteration 4 fit: [18.1 s]: Recall = 0.2700, Jaccard score = 0.1908, loss = 0.3446, eval: [8.1 s]
# Iteration 5 fit: [18.0 s]: Recall = 0.2752, Jaccard score = 0.1951, loss = 0.3317, eval: [8.1 s]
# Iteration 6 fit: [17.7 s]: Recall = 0.2601, Jaccard score = 0.1825, loss = 0.3162, eval: [8.2 s]
# Iteration 7 fit: [18.2 s]: Recall = 0.2605, Jaccard score = 0.1828, loss = 0.2998, eval: [8.3 s]
# Iteration 8 fit: [17.7 s]: Recall = 0.2514, Jaccard score = 0.1753, loss = 0.2820, eval: [8.1 s]
# Iteration 9 fit: [18.3 s]: Recall = 0.2415, Jaccard score = 0.1672, loss = 0.2626, eval: [8.1 s]
# Iteration 10 fit: [17.7 s]: Recall = 0.2386, Jaccard score = 0.1649, loss = 0.2412, eval: [8.1 s]
# Iteration 11 fit: [17.8 s]: Recall = 0.2371, Jaccard score = 0.1637, loss = 0.2211, eval: [8.1 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566468137.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566468137.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 2)            2190        concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 2)            8           user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 2)            0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 96)           0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,070,295
# Trainable params: 2,070,291
# Non-trainable params: 4
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0272, Jaccard score = 0.0164
# Iteration 0 fit: [17.9 s]: Recall = 0.1600, Jaccard score = 0.1049, loss = 0.4669, eval: [8.1 s]
# Iteration 1 fit: [17.6 s]: Recall = 0.1788, Jaccard score = 0.1187, loss = 0.4211, eval: [8.1 s]
# Iteration 2 fit: [17.7 s]: Recall = 0.1764, Jaccard score = 0.1169, loss = 0.4171, eval: [8.1 s]
# Iteration 3 fit: [17.3 s]: Recall = 0.1859, Jaccard score = 0.1239, loss = 0.4118, eval: [8.1 s]
# Iteration 4 fit: [17.7 s]: Recall = 0.1801, Jaccard score = 0.1197, loss = 0.4046, eval: [8.1 s]
# Iteration 5 fit: [17.8 s]: Recall = 0.1760, Jaccard score = 0.1166, loss = 0.3943, eval: [8.1 s]
# Iteration 6 fit: [17.3 s]: Recall = 0.1703, Jaccard score = 0.1124, loss = 0.3806, eval: [8.1 s]
# Iteration 7 fit: [17.8 s]: Recall = 0.1646, Jaccard score = 0.1082, loss = 0.3637, eval: [8.3 s]
# Iteration 8 fit: [17.3 s]: Recall = 0.1580, Jaccard score = 0.1034, loss = 0.3435, eval: [8.1 s]
# Iteration 9 fit: [17.3 s]: Recall = 0.1484, Jaccard score = 0.0965, loss = 0.3217, eval: [8.2 s]
# Iteration 10 fit: [17.3 s]: Recall = 0.1452, Jaccard score = 0.0943, loss = 0.2977, eval: [8.2 s]
# Iteration 11 fit: [17.3 s]: Recall = 0.1470, Jaccard score = 0.0956, loss = 0.2732, eval: [8.1 s]
# Iteration 12 fit: [17.3 s]: Recall = 0.1467, Jaccard score = 0.0953, loss = 0.2479, eval: [8.1 s]
# Iteration 13 fit: [17.7 s]: Recall = 0.1372, Jaccard score = 0.0886, loss = 0.2235, eval: [8.1 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566468597.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566468597.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            95          multiply_1[0][0]                 
# ==================================================================================================
# Total params: 2,068,095
# Trainable params: 2,068,095
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0287, Jaccard score = 0.0173
# Iteration 0 fit: [15.4 s]: Recall = 0.0267, Jaccard score = 0.0161, loss = 0.5379, eval: [7.1 s]
# Iteration 1 fit: [15.4 s]: Recall = 0.0250, Jaccard score = 0.0151, loss = 0.5008, eval: [7.2 s]
# Iteration 2 fit: [14.8 s]: Recall = 0.0291, Jaccard score = 0.0176, loss = 0.4998, eval: [7.2 s]
# Iteration 3 fit: [14.9 s]: Recall = 0.0314, Jaccard score = 0.0190, loss = 0.4960, eval: [7.2 s]
# Iteration 4 fit: [15.2 s]: Recall = 0.0342, Jaccard score = 0.0207, loss = 0.4867, eval: [7.3 s]
# Iteration 5 fit: [14.8 s]: Recall = 0.0411, Jaccard score = 0.0250, loss = 0.4703, eval: [7.2 s]
# Iteration 6 fit: [15.0 s]: Recall = 0.0481, Jaccard score = 0.0294, loss = 0.4462, eval: [7.1 s]
# Iteration 7 fit: [14.8 s]: Recall = 0.0575, Jaccard score = 0.0353, loss = 0.4154, eval: [7.2 s]
# Iteration 8 fit: [15.4 s]: Recall = 0.0701, Jaccard score = 0.0434, loss = 0.3798, eval: [7.2 s]
# Iteration 9 fit: [15.3 s]: Recall = 0.0780, Jaccard score = 0.0485, loss = 0.3406, eval: [7.2 s]
# Iteration 10 fit: [15.1 s]: Recall = 0.0902, Jaccard score = 0.0566, loss = 0.3039, eval: [7.3 s]
# Iteration 11 fit: [14.9 s]: Recall = 0.0965, Jaccard score = 0.0608, loss = 0.2685, eval: [7.2 s]
# Iteration 12 fit: [15.3 s]: Recall = 0.1059, Jaccard score = 0.0670, loss = 0.2354, eval: [7.2 s]
# Iteration 13 fit: [15.0 s]: Recall = 0.1119, Jaccard score = 0.0711, loss = 0.2068, eval: [7.3 s]
# Iteration 14 fit: [14.8 s]: Recall = 0.1202, Jaccard score = 0.0768, loss = 0.1816, eval: [7.1 s]
# Iteration 15 fit: [15.2 s]: Recall = 0.1276, Jaccard score = 0.0819, loss = 0.1568, eval: [9.4 s]
# Iteration 16 fit: [16.5 s]: Recall = 0.1332, Jaccard score = 0.0858, loss = 0.1367, eval: [7.5 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566469016.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566469016.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 2)            2190        concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 2)            8           user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_dropou (None, 2)            0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 2)            0           user_feature_item_latent_dropout[
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 96)           0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,070,295
# Trainable params: 2,070,291
# Non-trainable params: 4
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0273, Jaccard score = 0.0165
# Iteration 0 fit: [18.1 s]: Recall = 0.1378, Jaccard score = 0.0890, loss = 0.5079, eval: [8.1 s]
# Iteration 1 fit: [17.5 s]: Recall = 0.1690, Jaccard score = 0.1114, loss = 0.4613, eval: [8.2 s]
# Iteration 2 fit: [17.5 s]: Recall = 0.1690, Jaccard score = 0.1114, loss = 0.4521, eval: [8.2 s]
# Iteration 3 fit: [17.5 s]: Recall = 0.1615, Jaccard score = 0.1060, loss = 0.4447, eval: [8.1 s]
# Iteration 4 fit: [17.5 s]: Recall = 0.1426, Jaccard score = 0.0924, loss = 0.4358, eval: [8.0 s]
# Iteration 5 fit: [17.5 s]: Recall = 0.1325, Jaccard score = 0.0853, loss = 0.4223, eval: [8.1 s]
# Iteration 6 fit: [17.5 s]: Recall = 0.1218, Jaccard score = 0.0779, loss = 0.4050, eval: [8.0 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566469320.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566469320.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 2)            2190        concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_dropou (None, 2)            0           user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 2)            0           user_feature_item_latent_dropout[
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 96)           0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,070,287
# Trainable params: 2,070,287
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0311, Jaccard score = 0.0188
# Iteration 0 fit: [16.6 s]: Recall = 0.1504, Jaccard score = 0.0980, loss = 0.4974, eval: [7.5 s]
# Iteration 1 fit: [16.1 s]: Recall = 0.1731, Jaccard score = 0.1144, loss = 0.4567, eval: [7.6 s]
# Iteration 2 fit: [16.1 s]: Recall = 0.1682, Jaccard score = 0.1108, loss = 0.4487, eval: [7.7 s]
# Iteration 3 fit: [16.1 s]: Recall = 0.1630, Jaccard score = 0.1071, loss = 0.4439, eval: [7.8 s]
# Iteration 4 fit: [16.1 s]: Recall = 0.1501, Jaccard score = 0.0978, loss = 0.4354, eval: [7.6 s]
# Iteration 5 fit: [16.1 s]: Recall = 0.1297, Jaccard score = 0.0833, loss = 0.4239, eval: [7.6 s]
# Iteration 6 fit: [16.1 s]: Recall = 0.1214, Jaccard score = 0.0776, loss = 0.4072, eval: [7.6 s]
# Iteration 7 fit: [16.1 s]: Recall = 0.1155, Jaccard score = 0.0736, loss = 0.3871, eval: [7.6 s]
# Iteration 8 fit: [16.1 s]: Recall = 0.1126, Jaccard score = 0.0716, loss = 0.3648, eval: [7.6 s]
# Iteration 9 fit: [16.1 s]: Recall = 0.1111, Jaccard score = 0.0706, loss = 0.3387, eval: [7.6 s]
# Iteration 10 fit: [16.1 s]: Recall = 0.1134, Jaccard score = 0.0722, loss = 0.3128, eval: [7.7 s]
# Iteration 11 fit: [16.1 s]: Recall = 0.1150, Jaccard score = 0.0733, loss = 0.2858, eval: [7.6 s]
# Iteration 12 fit: [16.1 s]: Recall = 0.1187, Jaccard score = 0.0758, loss = 0.2595, eval: [7.8 s]
# Iteration 13 fit: [16.1 s]: Recall = 0.1233, Jaccard score = 0.0789, loss = 0.2345, eval: [7.6 s]
# Iteration 14 fit: [16.1 s]: Recall = 0.1245, Jaccard score = 0.0798, loss = 0.2104, eval: [7.8 s]
# Iteration 15 fit: [16.1 s]: Recall = 0.1271, Jaccard score = 0.0816, loss = 0.1871, eval: [7.6 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566470011.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566470011.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 2)            2190        concatenate_1[0][0]              
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 2)            0           user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 96)           0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,070,287
# Trainable params: 2,068,097
# Non-trainable params: 2,190
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0286, Jaccard score = 0.0172
# Iteration 0 fit: [15.9 s]: Recall = 0.1525, Jaccard score = 0.0995, loss = 0.4901, eval: [7.6 s]
# Iteration 1 fit: [15.6 s]: Recall = 0.1671, Jaccard score = 0.1101, loss = 0.4269, eval: [7.5 s]
# Iteration 2 fit: [16.0 s]: Recall = 0.1706, Jaccard score = 0.1126, loss = 0.4225, eval: [7.6 s]
# Iteration 3 fit: [16.0 s]: Recall = 0.1696, Jaccard score = 0.1119, loss = 0.4196, eval: [7.6 s]
# Iteration 4 fit: [15.6 s]: Recall = 0.1596, Jaccard score = 0.1046, loss = 0.4132, eval: [7.5 s]
# Iteration 5 fit: [16.1 s]: Recall = 0.1501, Jaccard score = 0.0978, loss = 0.4040, eval: [7.5 s]
# Iteration 6 fit: [15.5 s]: Recall = 0.1428, Jaccard score = 0.0926, loss = 0.3902, eval: [7.5 s]
# Iteration 7 fit: [16.1 s]: Recall = 0.1355, Jaccard score = 0.0874, loss = 0.3733, eval: [7.5 s]
# Iteration 8 fit: [16.3 s]: Recall = 0.1318, Jaccard score = 0.0849, loss = 0.3532, eval: [7.5 s]
# Iteration 9 fit: [15.8 s]: Recall = 0.1283, Jaccard score = 0.0824, loss = 0.3302, eval: [7.5 s]
# Iteration 10 fit: [15.5 s]: Recall = 0.1242, Jaccard score = 0.0795, loss = 0.3063, eval: [7.6 s]
# Iteration 11 fit: [16.0 s]: Recall = 0.1289, Jaccard score = 0.0828, loss = 0.2811, eval: [7.6 s]
# Iteration 12 fit: [15.5 s]: Recall = 0.1276, Jaccard score = 0.0819, loss = 0.2556, eval: [7.4 s]
# Iteration 13 fit: [16.0 s]: Recall = 0.1301, Jaccard score = 0.0837, loss = 0.2313, eval: [7.4 s]
# Iteration 14 fit: [15.5 s]: Recall = 0.1308, Jaccard score = 0.0841, loss = 0.2078, eval: [7.6 s]
# Iteration 15 fit: [16.0 s]: Recall = 0.1363, Jaccard score = 0.0880, loss = 0.1857, eval: [7.6 s]
# Iteration 16 fit: [15.5 s]: Recall = 0.1370, Jaccard score = 0.0885, loss = 0.1645, eval: [7.5 s]
# Iteration 17 fit: [16.0 s]: Recall = 0.1389, Jaccard score = 0.0898, loss = 0.1456, eval: [7.6 s]
# Iteration 18 fit: [15.5 s]: Recall = 0.1408, Jaccard score = 0.0912, loss = 0.1283, eval: [7.6 s]
# Iteration 19 fit: [15.5 s]: Recall = 0.1432, Jaccard score = 0.0929, loss = 0.1136, eval: [7.6 s]
# Iteration 20 fit: [15.5 s]: Recall = 0.1506, Jaccard score = 0.0981, loss = 0.0998, eval: [7.5 s]
# Iteration 21 fit: [15.6 s]: Recall = 0.1560, Jaccard score = 0.1020, loss = 0.0882, eval: [7.6 s]
# Iteration 22 fit: [15.5 s]: Recall = 0.1581, Jaccard score = 0.1035, loss = 0.0765, eval: [7.6 s]
# Iteration 23 fit: [16.0 s]: Recall = 0.1626, Jaccard score = 0.1067, loss = 0.0681, eval: [7.6 s]
# Iteration 24 fit: [15.5 s]: Recall = 0.1661, Jaccard score = 0.1093, loss = 0.0598, eval: [7.5 s]
# Iteration 25 fit: [16.0 s]: Recall = 0.1667, Jaccard score = 0.1097, loss = 0.0524, eval: [7.6 s]
# Iteration 26 fit: [15.6 s]: Recall = 0.1728, Jaccard score = 0.1143, loss = 0.0474, eval: [7.6 s]
# Iteration 27 fit: [16.0 s]: Recall = 0.1827, Jaccard score = 0.1216, loss = 0.0417, eval: [7.4 s]
# Iteration 28 fit: [15.5 s]: Recall = 0.1843, Jaccard score = 0.1227, loss = 0.0368, eval: [7.5 s]
# Iteration 29 fit: [16.0 s]: Recall = 0.1870, Jaccard score = 0.1248, loss = 0.0336, eval: [7.6 s]
# Iteration 30 fit: [15.6 s]: Recall = 0.1933, Jaccard score = 0.1295, loss = 0.0298, eval: [7.5 s]
# Iteration 31 fit: [16.0 s]: Recall = 0.1973, Jaccard score = 0.1326, loss = 0.0270, eval: [7.6 s]
# Iteration 32 fit: [15.6 s]: Recall = 0.2034, Jaccard score = 0.1373, loss = 0.0247, eval: [7.6 s]
# Iteration 33 fit: [16.0 s]: Recall = 0.2094, Jaccard score = 0.1419, loss = 0.0220, eval: [7.6 s]
# Iteration 34 fit: [15.6 s]: Recall = 0.2126, Jaccard score = 0.1443, loss = 0.0205, eval: [7.6 s]
# Iteration 35 fit: [16.0 s]: Recall = 0.2137, Jaccard score = 0.1452, loss = 0.0183, eval: [7.6 s]
# Iteration 36 fit: [15.5 s]: Recall = 0.2190, Jaccard score = 0.1493, loss = 0.0171, eval: [7.5 s]
# Iteration 37 fit: [16.0 s]: Recall = 0.2197, Jaccard score = 0.1499, loss = 0.0158, eval: [7.6 s]
# Iteration 38 fit: [15.5 s]: Recall = 0.2249, Jaccard score = 0.1540, loss = 0.0143, eval: [7.5 s]
# Iteration 39 fit: [16.0 s]: Recall = 0.2284, Jaccard score = 0.1567, loss = 0.0135, eval: [7.4 s]
# Iteration 40 fit: [15.5 s]: Recall = 0.2310, Jaccard score = 0.1588, loss = 0.0131, eval: [7.5 s]
# Iteration 41 fit: [16.0 s]: Recall = 0.2332, Jaccard score = 0.1605, loss = 0.0121, eval: [7.5 s]
# Iteration 42 fit: [15.6 s]: Recall = 0.2310, Jaccard score = 0.1588, loss = 0.0111, eval: [7.6 s]
# Iteration 43 fit: [16.0 s]: Recall = 0.2366, Jaccard score = 0.1633, loss = 0.0104, eval: [7.6 s]
# Iteration 44 fit: [15.5 s]: Recall = 0.2408, Jaccard score = 0.1667, loss = 0.0101, eval: [7.6 s]
# Iteration 45 fit: [16.0 s]: Recall = 0.2432, Jaccard score = 0.1686, loss = 0.0090, eval: [7.6 s]
# Iteration 46 fit: [15.6 s]: Recall = 0.2421, Jaccard score = 0.1677, loss = 0.0089, eval: [7.5 s]
# Iteration 47 fit: [16.0 s]: Recall = 0.2425, Jaccard score = 0.1681, loss = 0.0087, eval: [7.6 s]
# Iteration 48 fit: [15.5 s]: Recall = 0.2470, Jaccard score = 0.1717, loss = 0.0079, eval: [7.6 s]
# Iteration 49 fit: [16.0 s]: Recall = 0.2501, Jaccard score = 0.1742, loss = 0.0078, eval: [7.6 s]
# Iteration 50 fit: [15.5 s]: Recall = 0.2498, Jaccard score = 0.1740, loss = 0.0074, eval: [7.5 s]
# Iteration 51 fit: [16.0 s]: Recall = 0.2525, Jaccard score = 0.1762, loss = 0.0069, eval: [7.6 s]
# Iteration 52 fit: [15.6 s]: Recall = 0.2537, Jaccard score = 0.1772, loss = 0.0070, eval: [7.6 s]
# Iteration 53 fit: [16.0 s]: Recall = 0.2533, Jaccard score = 0.1768, loss = 0.0067, eval: [7.5 s]
# Iteration 54 fit: [15.6 s]: Recall = 0.2581, Jaccard score = 0.1808, loss = 0.0061, eval: [7.6 s]
# Iteration 55 fit: [16.0 s]: Recall = 0.2567, Jaccard score = 0.1797, loss = 0.0060, eval: [7.6 s]
# Iteration 56 fit: [15.5 s]: Recall = 0.2584, Jaccard score = 0.1811, loss = 0.0057, eval: [7.6 s]
# Iteration 57 fit: [16.0 s]: Recall = 0.2605, Jaccard score = 0.1828, loss = 0.0058, eval: [7.6 s]
# Iteration 58 fit: [15.5 s]: Recall = 0.2656, Jaccard score = 0.1871, loss = 0.0054, eval: [7.6 s]
# Iteration 59 fit: [16.0 s]: Recall = 0.2639, Jaccard score = 0.1856, loss = 0.0052, eval: [7.6 s]
# Iteration 60 fit: [15.6 s]: Recall = 0.2688, Jaccard score = 0.1897, loss = 0.0051, eval: [7.6 s]
# Iteration 61 fit: [16.0 s]: Recall = 0.2692, Jaccard score = 0.1901, loss = 0.0047, eval: [7.6 s]
# Iteration 62 fit: [15.6 s]: Recall = 0.2707, Jaccard score = 0.1914, loss = 0.0048, eval: [7.6 s]
# Iteration 63 fit: [16.0 s]: Recall = 0.2682, Jaccard score = 0.1893, loss = 0.0045, eval: [7.6 s]
# Iteration 64 fit: [15.6 s]: Recall = 0.2708, Jaccard score = 0.1915, loss = 0.0045, eval: [7.6 s]
# Iteration 65 fit: [16.0 s]: Recall = 0.2746, Jaccard score = 0.1947, loss = 0.0043, eval: [7.6 s]
# Iteration 66 fit: [15.6 s]: Recall = 0.2770, Jaccard score = 0.1967, loss = 0.0042, eval: [7.6 s]
# Iteration 67 fit: [16.8 s]: Recall = 0.2762, Jaccard score = 0.1960, loss = 0.0042, eval: [7.6 s]
# Iteration 68 fit: [15.5 s]: Recall = 0.2803, Jaccard score = 0.1995, loss = 0.0041, eval: [7.5 s]
# Iteration 69 fit: [16.0 s]: Recall = 0.2783, Jaccard score = 0.1978, loss = 0.0040, eval: [7.6 s]
# Iteration 70 fit: [15.5 s]: Recall = 0.2832, Jaccard score = 0.2020, loss = 0.0037, eval: [7.5 s]
# Iteration 71 fit: [16.0 s]: Recall = 0.2831, Jaccard score = 0.2019, loss = 0.0039, eval: [7.6 s]
# Iteration 72 fit: [15.6 s]: Recall = 0.2848, Jaccard score = 0.2033, loss = 0.0039, eval: [7.6 s]
# Iteration 73 fit: [16.0 s]: Recall = 0.2890, Jaccard score = 0.2070, loss = 0.0036, eval: [7.6 s]
# Iteration 74 fit: [15.5 s]: Recall = 0.2897, Jaccard score = 0.2076, loss = 0.0034, eval: [7.5 s]
# Iteration 75 fit: [16.0 s]: Recall = 0.2888, Jaccard score = 0.2068, loss = 0.0035, eval: [7.6 s]
# Iteration 76 fit: [15.5 s]: Recall = 0.2910, Jaccard score = 0.2087, loss = 0.0035, eval: [7.6 s]
# Iteration 77 fit: [16.0 s]: Recall = 0.2927, Jaccard score = 0.2101, loss = 0.0032, eval: [7.6 s]
# Iteration 78 fit: [15.6 s]: Recall = 0.2904, Jaccard score = 0.2082, loss = 0.0033, eval: [7.5 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566474071.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566474071.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 2)            2190        concatenate_1[0][0]              
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 2)            0           user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 96)           0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,070,287
# Trainable params: 2,070,287
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0264, Jaccard score = 0.0159
# Iteration 0 fit: [16.5 s]: Recall = 0.1751, Jaccard score = 0.1160, loss = 0.4560, eval: [7.6 s]
# Iteration 1 fit: [16.4 s]: Recall = 0.1739, Jaccard score = 0.1150, loss = 0.4192, eval: [7.6 s]
# Iteration 2 fit: [16.2 s]: Recall = 0.1781, Jaccard score = 0.1182, loss = 0.4165, eval: [7.6 s]
# Iteration 3 fit: [16.4 s]: Recall = 0.1783, Jaccard score = 0.1183, loss = 0.4123, eval: [7.6 s]
# Iteration 4 fit: [16.2 s]: Recall = 0.1741, Jaccard score = 0.1152, loss = 0.4059, eval: [7.6 s]
# Iteration 5 fit: [16.4 s]: Recall = 0.1700, Jaccard score = 0.1122, loss = 0.3965, eval: [7.6 s]
# Iteration 6 fit: [16.4 s]: Recall = 0.1583, Jaccard score = 0.1037, loss = 0.3837, eval: [7.6 s]
# Iteration 7 fit: [16.4 s]: Recall = 0.1470, Jaccard score = 0.0956, loss = 0.3666, eval: [7.6 s]
# Iteration 8 fit: [16.2 s]: Recall = 0.1413, Jaccard score = 0.0915, loss = 0.3470, eval: [7.6 s]
# Iteration 9 fit: [16.4 s]: Recall = 0.1364, Jaccard score = 0.0881, loss = 0.3243, eval: [7.6 s]
# Iteration 10 fit: [16.3 s]: Recall = 0.1315, Jaccard score = 0.0846, loss = 0.3001, eval: [7.6 s]
# Iteration 11 fit: [16.4 s]: Recall = 0.1337, Jaccard score = 0.0861, loss = 0.2753, eval: [7.6 s]
# Iteration 12 fit: [16.4 s]: Recall = 0.1285, Jaccard score = 0.0825, loss = 0.2491, eval: [7.6 s]
# Iteration 13 fit: [16.4 s]: Recall = 0.1300, Jaccard score = 0.0836, loss = 0.2255, eval: [7.6 s]
# Iteration 14 fit: [16.4 s]: Recall = 0.1314, Jaccard score = 0.0845, loss = 0.2015, eval: [7.6 s]
# Iteration 15 fit: [16.4 s]: Recall = 0.1337, Jaccard score = 0.0861, loss = 0.1791, eval: [7.6 s]
# Iteration 16 fit: [17.0 s]: Recall = 0.1370, Jaccard score = 0.0885, loss = 0.1592, eval: [7.6 s]
# Iteration 17 fit: [16.4 s]: Recall = 0.1357, Jaccard score = 0.0876, loss = 0.1406, eval: [7.6 s]
# Iteration 18 fit: [16.3 s]: Recall = 0.1426, Jaccard score = 0.0924, loss = 0.1236, eval: [7.6 s]
# Iteration 19 fit: [16.2 s]: Recall = 0.1437, Jaccard score = 0.0932, loss = 0.1085, eval: [7.6 s]
# Iteration 20 fit: [16.4 s]: Recall = 0.1471, Jaccard score = 0.0956, loss = 0.0956, eval: [7.6 s]
# Iteration 21 fit: [16.4 s]: Recall = 0.1511, Jaccard score = 0.0985, loss = 0.0835, eval: [7.6 s]
# Iteration 22 fit: [16.3 s]: Recall = 0.1557, Jaccard score = 0.1018, loss = 0.0735, eval: [7.6 s]
# Iteration 23 fit: [16.4 s]: Recall = 0.1606, Jaccard score = 0.1053, loss = 0.0645, eval: [7.6 s]
# Iteration 24 fit: [16.9 s]: Recall = 0.1612, Jaccard score = 0.1057, loss = 0.0565, eval: [7.6 s]
# Iteration 25 fit: [16.3 s]: Recall = 0.1688, Jaccard score = 0.1113, loss = 0.0502, eval: [7.6 s]
# Iteration 26 fit: [16.4 s]: Recall = 0.1703, Jaccard score = 0.1124, loss = 0.0444, eval: [7.6 s]
# Iteration 27 fit: [16.3 s]: Recall = 0.1769, Jaccard score = 0.1173, loss = 0.0398, eval: [7.6 s]
# Iteration 28 fit: [16.4 s]: Recall = 0.1785, Jaccard score = 0.1185, loss = 0.0348, eval: [7.6 s]
# Iteration 29 fit: [16.8 s]: Recall = 0.1838, Jaccard score = 0.1224, loss = 0.0314, eval: [7.7 s]
# Iteration 30 fit: [16.4 s]: Recall = 0.1865, Jaccard score = 0.1245, loss = 0.0285, eval: [8.8 s]
# Iteration 31 fit: [18.9 s]: Recall = 0.1947, Jaccard score = 0.1306, loss = 0.0252, eval: [8.0 s]
# Iteration 32 fit: [18.4 s]: Recall = 0.1949, Jaccard score = 0.1307, loss = 0.0229, eval: [7.6 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566474956.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566474956.h5
# Load data done [2.1 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 96)           105120      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 96)           384         user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          leaky_re_lu_1[0][0]              
# ==================================================================================================
# Total params: 293,601
# Trainable params: 293,409
# Non-trainable params: 192
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0274, Jaccard score = 0.0165
# Iteration 0 fit: [14.1 s]: Recall = 0.2244, Jaccard score = 0.1536, loss = 0.4268, eval: [8.0 s]
# Iteration 1 fit: [13.6 s]: Recall = 0.2559, Jaccard score = 0.1790, loss = 0.3920, eval: [8.1 s]
# Iteration 2 fit: [13.6 s]: Recall = 0.2631, Jaccard score = 0.1850, loss = 0.3746, eval: [8.1 s]
# Iteration 3 fit: [13.7 s]: Recall = 0.2758, Jaccard score = 0.1956, loss = 0.3631, eval: [8.1 s]
# Iteration 4 fit: [13.6 s]: Recall = 0.2796, Jaccard score = 0.1989, loss = 0.3540, eval: [8.1 s]
# Iteration 5 fit: [13.7 s]: Recall = 0.2891, Jaccard score = 0.2071, loss = 0.3470, eval: [8.1 s]
# Iteration 6 fit: [13.6 s]: Recall = 0.2856, Jaccard score = 0.2040, loss = 0.3412, eval: [8.1 s]
# Iteration 7 fit: [13.6 s]: Recall = 0.2898, Jaccard score = 0.2077, loss = 0.3363, eval: [8.1 s]
# Iteration 8 fit: [13.6 s]: Recall = 0.2876, Jaccard score = 0.2058, loss = 0.3324, eval: [8.1 s]
# Iteration 9 fit: [13.6 s]: Recall = 0.2879, Jaccard score = 0.2060, loss = 0.3281, eval: [8.1 s]
# Iteration 10 fit: [13.6 s]: Recall = 0.2923, Jaccard score = 0.2098, loss = 0.3242, eval: [8.1 s]
# Iteration 11 fit: [13.6 s]: Recall = 0.2912, Jaccard score = 0.2088, loss = 0.3202, eval: [8.1 s]
# Iteration 12 fit: [15.3 s]: Recall = 0.2904, Jaccard score = 0.2082, loss = 0.3170, eval: [9.5 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=45, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566475262.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566475262.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 96)           105120      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 96)           384         user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,173,695
# Trainable params: 2,173,503
# Non-trainable params: 192
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0246, Jaccard score = 0.0148
# Iteration 0 fit: [18.2 s]: Recall = 0.2289, Jaccard score = 0.1572, loss = 0.4292, eval: [8.2 s]
# Iteration 1 fit: [17.7 s]: Recall = 0.2505, Jaccard score = 0.1746, loss = 0.3918, eval: [8.2 s]
# Iteration 2 fit: [17.7 s]: Recall = 0.2680, Jaccard score = 0.1891, loss = 0.3737, eval: [8.3 s]
# Iteration 3 fit: [17.7 s]: Recall = 0.2683, Jaccard score = 0.1894, loss = 0.3605, eval: [8.2 s]
# Iteration 4 fit: [17.6 s]: Recall = 0.2710, Jaccard score = 0.1916, loss = 0.3477, eval: [8.1 s]
# Iteration 5 fit: [17.6 s]: Recall = 0.2686, Jaccard score = 0.1896, loss = 0.3356, eval: [8.1 s]
# Iteration 6 fit: [17.7 s]: Recall = 0.2659, Jaccard score = 0.1873, loss = 0.3214, eval: [8.2 s]
# Iteration 7 fit: [17.7 s]: Recall = 0.2621, Jaccard score = 0.1841, loss = 0.3054, eval: [8.2 s]
# Iteration 8 fit: [17.6 s]: Recall = 0.2471, Jaccard score = 0.1718, loss = 0.2879, eval: [8.2 s]
# Iteration 9 fit: [17.7 s]: Recall = 0.2463, Jaccard score = 0.1711, loss = 0.2695, eval: [8.2 s]
# Iteration 10 fit: [17.7 s]: Recall = 0.2402, Jaccard score = 0.1662, loss = 0.2488, eval: [8.1 s]
# Iteration 11 fit: [17.9 s]: Recall = 0.2344, Jaccard score = 0.1615, loss = 0.2287, eval: [8.2 s]
# Iteration 12 fit: [17.6 s]: Recall = 0.2234, Jaccard score = 0.1528, loss = 0.2075, eval: [8.2 s]
# Iteration 13 fit: [17.6 s]: Recall = 0.2258, Jaccard score = 0.1547, loss = 0.1878, eval: [8.1 s]
# Iteration 14 fit: [17.6 s]: Recall = 0.2242, Jaccard score = 0.1535, loss = 0.1680, eval: [8.1 s]
# Iteration 15 fit: [17.6 s]: Recall = 0.2221, Jaccard score = 0.1518, loss = 0.1501, eval: [8.2 s]
# Iteration 16 fit: [17.6 s]: Recall = 0.2158, Jaccard score = 0.1468, loss = 0.1335, eval: [8.1 s]
# Iteration 17 fit: [17.6 s]: Recall = 0.2140, Jaccard score = 0.1454, loss = 0.1179, eval: [8.1 s]
# Iteration 18 fit: [17.7 s]: Recall = 0.2156, Jaccard score = 0.1467, loss = 0.1044, eval: [8.2 s]
# Iteration 19 fit: [17.6 s]: Recall = 0.2201, Jaccard score = 0.1502, loss = 0.0921, eval: [8.1 s]
# Iteration 20 fit: [17.6 s]: Recall = 0.2200, Jaccard score = 0.1501, loss = 0.0809, eval: [8.2 s]
# Iteration 21 fit: [17.6 s]: Recall = 0.2182, Jaccard score = 0.1487, loss = 0.0714, eval: [8.1 s]
# Iteration 22 fit: [17.6 s]: Recall = 0.2213, Jaccard score = 0.1511, loss = 0.0639, eval: [8.1 s]
# Iteration 23 fit: [17.6 s]: Recall = 0.2167, Jaccard score = 0.1475, loss = 0.0567, eval: [8.2 s]
# Iteration 24 fit: [17.6 s]: Recall = 0.2262, Jaccard score = 0.1550, loss = 0.0506, eval: [8.1 s]
# Iteration 25 fit: [17.6 s]: Recall = 0.2252, Jaccard score = 0.1542, loss = 0.0454, eval: [8.1 s]
# Iteration 26 fit: [17.6 s]: Recall = 0.2268, Jaccard score = 0.1555, loss = 0.0403, eval: [8.1 s]
# Iteration 27 fit: [17.6 s]: Recall = 0.2244, Jaccard score = 0.1536, loss = 0.0370, eval: [8.1 s]
# Iteration 28 fit: [17.6 s]: Recall = 0.2313, Jaccard score = 0.1591, loss = 0.0336, eval: [8.1 s]
# Iteration 29 fit: [17.6 s]: Recall = 0.2313, Jaccard score = 0.1591, loss = 0.0307, eval: [8.1 s]
# Iteration 30 fit: [17.6 s]: Recall = 0.2338, Jaccard score = 0.1611, loss = 0.0285, eval: [8.2 s]
# Iteration 31 fit: [17.8 s]: Recall = 0.2337, Jaccard score = 0.1610, loss = 0.0253, eval: [8.1 s]
# Iteration 32 fit: [17.6 s]: Recall = 0.2338, Jaccard score = 0.1611, loss = 0.0235, eval: [8.1 s]
# Iteration 33 fit: [17.9 s]: Recall = 0.2371, Jaccard score = 0.1637, loss = 0.0214, eval: [8.2 s]
# Iteration 34 fit: [17.7 s]: Recall = 0.2435, Jaccard score = 0.1689, loss = 0.0211, eval: [8.2 s]
# Iteration 35 fit: [17.6 s]: Recall = 0.2363, Jaccard score = 0.1631, loss = 0.0184, eval: [8.1 s]
# Iteration 36 fit: [17.6 s]: Recall = 0.2403, Jaccard score = 0.1663, loss = 0.0176, eval: [8.2 s]
# Iteration 37 fit: [17.6 s]: Recall = 0.2413, Jaccard score = 0.1671, loss = 0.0163, eval: [8.0 s]
# Iteration 38 fit: [17.6 s]: Recall = 0.2449, Jaccard score = 0.1700, loss = 0.0160, eval: [8.2 s]
# Iteration 39 fit: [17.9 s]: Recall = 0.2466, Jaccard score = 0.1714, loss = 0.0144, eval: [8.1 s]
# Iteration 40 fit: [17.7 s]: Recall = 0.2442, Jaccard score = 0.1695, loss = 0.0138, eval: [8.1 s]
# Iteration 41 fit: [17.6 s]: Recall = 0.2496, Jaccard score = 0.1738, loss = 0.0124, eval: [8.2 s]
# Iteration 42 fit: [17.6 s]: Recall = 0.2442, Jaccard score = 0.1695, loss = 0.0124, eval: [8.1 s]
# Iteration 43 fit: [17.6 s]: Recall = 0.2512, Jaccard score = 0.1751, loss = 0.0112, eval: [8.1 s]
# Iteration 44 fit: [17.8 s]: Recall = 0.2514, Jaccard score = 0.1753, loss = 0.0107, eval: [8.1 s]
# Iteration 45 fit: [17.6 s]: Recall = 0.2535, Jaccard score = 0.1770, loss = 0.0104, eval: [8.1 s]
# Iteration 46 fit: [17.6 s]: Recall = 0.2541, Jaccard score = 0.1775, loss = 0.0099, eval: [8.2 s]
# Iteration 47 fit: [17.6 s]: Recall = 0.2542, Jaccard score = 0.1776, loss = 0.0094, eval: [8.2 s]
# Iteration 48 fit: [17.6 s]: Recall = 0.2562, Jaccard score = 0.1793, loss = 0.0088, eval: [8.1 s]
# Iteration 49 fit: [17.6 s]: Recall = 0.2545, Jaccard score = 0.1779, loss = 0.0087, eval: [8.2 s]
# End. Best Iteration 4:  Recall = 0.2710, Jaccard score = 0.1916. 
# The best NeuMF model has been saved to Pretrain/_GMF_94_[64,32,16,8]_1566475262.h5
# Model test performed 
# Recall score: 0.07230528899799152     Jaccard score: 0.045270364677937686

# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566478042.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566478042.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent (Dense (None, 96)           105120      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn (Ba (None, 96)           384         user_feature_item_latent[0][0]   
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn[0][0]
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,173,695
# Trainable params: 2,173,503
# Non-trainable params: 192
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0281, Jaccard score = 0.0170
# Iteration 0 fit: [18.1 s]: Recall = 0.2218, Jaccard score = 0.1516, loss = 0.4293, eval: [8.2 s]
# Iteration 1 fit: [17.6 s]: Recall = 0.2486, Jaccard score = 0.1730, loss = 0.3921, eval: [8.2 s]
# Iteration 2 fit: [17.5 s]: Recall = 0.2651, Jaccard score = 0.1867, loss = 0.3739, eval: [8.3 s]
# Iteration 3 fit: [17.6 s]: Recall = 0.2752, Jaccard score = 0.1951, loss = 0.3595, eval: [8.2 s]
# Iteration 4 fit: [17.6 s]: Recall = 0.2724, Jaccard score = 0.1928, loss = 0.3476, eval: [8.2 s]
# Iteration 5 fit: [17.6 s]: Recall = 0.2710, Jaccard score = 0.1916, loss = 0.3339, eval: [8.2 s]
# Iteration 6 fit: [17.6 s]: Recall = 0.2610, Jaccard score = 0.1833, loss = 0.3199, eval: [8.2 s]
# Iteration 7 fit: [17.6 s]: Recall = 0.2586, Jaccard score = 0.1813, loss = 0.3035, eval: [8.3 s]
# Iteration 8 fit: [17.6 s]: Recall = 0.2505, Jaccard score = 0.1746, loss = 0.2863, eval: [8.2 s]
# Iteration 9 fit: [17.6 s]: Recall = 0.2461, Jaccard score = 0.1710, loss = 0.2673, eval: [8.1 s]
# Iteration 10 fit: [17.6 s]: Recall = 0.2321, Jaccard score = 0.1597, loss = 0.2458, eval: [8.2 s]
# Iteration 11 fit: [17.6 s]: Recall = 0.2322, Jaccard score = 0.1598, loss = 0.2259, eval: [8.2 s]
# Iteration 12 fit: [17.6 s]: Recall = 0.2344, Jaccard score = 0.1615, loss = 0.2059, eval: [8.2 s]
# Iteration 13 fit: [17.6 s]: Recall = 0.2287, Jaccard score = 0.1570, loss = 0.1853, eval: [8.2 s]
# Iteration 14 fit: [17.5 s]: Recall = 0.2247, Jaccard score = 0.1538, loss = 0.1660, eval: [8.2 s]
# Iteration 15 fit: [17.6 s]: Recall = 0.2196, Jaccard score = 0.1498, loss = 0.1480, eval: [8.3 s]
# Iteration 16 fit: [17.5 s]: Recall = 0.2225, Jaccard score = 0.1521, loss = 0.1311, eval: [8.2 s]
# Iteration 17 fit: [17.6 s]: Recall = 0.2265, Jaccard score = 0.1553, loss = 0.1166, eval: [8.2 s]
# Iteration 18 fit: [17.6 s]: Recall = 0.2212, Jaccard score = 0.1510, loss = 0.1026, eval: [8.2 s]
# Iteration 19 fit: [17.6 s]: Recall = 0.2266, Jaccard score = 0.1554, loss = 0.0906, eval: [8.2 s]
# Iteration 20 fit: [17.5 s]: Recall = 0.2268, Jaccard score = 0.1555, loss = 0.0793, eval: [8.2 s]
# Iteration 21 fit: [17.6 s]: Recall = 0.2276, Jaccard score = 0.1561, loss = 0.0711, eval: [8.2 s]
# Iteration 22 fit: [17.6 s]: Recall = 0.2265, Jaccard score = 0.1553, loss = 0.0625, eval: [8.2 s]
# Iteration 23 fit: [17.6 s]: Recall = 0.2280, Jaccard score = 0.1565, loss = 0.0554, eval: [8.2 s]
# Iteration 24 fit: [17.6 s]: Recall = 0.2296, Jaccard score = 0.1577, loss = 0.0501, eval: [8.2 s]
# Iteration 25 fit: [17.6 s]: Recall = 0.2327, Jaccard score = 0.1602, loss = 0.0444, eval: [8.2 s]
# Iteration 26 fit: [17.6 s]: Recall = 0.2336, Jaccard score = 0.1609, loss = 0.0410, eval: [8.1 s]
# Iteration 27 fit: [17.6 s]: Recall = 0.2357, Jaccard score = 0.1626, loss = 0.0362, eval: [8.2 s]
# Iteration 28 fit: [17.6 s]: Recall = 0.2346, Jaccard score = 0.1617, loss = 0.0329, eval: [8.3 s]
# Iteration 29 fit: [17.6 s]: Recall = 0.2398, Jaccard score = 0.1659, loss = 0.0308, eval: [8.2 s]
# Iteration 30 fit: [17.6 s]: Recall = 0.2403, Jaccard score = 0.1663, loss = 0.0275, eval: [8.2 s]
# Iteration 31 fit: [17.6 s]: Recall = 0.2430, Jaccard score = 0.1684, loss = 0.0262, eval: [8.2 s]
# Iteration 32 fit: [17.5 s]: Recall = 0.2453, Jaccard score = 0.1703, loss = 0.0241, eval: [8.2 s]
# Iteration 33 fit: [17.6 s]: Recall = 0.2442, Jaccard score = 0.1695, loss = 0.0217, eval: [8.2 s]
# Iteration 34 fit: [17.6 s]: Recall = 0.2408, Jaccard score = 0.1667, loss = 0.0205, eval: [8.3 s]
# Iteration 35 fit: [17.6 s]: Recall = 0.2461, Jaccard score = 0.1710, loss = 0.0185, eval: [8.3 s]
# Iteration 36 fit: [17.6 s]: Recall = 0.2459, Jaccard score = 0.1709, loss = 0.0178, eval: [8.2 s]
# Iteration 37 fit: [17.6 s]: Recall = 0.2470, Jaccard score = 0.1717, loss = 0.0161, eval: [8.1 s]
# Iteration 38 fit: [17.6 s]: Recall = 0.2501, Jaccard score = 0.1742, loss = 0.0154, eval: [8.3 s]
# Iteration 39 fit: [17.6 s]: Recall = 0.2496, Jaccard score = 0.1738, loss = 0.0145, eval: [8.2 s]
# Iteration 40 fit: [17.6 s]: Recall = 0.2507, Jaccard score = 0.1748, loss = 0.0136, eval: [8.2 s]
# Iteration 41 fit: [17.6 s]: Recall = 0.2501, Jaccard score = 0.1742, loss = 0.0131, eval: [8.2 s]
# Iteration 42 fit: [17.6 s]: Recall = 0.2521, Jaccard score = 0.1759, loss = 0.0125, eval: [8.3 s]
# Iteration 43 fit: [17.6 s]: Recall = 0.2545, Jaccard score = 0.1779, loss = 0.0115, eval: [8.2 s]
# Iteration 44 fit: [17.6 s]: Recall = 0.2565, Jaccard score = 0.1795, loss = 0.0109, eval: [8.2 s]
# Iteration 45 fit: [17.6 s]: Recall = 0.2570, Jaccard score = 0.1799, loss = 0.0105, eval: [8.2 s]
# Iteration 46 fit: [17.6 s]: Recall = 0.2578, Jaccard score = 0.1806, loss = 0.0100, eval: [8.2 s]
# Iteration 47 fit: [17.6 s]: Recall = 0.2574, Jaccard score = 0.1802, loss = 0.0092, eval: [8.2 s]
# Iteration 48 fit: [17.6 s]: Recall = 0.2581, Jaccard score = 0.1808, loss = 0.0086, eval: [8.2 s]
# Iteration 49 fit: [17.6 s]: Recall = 0.2611, Jaccard score = 0.1833, loss = 0.0084, eval: [8.2 s]
# Iteration 50 fit: [17.5 s]: Recall = 0.2585, Jaccard score = 0.1812, loss = 0.0077, eval: [8.2 s]
# Iteration 51 fit: [17.6 s]: Recall = 0.2634, Jaccard score = 0.1853, loss = 0.0079, eval: [8.2 s]
# Iteration 52 fit: [17.6 s]: Recall = 0.2615, Jaccard score = 0.1836, loss = 0.0071, eval: [8.2 s]
# Iteration 53 fit: [17.6 s]: Recall = 0.2571, Jaccard score = 0.1800, loss = 0.0072, eval: [8.2 s]
# Iteration 54 fit: [17.6 s]: Recall = 0.2633, Jaccard score = 0.1852, loss = 0.0064, eval: [8.2 s]
# Iteration 55 fit: [17.6 s]: Recall = 0.2630, Jaccard score = 0.1849, loss = 0.0066, eval: [8.2 s]
# Iteration 56 fit: [17.6 s]: Recall = 0.2653, Jaccard score = 0.1868, loss = 0.0060, eval: [8.2 s]
# Iteration 57 fit: [17.6 s]: Recall = 0.2663, Jaccard score = 0.1876, loss = 0.0059, eval: [8.2 s]
# Iteration 58 fit: [17.6 s]: Recall = 0.2679, Jaccard score = 0.1890, loss = 0.0059, eval: [8.3 s]
# Iteration 59 fit: [17.6 s]: Recall = 0.2664, Jaccard score = 0.1877, loss = 0.0056, eval: [8.2 s]
# Iteration 60 fit: [17.6 s]: Recall = 0.2692, Jaccard score = 0.1901, loss = 0.0055, eval: [8.3 s]
# Iteration 61 fit: [17.6 s]: Recall = 0.2680, Jaccard score = 0.1891, loss = 0.0055, eval: [8.3 s]
# Iteration 62 fit: [17.6 s]: Recall = 0.2687, Jaccard score = 0.1896, loss = 0.0052, eval: [8.3 s]
# Iteration 63 fit: [17.7 s]: Recall = 0.2675, Jaccard score = 0.1887, loss = 0.0048, eval: [8.2 s]
# Iteration 64 fit: [17.6 s]: Recall = 0.2704, Jaccard score = 0.1911, loss = 0.0049, eval: [8.2 s]
# Iteration 65 fit: [17.6 s]: Recall = 0.2722, Jaccard score = 0.1926, loss = 0.0046, eval: [8.2 s]
# Iteration 66 fit: [17.6 s]: Recall = 0.2740, Jaccard score = 0.1942, loss = 0.0044, eval: [8.2 s]
# Iteration 67 fit: [17.6 s]: Recall = 0.2699, Jaccard score = 0.1907, loss = 0.0042, eval: [8.2 s]
# Iteration 68 fit: [17.6 s]: Recall = 0.2737, Jaccard score = 0.1939, loss = 0.0041, eval: [8.3 s]
# Iteration 69 fit: [17.7 s]: Recall = 0.2780, Jaccard score = 0.1976, loss = 0.0044, eval: [8.2 s]
# Iteration 70 fit: [17.6 s]: Recall = 0.2727, Jaccard score = 0.1930, loss = 0.0039, eval: [8.2 s]
# Iteration 71 fit: [17.6 s]: Recall = 0.2727, Jaccard score = 0.1930, loss = 0.0037, eval: [8.5 s]
# Iteration 72 fit: [19.9 s]: Recall = 0.2766, Jaccard score = 0.1963, loss = 0.0038, eval: [8.3 s]
# Iteration 73 fit: [17.6 s]: Recall = 0.2769, Jaccard score = 0.1966, loss = 0.0035, eval: [8.2 s]
# Iteration 74 fit: [17.7 s]: Recall = 0.2776, Jaccard score = 0.1972, loss = 0.0034, eval: [8.3 s]
# Iteration 75 fit: [17.6 s]: Recall = 0.2766, Jaccard score = 0.1963, loss = 0.0034, eval: [8.1 s]
# Iteration 76 fit: [17.6 s]: Recall = 0.2838, Jaccard score = 0.2024, loss = 0.0032, eval: [8.2 s]
# Iteration 77 fit: [17.6 s]: Recall = 0.2820, Jaccard score = 0.2010, loss = 0.0034, eval: [8.2 s]
# Iteration 78 fit: [17.6 s]: Recall = 0.2814, Jaccard score = 0.2004, loss = 0.0033, eval: [8.2 s]
# Iteration 79 fit: [17.6 s]: Recall = 0.2779, Jaccard score = 0.1975, loss = 0.0031, eval: [8.2 s]
# Iteration 80 fit: [17.6 s]: Recall = 0.2828, Jaccard score = 0.2017, loss = 0.0029, eval: [8.2 s]
# Iteration 81 fit: [17.6 s]: Recall = 0.2830, Jaccard score = 0.2018, loss = 0.0029, eval: [8.3 s]
# Iteration 82 fit: [17.6 s]: Recall = 0.2820, Jaccard score = 0.2010, loss = 0.0027, eval: [8.3 s]
# Iteration 83 fit: [17.6 s]: Recall = 0.2873, Jaccard score = 0.2055, loss = 0.0028, eval: [8.3 s]
# Iteration 84 fit: [17.6 s]: Recall = 0.2868, Jaccard score = 0.2051, loss = 0.0030, eval: [8.2 s]
# Iteration 85 fit: [17.6 s]: Recall = 0.2836, Jaccard score = 0.2023, loss = 0.0029, eval: [8.2 s]
# Iteration 86 fit: [17.6 s]: Recall = 0.2860, Jaccard score = 0.2044, loss = 0.0026, eval: [8.3 s]
# Iteration 87 fit: [17.6 s]: Recall = 0.2842, Jaccard score = 0.2028, loss = 0.0028, eval: [8.2 s]
# Iteration 88 fit: [17.6 s]: Recall = 0.2857, Jaccard score = 0.2041, loss = 0.0025, eval: [8.3 s]
# Iteration 89 fit: [17.6 s]: Recall = 0.2868, Jaccard score = 0.2051, loss = 0.0026, eval: [8.2 s]
# Iteration 90 fit: [17.6 s]: Recall = 0.2866, Jaccard score = 0.2049, loss = 0.0026, eval: [8.3 s]
# Iteration 91 fit: [17.6 s]: Recall = 0.2888, Jaccard score = 0.2068, loss = 0.0026, eval: [8.3 s]
# Iteration 92 fit: [17.8 s]: Recall = 0.2876, Jaccard score = 0.2058, loss = 0.0024, eval: [8.2 s]
# Iteration 93 fit: [17.6 s]: Recall = 0.2872, Jaccard score = 0.2054, loss = 0.0024, eval: [8.2 s]
# Iteration 94 fit: [17.6 s]: Recall = 0.2868, Jaccard score = 0.2051, loss = 0.0026, eval: [8.2 s]
# Iteration 95 fit: [17.6 s]: Recall = 0.2948, Jaccard score = 0.2120, loss = 0.0024, eval: [8.2 s]
# Iteration 96 fit: [17.6 s]: Recall = 0.2912, Jaccard score = 0.2088, loss = 0.0023, eval: [8.2 s]
# Iteration 97 fit: [17.6 s]: Recall = 0.2971, Jaccard score = 0.2140, loss = 0.0022, eval: [8.2 s]
# Iteration 98 fit: [17.6 s]: Recall = 0.2882, Jaccard score = 0.2063, loss = 0.0025, eval: [8.2 s]
# Iteration 99 fit: [17.6 s]: Recall = 0.2948, Jaccard score = 0.2120, loss = 0.0022, eval: [8.1 s]
# Iteration 100 fit: [17.6 s]: Recall = 0.2945, Jaccard score = 0.2117, loss = 0.0022, eval: [8.2 s]
# Iteration 101 fit: [17.6 s]: Recall = 0.2939, Jaccard score = 0.2112, loss = 0.0022, eval: [8.1 s]
# Iteration 102 fit: [17.6 s]: Recall = 0.2992, Jaccard score = 0.2158, loss = 0.0020, eval: [8.2 s]
# Iteration 103 fit: [17.6 s]: Recall = 0.2968, Jaccard score = 0.2137, loss = 0.0020, eval: [8.2 s]
# Iteration 104 fit: [17.6 s]: Recall = 0.2927, Jaccard score = 0.2101, loss = 0.0020, eval: [8.2 s]
# Iteration 105 fit: [17.6 s]: Recall = 0.2944, Jaccard score = 0.2116, loss = 0.0021, eval: [8.2 s]
# Iteration 106 fit: [17.5 s]: Recall = 0.2959, Jaccard score = 0.2129, loss = 0.0022, eval: [8.2 s]
# Iteration 107 fit: [17.6 s]: Recall = 0.3025, Jaccard score = 0.2187, loss = 0.0018, eval: [8.2 s]
# Iteration 108 fit: [17.6 s]: Recall = 0.3012, Jaccard score = 0.2176, loss = 0.0021, eval: [8.3 s]
# Iteration 109 fit: [17.6 s]: Recall = 0.3003, Jaccard score = 0.2168, loss = 0.0022, eval: [8.2 s]
# Iteration 110 fit: [17.6 s]: Recall = 0.2992, Jaccard score = 0.2158, loss = 0.0019, eval: [8.3 s]
# Iteration 111 fit: [17.7 s]: Recall = 0.2958, Jaccard score = 0.2128, loss = 0.0020, eval: [8.3 s]
# Iteration 112 fit: [17.6 s]: Recall = 0.2972, Jaccard score = 0.2141, loss = 0.0022, eval: [8.2 s]
# Iteration 113 fit: [17.6 s]: Recall = 0.3007, Jaccard score = 0.2171, loss = 0.0021, eval: [8.2 s]
# Iteration 114 fit: [17.6 s]: Recall = 0.3017, Jaccard score = 0.2180, loss = 0.0020, eval: [8.2 s]
# Iteration 115 fit: [17.6 s]: Recall = 0.3004, Jaccard score = 0.2169, loss = 0.0019, eval: [8.3 s]
# Iteration 116 fit: [17.6 s]: Recall = 0.3039, Jaccard score = 0.2199, loss = 0.0017, eval: [8.3 s]
# Iteration 117 fit: [17.6 s]: Recall = 0.3012, Jaccard score = 0.2176, loss = 0.0018, eval: [8.2 s]
# Iteration 118 fit: [17.5 s]: Recall = 0.3024, Jaccard score = 0.2186, loss = 0.0018, eval: [8.2 s]
# Iteration 119 fit: [17.6 s]: Recall = 0.3031, Jaccard score = 0.2192, loss = 0.0021, eval: [8.3 s]
# Iteration 120 fit: [17.5 s]: Recall = 0.3018, Jaccard score = 0.2181, loss = 0.0019, eval: [8.2 s]
# Iteration 121 fit: [17.6 s]: Recall = 0.3063, Jaccard score = 0.2221, loss = 0.0018, eval: [8.2 s]
# Iteration 122 fit: [17.6 s]: Recall = 0.3023, Jaccard score = 0.2185, loss = 0.0017, eval: [8.2 s]
# Iteration 123 fit: [17.6 s]: Recall = 0.3050, Jaccard score = 0.2210, loss = 0.0019, eval: [8.2 s]
# Iteration 124 fit: [17.6 s]: Recall = 0.3035, Jaccard score = 0.2196, loss = 0.0019, eval: [8.2 s]
# Iteration 125 fit: [17.6 s]: Recall = 0.3044, Jaccard score = 0.2204, loss = 0.0016, eval: [8.2 s]
# Iteration 126 fit: [17.6 s]: Recall = 0.3072, Jaccard score = 0.2229, loss = 0.0017, eval: [8.2 s]
# Iteration 127 fit: [17.6 s]: Recall = 0.3069, Jaccard score = 0.2227, loss = 0.0019, eval: [8.2 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566481542.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566481542.h5
# Load data done [4.6 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566481565.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566481565.h5
# Load data done [5.2 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566481602.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566481602.h5
# Load data done [5.2 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 512)          2048        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent2 (Dens (None, 96)           49248       leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn2 (B (None, 96)           384         user_feature_item_latent2[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn2[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_2[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,680,511
# Trainable params: 2,679,295
# Non-trainable params: 1,216
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0300, Jaccard score = 0.0181


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566483982.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566483982.h5
# Load data done [5.0 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 512)          2048        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent2 (Dens (None, 96)           49248       leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn2 (B (None, 96)           384         user_feature_item_latent2[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn2[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_2[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,680,511
# Trainable params: 2,679,295
# Non-trainable params: 1,216
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0279, Jaccard score = 0.0168


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566484208.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566484208.h5
# Load data done [2.1 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 512)          2048        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent2 (Dens (None, 96)           49248       leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn2 (B (None, 96)           384         user_feature_item_latent2[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn2[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_2[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,680,511
# Trainable params: 2,679,295
# Non-trainable params: 1,216
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0278, Jaccard score = 0.0167
# Iteration 0 fit: [22.7 s]: Recall = 0.2472, Jaccard score = 0.1719, loss = 0.4163, gradient norm = 0.3659, eval: [8.6 s]
# Iteration 1 fit: [22.6 s]: Recall = 0.2626, Jaccard score = 0.1846, loss = 0.3777, gradient norm = 0.3238, eval: [8.6 s]
# Iteration 2 fit: [22.1 s]: Recall = 0.2738, Jaccard score = 0.1940, loss = 0.3584, gradient norm = 0.3141, eval: [8.5 s]
# Iteration 3 fit: [22.3 s]: Recall = 0.2784, Jaccard score = 0.1979, loss = 0.3437, gradient norm = 0.3106, eval: [8.5 s]
# Iteration 4 fit: [22.4 s]: Recall = 0.2817, Jaccard score = 0.2007, loss = 0.3298, gradient norm = 0.3107, eval: [8.5 s]
# Iteration 5 fit: [22.3 s]: Recall = 0.2753, Jaccard score = 0.1952, loss = 0.3162, gradient norm = 0.3127, eval: [8.5 s]
# Iteration 6 fit: [22.1 s]: Recall = 0.2787, Jaccard score = 0.1981, loss = 0.2996, gradient norm = 0.3162, eval: [8.5 s]
# Iteration 7 fit: [22.2 s]: Recall = 0.2689, Jaccard score = 0.1898, loss = 0.2823, gradient norm = 0.3198, eval: [8.6 s]
# Iteration 8 fit: [22.3 s]: Recall = 0.2655, Jaccard score = 0.1870, loss = 0.2639, gradient norm = 0.3229, eval: [8.6 s]
# Iteration 9 fit: [22.2 s]: Recall = 0.2581, Jaccard score = 0.1808, loss = 0.2442, gradient norm = 0.3247, eval: [8.5 s]
# Iteration 10 fit: [21.9 s]: Recall = 0.2594, Jaccard score = 0.1819, loss = 0.2246, gradient norm = 0.3257, eval: [8.6 s]
# Iteration 11 fit: [22.2 s]: Recall = 0.2434, Jaccard score = 0.1688, loss = 0.2052, gradient norm = 0.3232, eval: [8.6 s]
# Iteration 12 fit: [22.1 s]: Recall = 0.2450, Jaccard score = 0.1701, loss = 0.1865, gradient norm = 0.3201, eval: [8.5 s]
# Iteration 13 fit: [22.1 s]: Recall = 0.2385, Jaccard score = 0.1649, loss = 0.1680, gradient norm = 0.3150, eval: [8.6 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=256, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_256_[64,32,16,8]_1566484710.h5
--weights_path: Pretrain/_GMF_256_[64,32,16,8]_1566484710.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 256)       512000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 256)          0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1256)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 256)       5120000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 512)          643584      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 256)          0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 512)          2048        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 256)          0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 768)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            769         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 6,278,401
# Trainable params: 6,277,377
# Non-trainable params: 1,024
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0236, Jaccard score = 0.0142
# Iteration 0 fit: [30.2 s]: Recall = 0.2292, Jaccard score = 0.1574, loss = 0.4214, gradient norm = 0.5234, eval: [8.2 s]
# Iteration 1 fit: [29.7 s]: Recall = 0.2576, Jaccard score = 0.1804, loss = 0.3833, gradient norm = 0.4457, eval: [8.0 s]
# Iteration 2 fit: [29.4 s]: Recall = 0.2667, Jaccard score = 0.1880, loss = 0.3624, gradient norm = 0.4126, eval: [8.0 s]
# Iteration 3 fit: [29.5 s]: Recall = 0.2678, Jaccard score = 0.1889, loss = 0.3448, gradient norm = 0.3936, eval: [8.0 s]
# Iteration 4 fit: [29.5 s]: Recall = 0.2676, Jaccard score = 0.1888, loss = 0.3253, gradient norm = 0.3793, eval: [8.0 s]
# Iteration 5 fit: [29.4 s]: Recall = 0.2578, Jaccard score = 0.1806, loss = 0.2986, gradient norm = 0.3640, eval: [8.0 s]
# Iteration 6 fit: [29.3 s]: Recall = 0.2349, Jaccard score = 0.1619, loss = 0.2677, gradient norm = 0.3464, eval: [8.0 s]
# Iteration 7 fit: [29.4 s]: Recall = 0.2277, Jaccard score = 0.1562, loss = 0.2332, gradient norm = 0.3268, eval: [8.0 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566485130.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566485130.h5
# Load data done [2.1 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 512)          560640      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 512)          2048        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 512)          0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 606)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            607         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 2,631,295
# Trainable params: 2,630,271
# Non-trainable params: 1,024
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0240, Jaccard score = 0.0144
# Iteration 0 fit: [22.2 s]: Recall = 0.2379, Jaccard score = 0.1644, loss = 0.4242, gradient norm = 0.4644, eval: [8.8 s]
# Iteration 1 fit: [19.9 s]: Recall = 0.2605, Jaccard score = 0.1828, loss = 0.3869, gradient norm = 0.3790, eval: [8.0 s]
# Iteration 2 fit: [20.0 s]: Recall = 0.2737, Jaccard score = 0.1939, loss = 0.3675, gradient norm = 0.3453, eval: [8.1 s]
# Iteration 3 fit: [20.0 s]: Recall = 0.2775, Jaccard score = 0.1971, loss = 0.3528, gradient norm = 0.3251, eval: [8.1 s]
# Iteration 4 fit: [20.4 s]: Recall = 0.2828, Jaccard score = 0.2017, loss = 0.3394, gradient norm = 0.3137, eval: [8.0 s]
# Iteration 5 fit: [20.2 s]: Recall = 0.2815, Jaccard score = 0.2005, loss = 0.3247, gradient norm = 0.3060, eval: [8.0 s]
# Iteration 6 fit: [20.1 s]: Recall = 0.2718, Jaccard score = 0.1922, loss = 0.3083, gradient norm = 0.3004, eval: [8.0 s]
# Iteration 7 fit: [20.3 s]: Recall = 0.2679, Jaccard score = 0.1890, loss = 0.2912, gradient norm = 0.2956, eval: [8.0 s]
# Iteration 8 fit: [20.3 s]: Recall = 0.2627, Jaccard score = 0.1847, loss = 0.2712, gradient norm = 0.2914, eval: [8.0 s]
# Iteration 9 fit: [20.2 s]: Recall = 0.2529, Jaccard score = 0.1766, loss = 0.2509, gradient norm = 0.2861, eval: [8.1 s]
# Iteration 10 fit: [20.2 s]: Recall = 0.2461, Jaccard score = 0.1710, loss = 0.2301, gradient norm = 0.2809, eval: [8.0 s]
# Iteration 11 fit: [20.3 s]: Recall = 0.2470, Jaccard score = 0.1717, loss = 0.2083, gradient norm = 0.2741, eval: [8.2 s]
# Iteration 12 fit: [19.8 s]: Recall = 0.2488, Jaccard score = 0.1732, loss = 0.1884, gradient norm = 0.2673, eval: [8.0 s]
# Iteration 13 fit: [20.4 s]: Recall = 0.2425, Jaccard score = 0.1681, loss = 0.1683, gradient norm = 0.2587, eval: [8.0 s]
# Iteration 14 fit: [20.4 s]: Recall = 0.2409, Jaccard score = 0.1668, loss = 0.1486, gradient norm = 0.2497, eval: [8.0 s]
# Iteration 15 fit: [20.3 s]: Recall = 0.2354, Jaccard score = 0.1624, loss = 0.1328, gradient norm = 0.2406, eval: [8.0 s]
# Iteration 16 fit: [20.1 s]: Recall = 0.2408, Jaccard score = 0.1667, loss = 0.1168, gradient norm = 0.2298, eval: [8.0 s]
# Iteration 17 fit: [20.4 s]: Recall = 0.2424, Jaccard score = 0.1680, loss = 0.1037, gradient norm = 0.2207, eval: [8.1 s]
# Iteration 18 fit: [20.2 s]: Recall = 0.2432, Jaccard score = 0.1686, loss = 0.0923, gradient norm = 0.2103, eval: [8.0 s]
# Iteration 19 fit: [20.4 s]: Recall = 0.2401, Jaccard score = 0.1661, loss = 0.0807, gradient norm = 0.1991, eval: [8.1 s]
# Iteration 20 fit: [19.9 s]: Recall = 0.2439, Jaccard score = 0.1692, loss = 0.0719, gradient norm = 0.1891, eval: [7.9 s]
# Iteration 21 fit: [20.1 s]: Recall = 0.2409, Jaccard score = 0.1668, loss = 0.0642, gradient norm = 0.1798, eval: [8.0 s]
# Iteration 22 fit: [20.3 s]: Recall = 0.2447, Jaccard score = 0.1698, loss = 0.0579, gradient norm = 0.1702, eval: [7.9 s]
# Iteration 23 fit: [20.2 s]: Recall = 0.2432, Jaccard score = 0.1686, loss = 0.0525, gradient norm = 0.1617, eval: [8.1 s]
# Iteration 24 fit: [20.4 s]: Recall = 0.2465, Jaccard score = 0.1713, loss = 0.0475, gradient norm = 0.1544, eval: [8.0 s]
# Iteration 25 fit: [20.1 s]: Recall = 0.2522, Jaccard score = 0.1760, loss = 0.0429, gradient norm = 0.1458, eval: [8.1 s]
# Iteration 26 fit: [20.2 s]: Recall = 0.2506, Jaccard score = 0.1747, loss = 0.0396, gradient norm = 0.1386, eval: [8.1 s]
# Iteration 27 fit: [20.5 s]: Recall = 0.2494, Jaccard score = 0.1737, loss = 0.0359, gradient norm = 0.1320, eval: [8.0 s]
# Iteration 28 fit: [20.1 s]: Recall = 0.2481, Jaccard score = 0.1726, loss = 0.0328, gradient norm = 0.1251, eval: [8.0 s]
# Iteration 29 fit: [20.4 s]: Recall = 0.2523, Jaccard score = 0.1761, loss = 0.0304, gradient norm = 0.1195, eval: [8.0 s]
# Iteration 30 fit: [19.9 s]: Recall = 0.2489, Jaccard score = 0.1733, loss = 0.0280, gradient norm = 0.1144, eval: [8.1 s]
# Iteration 31 fit: [19.8 s]: Recall = 0.2519, Jaccard score = 0.1757, loss = 0.0264, gradient norm = 0.1094, eval: [8.1 s]
# Iteration 32 fit: [20.3 s]: Recall = 0.2566, Jaccard score = 0.1796, loss = 0.0246, gradient norm = 0.1051, eval: [8.0 s]
# Iteration 33 fit: [20.0 s]: Recall = 0.2531, Jaccard score = 0.1767, loss = 0.0224, gradient norm = 0.0994, eval: [8.0 s]
# Iteration 34 fit: [20.4 s]: Recall = 0.2536, Jaccard score = 0.1771, loss = 0.0205, gradient norm = 0.0943, eval: [8.0 s]
# Iteration 35 fit: [19.9 s]: Recall = 0.2568, Jaccard score = 0.1798, loss = 0.0196, gradient norm = 0.0912, eval: [8.0 s]
# Iteration 36 fit: [19.8 s]: Recall = 0.2622, Jaccard score = 0.1842, loss = 0.0184, gradient norm = 0.0869, eval: [8.0 s]
# Iteration 37 fit: [19.9 s]: Recall = 0.2579, Jaccard score = 0.1807, loss = 0.0173, gradient norm = 0.0836, eval: [8.0 s]
# Iteration 38 fit: [20.3 s]: Recall = 0.2608, Jaccard score = 0.1831, loss = 0.0160, gradient norm = 0.0796, eval: [8.0 s]
# Iteration 39 fit: [20.4 s]: Recall = 0.2570, Jaccard score = 0.1799, loss = 0.0152, gradient norm = 0.0776, eval: [8.1 s]
# Iteration 40 fit: [19.9 s]: Recall = 0.2600, Jaccard score = 0.1824, loss = 0.0144, gradient norm = 0.0740, eval: [8.0 s]
# Iteration 41 fit: [20.5 s]: Recall = 0.2589, Jaccard score = 0.1815, loss = 0.0136, gradient norm = 0.0714, eval: [8.0 s]
# Iteration 42 fit: [20.0 s]: Recall = 0.2654, Jaccard score = 0.1869, loss = 0.0128, gradient norm = 0.0690, eval: [8.0 s]
# Iteration 43 fit: [20.4 s]: Recall = 0.2630, Jaccard score = 0.1849, loss = 0.0116, gradient norm = 0.0644, eval: [8.0 s]
# Iteration 44 fit: [20.1 s]: Recall = 0.2623, Jaccard score = 0.1843, loss = 0.0114, gradient norm = 0.0636, eval: [8.0 s]
# Iteration 45 fit: [20.4 s]: Recall = 0.2648, Jaccard score = 0.1864, loss = 0.0111, gradient norm = 0.0620, eval: [8.0 s]
# Iteration 46 fit: [20.5 s]: Recall = 0.2616, Jaccard score = 0.1837, loss = 0.0100, gradient norm = 0.0584, eval: [8.0 s]
# Iteration 47 fit: [20.4 s]: Recall = 0.2666, Jaccard score = 0.1879, loss = 0.0095, gradient norm = 0.0561, eval: [8.0 s]
# Iteration 48 fit: [20.4 s]: Recall = 0.2663, Jaccard score = 0.1876, loss = 0.0092, gradient norm = 0.0540, eval: [8.0 s]
# Iteration 49 fit: [20.4 s]: Recall = 0.2654, Jaccard score = 0.1869, loss = 0.0092, gradient norm = 0.0541, eval: [8.1 s]
# Iteration 50 fit: [20.3 s]: Recall = 0.2672, Jaccard score = 0.1884, loss = 0.0081, gradient norm = 0.0504, eval: [8.0 s]
# Iteration 51 fit: [20.4 s]: Recall = 0.2656, Jaccard score = 0.1871, loss = 0.0082, gradient norm = 0.0500, eval: [8.0 s]
# Iteration 52 fit: [20.1 s]: Recall = 0.2659, Jaccard score = 0.1873, loss = 0.0075, gradient norm = 0.0458, eval: [7.9 s]
# Iteration 53 fit: [20.5 s]: Recall = 0.2681, Jaccard score = 0.1892, loss = 0.0073, gradient norm = 0.0465, eval: [8.0 s]
# Iteration 54 fit: [20.2 s]: Recall = 0.2676, Jaccard score = 0.1888, loss = 0.0071, gradient norm = 0.0447, eval: [8.0 s]
# Iteration 55 fit: [20.4 s]: Recall = 0.2680, Jaccard score = 0.1891, loss = 0.0071, gradient norm = 0.0439, eval: [8.0 s]
# Iteration 56 fit: [20.4 s]: Recall = 0.2665, Jaccard score = 0.1878, loss = 0.0064, gradient norm = 0.0412, eval: [8.0 s]
# Iteration 57 fit: [20.5 s]: Recall = 0.2728, Jaccard score = 0.1931, loss = 0.0063, gradient norm = 0.0403, eval: [8.0 s]
# Iteration 58 fit: [20.5 s]: Recall = 0.2707, Jaccard score = 0.1914, loss = 0.0060, gradient norm = 0.0390, eval: [8.0 s]
# Iteration 59 fit: [20.5 s]: Recall = 0.2700, Jaccard score = 0.1908, loss = 0.0055, gradient norm = 0.0382, eval: [8.1 s]
# Iteration 60 fit: [20.7 s]: Recall = 0.2698, Jaccard score = 0.1906, loss = 0.0056, gradient norm = 0.0372, eval: [7.9 s]
# Iteration 61 fit: [20.5 s]: Recall = 0.2754, Jaccard score = 0.1953, loss = 0.0051, gradient norm = 0.0351, eval: [8.1 s]
# Iteration 62 fit: [20.5 s]: Recall = 0.2742, Jaccard score = 0.1943, loss = 0.0050, gradient norm = 0.0351, eval: [8.1 s]
# Iteration 63 fit: [20.5 s]: Recall = 0.2759, Jaccard score = 0.1957, loss = 0.0048, gradient norm = 0.0334, eval: [8.1 s]
# Iteration 64 fit: [20.4 s]: Recall = 0.2737, Jaccard score = 0.1939, loss = 0.0045, gradient norm = 0.0319, eval: [8.1 s]
# Iteration 65 fit: [20.3 s]: Recall = 0.2727, Jaccard score = 0.1930, loss = 0.0049, gradient norm = 0.0344, eval: [8.1 s]
# Iteration 66 fit: [20.4 s]: Recall = 0.2756, Jaccard score = 0.1955, loss = 0.0044, gradient norm = 0.0304, eval: [8.1 s]
# Iteration 67 fit: [20.6 s]: Recall = 0.2748, Jaccard score = 0.1948, loss = 0.0042, gradient norm = 0.0298, eval: [8.0 s]
# Iteration 68 fit: [20.7 s]: Recall = 0.2740, Jaccard score = 0.1942, loss = 0.0040, gradient norm = 0.0298, eval: [8.1 s]
# Iteration 69 fit: [20.5 s]: Recall = 0.2744, Jaccard score = 0.1945, loss = 0.0040, gradient norm = 0.0294, eval: [8.0 s]
# Iteration 70 fit: [20.6 s]: Recall = 0.2758, Jaccard score = 0.1956, loss = 0.0041, gradient norm = 0.0288, eval: [8.0 s]
# Iteration 71 fit: [20.2 s]: Recall = 0.2761, Jaccard score = 0.1959, loss = 0.0041, gradient norm = 0.0288, eval: [8.0 s]
# Iteration 72 fit: [20.1 s]: Recall = 0.2778, Jaccard score = 0.1974, loss = 0.0036, gradient norm = 0.0265, eval: [8.1 s]
# Iteration 73 fit: [20.5 s]: Recall = 0.2776, Jaccard score = 0.1972, loss = 0.0036, gradient norm = 0.0279, eval: [8.0 s]
# Iteration 74 fit: [20.3 s]: Recall = 0.2809, Jaccard score = 0.2000, loss = 0.0033, gradient norm = 0.0262, eval: [8.0 s]
# Iteration 75 fit: [20.3 s]: Recall = 0.2777, Jaccard score = 0.1973, loss = 0.0033, gradient norm = 0.0260, eval: [8.0 s]
# Iteration 76 fit: [20.3 s]: Recall = 0.2780, Jaccard score = 0.1976, loss = 0.0034, gradient norm = 0.0270, eval: [8.2 s]
# Iteration 77 fit: [20.1 s]: Recall = 0.2828, Jaccard score = 0.2017, loss = 0.0029, gradient norm = 0.0240, eval: [8.0 s]
# Iteration 78 fit: [20.4 s]: Recall = 0.2808, Jaccard score = 0.1999, loss = 0.0031, gradient norm = 0.0259, eval: [8.0 s]
# Iteration 79 fit: [20.4 s]: Recall = 0.2854, Jaccard score = 0.2038, loss = 0.0029, gradient norm = 0.0245, eval: [8.1 s]
# Iteration 80 fit: [21.1 s]: Recall = 0.2778, Jaccard score = 0.1974, loss = 0.0028, gradient norm = 0.0240, eval: [8.3 s]
# Iteration 81 fit: [20.9 s]: Recall = 0.2825, Jaccard score = 0.2014, loss = 0.0027, gradient norm = 0.0226, eval: [8.2 s]
# Iteration 82 fit: [20.5 s]: Recall = 0.2873, Jaccard score = 0.2055, loss = 0.0029, gradient norm = 0.0247, eval: [8.2 s]
# Iteration 83 fit: [21.2 s]: Recall = 0.2894, Jaccard score = 0.2073, loss = 0.0024, gradient norm = 0.0228, eval: [8.2 s]
# Iteration 84 fit: [20.8 s]: Recall = 0.2918, Jaccard score = 0.2093, loss = 0.0029, gradient norm = 0.0241, eval: [8.3 s]
# Iteration 85 fit: [21.2 s]: Recall = 0.2945, Jaccard score = 0.2117, loss = 0.0025, gradient norm = 0.0234, eval: [8.2 s]
# Iteration 86 fit: [21.1 s]: Recall = 0.2897, Jaccard score = 0.2076, loss = 0.0027, gradient norm = 0.0232, eval: [8.4 s]
# Iteration 87 fit: [20.7 s]: Recall = 0.2905, Jaccard score = 0.2083, loss = 0.0024, gradient norm = 0.0237, eval: [8.3 s]
# Iteration 88 fit: [20.6 s]: Recall = 0.2924, Jaccard score = 0.2099, loss = 0.0023, gradient norm = 0.0239, eval: [8.3 s]
# Iteration 89 fit: [20.6 s]: Recall = 0.2907, Jaccard score = 0.2085, loss = 0.0024, gradient norm = 0.0239, eval: [8.4 s]
# Iteration 90 fit: [20.6 s]: Recall = 0.2923, Jaccard score = 0.2098, loss = 0.0025, gradient norm = 0.0237, eval: [8.3 s]
# Iteration 91 fit: [20.5 s]: Recall = 0.2898, Jaccard score = 0.2077, loss = 0.0024, gradient norm = 0.0229, eval: [8.3 s]
# Iteration 92 fit: [20.5 s]: Recall = 0.2975, Jaccard score = 0.2143, loss = 0.0021, gradient norm = 0.0232, eval: [8.3 s]
# Iteration 93 fit: [20.7 s]: Recall = 0.2966, Jaccard score = 0.2135, loss = 0.0023, gradient norm = 0.0234, eval: [8.2 s]
# Iteration 94 fit: [20.6 s]: Recall = 0.3015, Jaccard score = 0.2178, loss = 0.0020, gradient norm = 0.0210, eval: [8.1 s]
# Iteration 95 fit: [20.7 s]: Recall = 0.2973, Jaccard score = 0.2142, loss = 0.0024, gradient norm = 0.0254, eval: [8.4 s]
# Iteration 96 fit: [20.7 s]: Recall = 0.3011, Jaccard score = 0.2175, loss = 0.0021, gradient norm = 0.0220, eval: [8.4 s]
# Iteration 97 fit: [20.7 s]: Recall = 0.2971, Jaccard score = 0.2140, loss = 0.0023, gradient norm = 0.0243, eval: [8.4 s]
# Iteration 98 fit: [20.6 s]: Recall = 0.2992, Jaccard score = 0.2158, loss = 0.0020, gradient norm = 0.0224, eval: [8.3 s]
# Iteration 99 fit: [20.6 s]: Recall = 0.3000, Jaccard score = 0.2165, loss = 0.0021, gradient norm = 0.0221, eval: [8.2 s]
# Iteration 100 fit: [20.5 s]: Recall = 0.3009, Jaccard score = 0.2173, loss = 0.0021, gradient norm = 0.0243, eval: [8.2 s]
# Iteration 101 fit: [20.6 s]: Recall = 0.3040, Jaccard score = 0.2200, loss = 0.0021, gradient norm = 0.0242, eval: [8.2 s]
# Iteration 102 fit: [20.7 s]: Recall = 0.3018, Jaccard score = 0.2181, loss = 0.0019, gradient norm = 0.0225, eval: [8.2 s]
# Iteration 103 fit: [20.7 s]: Recall = 0.3056, Jaccard score = 0.2215, loss = 0.0021, gradient norm = 0.0248, eval: [8.2 s]
# Iteration 104 fit: [20.1 s]: Recall = 0.3024, Jaccard score = 0.2186, loss = 0.0020, gradient norm = 0.0220, eval: [8.4 s]
# Iteration 105 fit: [20.6 s]: Recall = 0.3056, Jaccard score = 0.2215, loss = 0.0017, gradient norm = 0.0204, eval: [8.4 s]
# Iteration 106 fit: [20.6 s]: Recall = 0.3090, Jaccard score = 0.2245, loss = 0.0019, gradient norm = 0.0211, eval: [8.3 s]
# Iteration 107 fit: [20.9 s]: Recall = 0.3081, Jaccard score = 0.2237, loss = 0.0018, gradient norm = 0.0230, eval: [8.2 s]
# Iteration 108 fit: [20.6 s]: Recall = 0.3080, Jaccard score = 0.2236, loss = 0.0017, gradient norm = 0.0217, eval: [8.3 s]
# Iteration 109 fit: [20.7 s]: Recall = 0.3098, Jaccard score = 0.2252, loss = 0.0016, gradient norm = 0.0207, eval: [8.2 s]
# Iteration 110 fit: [20.7 s]: Recall = 0.3087, Jaccard score = 0.2242, loss = 0.0017, gradient norm = 0.0222, eval: [8.2 s]
# Iteration 111 fit: [20.6 s]: Recall = 0.3099, Jaccard score = 0.2253, loss = 0.0020, gradient norm = 0.0238, eval: [8.2 s]
# Iteration 112 fit: [20.6 s]: Recall = 0.3105, Jaccard score = 0.2258, loss = 0.0016, gradient norm = 0.0219, eval: [8.2 s]
# Iteration 113 fit: [20.7 s]: Recall = 0.3116, Jaccard score = 0.2268, loss = 0.0017, gradient norm = 0.0214, eval: [8.2 s]
# Iteration 114 fit: [20.6 s]: Recall = 0.3106, Jaccard score = 0.2259, loss = 0.0018, gradient norm = 0.0218, eval: [8.3 s]
# Iteration 115 fit: [20.6 s]: Recall = 0.3129, Jaccard score = 0.2280, loss = 0.0017, gradient norm = 0.0257, eval: [8.3 s]
# Iteration 116 fit: [20.2 s]: Recall = 0.3081, Jaccard score = 0.2237, loss = 0.0016, gradient norm = 0.0240, eval: [8.2 s]
# Iteration 117 fit: [20.6 s]: Recall = 0.3133, Jaccard score = 0.2284, loss = 0.0017, gradient norm = 0.0223, eval: [8.2 s]
# Iteration 118 fit: [20.4 s]: Recall = 0.3122, Jaccard score = 0.2274, loss = 0.0018, gradient norm = 0.0249, eval: [8.2 s]
# Iteration 119 fit: [20.4 s]: Recall = 0.3156, Jaccard score = 0.2304, loss = 0.0017, gradient norm = 0.0231, eval: [8.2 s]
# Iteration 120 fit: [20.7 s]: Recall = 0.3104, Jaccard score = 0.2257, loss = 0.0016, gradient norm = 0.0216, eval: [8.1 s]
# Iteration 121 fit: [20.7 s]: Recall = 0.3111, Jaccard score = 0.2263, loss = 0.0016, gradient norm = 0.0235, eval: [8.2 s]
# Iteration 122 fit: [20.8 s]: Recall = 0.3165, Jaccard score = 0.2312, loss = 0.0017, gradient norm = 0.0247, eval: [8.2 s]
# Iteration 123 fit: [20.7 s]: Recall = 0.3161, Jaccard score = 0.2308, loss = 0.0015, gradient norm = 0.0250, eval: [8.1 s]
# Iteration 124 fit: [20.7 s]: Recall = 0.3168, Jaccard score = 0.2314, loss = 0.0017, gradient norm = 0.0259, eval: [8.1 s]
# Iteration 125 fit: [20.7 s]: Recall = 0.3137, Jaccard score = 0.2287, loss = 0.0017, gradient norm = 0.0244, eval: [8.2 s]
# Iteration 126 fit: [20.7 s]: Recall = 0.3107, Jaccard score = 0.2260, loss = 0.0015, gradient norm = 0.0227, eval: [8.3 s]
# Iteration 127 fit: [20.7 s]: Recall = 0.3179, Jaccard score = 0.2325, loss = 0.0016, gradient norm = 0.0236, eval: [8.3 s]
# Iteration 128 fit: [20.7 s]: Recall = 0.3154, Jaccard score = 0.2302, loss = 0.0015, gradient norm = 0.0217, eval: [8.3 s]
# Iteration 129 fit: [20.7 s]: Recall = 0.3160, Jaccard score = 0.2307, loss = 0.0014, gradient norm = 0.0220, eval: [8.2 s]
# Iteration 130 fit: [20.7 s]: Recall = 0.3136, Jaccard score = 0.2286, loss = 0.0016, gradient norm = 0.0239, eval: [8.2 s]
# Iteration 131 fit: [20.6 s]: Recall = 0.3147, Jaccard score = 0.2296, loss = 0.0016, gradient norm = 0.0267, eval: [8.2 s]
# Iteration 132 fit: [20.7 s]: Recall = 0.3138, Jaccard score = 0.2288, loss = 0.0011, gradient norm = 0.0215, eval: [8.3 s]
# Iteration 133 fit: [21.0 s]: Recall = 0.3141, Jaccard score = 0.2291, loss = 0.0016, gradient norm = 0.0259, eval: [8.2 s]
# Iteration 134 fit: [20.7 s]: Recall = 0.3144, Jaccard score = 0.2293, loss = 0.0017, gradient norm = 0.0262, eval: [8.1 s]
# Iteration 135 fit: [20.7 s]: Recall = 0.3178, Jaccard score = 0.2324, loss = 0.0014, gradient norm = 0.0231, eval: [8.1 s]
# Iteration 136 fit: [20.7 s]: Recall = 0.3127, Jaccard score = 0.2278, loss = 0.0016, gradient norm = 0.0267, eval: [8.2 s]
# Iteration 137 fit: [20.7 s]: Recall = 0.3193, Jaccard score = 0.2337, loss = 0.0016, gradient norm = 0.0253, eval: [8.2 s]
# Iteration 138 fit: [20.7 s]: Recall = 0.3136, Jaccard score = 0.2286, loss = 0.0015, gradient norm = 0.0261, eval: [8.2 s]
# Iteration 139 fit: [20.7 s]: Recall = 0.3143, Jaccard score = 0.2292, loss = 0.0014, gradient norm = 0.0243, eval: [8.3 s]
# Iteration 140 fit: [20.7 s]: Recall = 0.3157, Jaccard score = 0.2305, loss = 0.0015, gradient norm = 0.0289, eval: [8.2 s]
# Iteration 141 fit: [20.7 s]: Recall = 0.3119, Jaccard score = 0.2270, loss = 0.0016, gradient norm = 0.0270, eval: [8.3 s]
# Iteration 142 fit: [20.7 s]: Recall = 0.3137, Jaccard score = 0.2287, loss = 0.0015, gradient norm = 0.0259, eval: [8.2 s]
# Iteration 143 fit: [20.7 s]: Recall = 0.3127, Jaccard score = 0.2278, loss = 0.0012, gradient norm = 0.0233, eval: [8.3 s]
# Iteration 144 fit: [20.7 s]: Recall = 0.3130, Jaccard score = 0.2281, loss = 0.0013, gradient norm = 0.0241, eval: [8.3 s]
# Iteration 145 fit: [20.9 s]: Recall = 0.3093, Jaccard score = 0.2248, loss = 0.0016, gradient norm = 0.0272, eval: [8.3 s]
# Iteration 146 fit: [20.7 s]: Recall = 0.3116, Jaccard score = 0.2268, loss = 0.0016, gradient norm = 0.0265, eval: [8.3 s]
# Iteration 147 fit: [20.7 s]: Recall = 0.3089, Jaccard score = 0.2244, loss = 0.0016, gradient norm = 0.0280, eval: [8.3 s]
# Iteration 148 fit: [20.9 s]: Recall = 0.3095, Jaccard score = 0.2249, loss = 0.0014, gradient norm = 0.0249, eval: [8.3 s]
# Iteration 149 fit: [20.7 s]: Recall = 0.3101, Jaccard score = 0.2255, loss = 0.0013, gradient norm = 0.0255, eval: [8.3 s]
# Iteration 150 fit: [20.7 s]: Recall = 0.3127, Jaccard score = 0.2278, loss = 0.0016, gradient norm = 0.0289, eval: [8.1 s]
# Iteration 151 fit: [20.7 s]: Recall = 0.3095, Jaccard score = 0.2249, loss = 0.0016, gradient norm = 0.0287, eval: [8.2 s]
# Iteration 152 fit: [20.7 s]: Recall = 0.3116, Jaccard score = 0.2268, loss = 0.0013, gradient norm = 0.0255, eval: [8.3 s]
# Iteration 153 fit: [20.8 s]: Recall = 0.3114, Jaccard score = 0.2266, loss = 0.0014, gradient norm = 0.0247, eval: [8.3 s]
# Iteration 154 fit: [20.7 s]: Recall = 0.3116, Jaccard score = 0.2268, loss = 0.0014, gradient norm = 0.0249, eval: [8.1 s]
# Iteration 155 fit: [20.8 s]: Recall = 0.3108, Jaccard score = 0.2261, loss = 0.0015, gradient norm = 0.0259, eval: [8.1 s]
# Iteration 156 fit: [20.7 s]: Recall = 0.3073, Jaccard score = 0.2230, loss = 0.0016, gradient norm = 0.0302, eval: [8.1 s]
# Iteration 157 fit: [20.7 s]: Recall = 0.3074, Jaccard score = 0.2231, loss = 0.0014, gradient norm = 0.0305, eval: [8.1 s]
# Iteration 158 fit: [20.7 s]: Recall = 0.3087, Jaccard score = 0.2242, loss = 0.0013, gradient norm = 0.0278, eval: [8.1 s]
# Iteration 159 fit: [20.8 s]: Recall = 0.3013, Jaccard score = 0.2177, loss = 0.0014, gradient norm = 0.0272, eval: [8.1 s]
# Iteration 160 fit: [20.7 s]: Recall = 0.3100, Jaccard score = 0.2254, loss = 0.0014, gradient norm = 0.0273, eval: [8.1 s]
# Iteration 161 fit: [20.7 s]: Recall = 0.3010, Jaccard score = 0.2174, loss = 0.0013, gradient norm = 0.0271, eval: [8.1 s]
# Iteration 162 fit: [20.7 s]: Recall = 0.3042, Jaccard score = 0.2202, loss = 0.0014, gradient norm = 0.0247, eval: [8.3 s]
# Iteration 163 fit: [20.8 s]: Recall = 0.3031, Jaccard score = 0.2192, loss = 0.0015, gradient norm = 0.0275, eval: [8.1 s]
# Iteration 164 fit: [20.7 s]: Recall = 0.3047, Jaccard score = 0.2207, loss = 0.0013, gradient norm = 0.0241, eval: [8.2 s]
# Iteration 165 fit: [20.7 s]: Recall = 0.3003, Jaccard score = 0.2168, loss = 0.0013, gradient norm = 0.0250, eval: [8.5 s]
# Iteration 166 fit: [20.7 s]: Recall = 0.3059, Jaccard score = 0.2218, loss = 0.0015, gradient norm = 0.0276, eval: [8.1 s]
# Iteration 167 fit: [20.7 s]: Recall = 0.3034, Jaccard score = 0.2195, loss = 0.0014, gradient norm = 0.0262, eval: [8.1 s]
# Iteration 168 fit: [20.7 s]: Recall = 0.2999, Jaccard score = 0.2164, loss = 0.0017, gradient norm = 0.0303, eval: [8.1 s]
# Iteration 169 fit: [20.7 s]: Recall = 0.2950, Jaccard score = 0.2121, loss = 0.0014, gradient norm = 0.0254, eval: [8.1 s]
# Iteration 170 fit: [20.7 s]: Recall = 0.2972, Jaccard score = 0.2141, loss = 0.0013, gradient norm = 0.0306, eval: [8.1 s]
# Iteration 171 fit: [20.9 s]: Recall = 0.2971, Jaccard score = 0.2140, loss = 0.0014, gradient norm = 0.0290, eval: [8.1 s]
# Iteration 172 fit: [20.7 s]: Recall = 0.2947, Jaccard score = 0.2119, loss = 0.0014, gradient norm = 0.0276, eval: [8.1 s]
# Iteration 173 fit: [20.7 s]: Recall = 0.2898, Jaccard score = 0.2077, loss = 0.0015, gradient norm = 0.0297, eval: [8.1 s]
# Iteration 174 fit: [20.3 s]: Recall = 0.2962, Jaccard score = 0.2132, loss = 0.0012, gradient norm = 0.0251, eval: [8.1 s]
# Iteration 175 fit: [20.8 s]: Recall = 0.2943, Jaccard score = 0.2115, loss = 0.0013, gradient norm = 0.0266, eval: [8.1 s]
# Iteration 176 fit: [20.7 s]: Recall = 0.2945, Jaccard score = 0.2117, loss = 0.0014, gradient norm = 0.0303, eval: [8.1 s]
# Iteration 177 fit: [20.7 s]: Recall = 0.2966, Jaccard score = 0.2135, loss = 0.0014, gradient norm = 0.0282, eval: [8.1 s]
# Iteration 178 fit: [20.7 s]: Recall = 0.2971, Jaccard score = 0.2140, loss = 0.0014, gradient norm = 0.0255, eval: [8.1 s]
# Iteration 179 fit: [20.8 s]: Recall = 0.2871, Jaccard score = 0.2053, loss = 0.0016, gradient norm = 0.0317, eval: [8.1 s]
# Iteration 180 fit: [20.7 s]: Recall = 0.2904, Jaccard score = 0.2082, loss = 0.0015, gradient norm = 0.0279, eval: [8.1 s]
# Iteration 181 fit: [20.6 s]: Recall = 0.2871, Jaccard score = 0.2053, loss = 0.0013, gradient norm = 0.0281, eval: [8.1 s]
# Iteration 182 fit: [20.7 s]: Recall = 0.2916, Jaccard score = 0.2092, loss = 0.0011, gradient norm = 0.0242, eval: [8.0 s]
# Iteration 183 fit: [20.8 s]: Recall = 0.2900, Jaccard score = 0.2079, loss = 0.0013, gradient norm = 0.0276, eval: [8.1 s]
# Iteration 184 fit: [20.7 s]: Recall = 0.2889, Jaccard score = 0.2069, loss = 0.0015, gradient norm = 0.0292, eval: [8.1 s]
# Iteration 185 fit: [20.9 s]: Recall = 0.2830, Jaccard score = 0.2018, loss = 0.0014, gradient norm = 0.0295, eval: [8.1 s]
# Iteration 186 fit: [20.8 s]: Recall = 0.2808, Jaccard score = 0.1999, loss = 0.0011, gradient norm = 0.0282, eval: [8.1 s]
# Iteration 187 fit: [20.8 s]: Recall = 0.2839, Jaccard score = 0.2025, loss = 0.0016, gradient norm = 0.0314, eval: [8.1 s]
# Iteration 188 fit: [20.8 s]: Recall = 0.2848, Jaccard score = 0.2033, loss = 0.0013, gradient norm = 0.0304, eval: [8.1 s]
# Iteration 189 fit: [20.8 s]: Recall = 0.2811, Jaccard score = 0.2002, loss = 0.0014, gradient norm = 0.0279, eval: [8.1 s]
# Iteration 190 fit: [20.8 s]: Recall = 0.2810, Jaccard score = 0.2001, loss = 0.0012, gradient norm = 0.0254, eval: [8.1 s]
# Iteration 191 fit: [20.8 s]: Recall = 0.2831, Jaccard score = 0.2019, loss = 0.0012, gradient norm = 0.0281, eval: [8.1 s]
# Iteration 192 fit: [20.8 s]: Recall = 0.2803, Jaccard score = 0.1995, loss = 0.0015, gradient norm = 0.0253, eval: [8.1 s]
# Iteration 193 fit: [20.8 s]: Recall = 0.2811, Jaccard score = 0.2002, loss = 0.0014, gradient norm = 0.0270, eval: [8.1 s]
# Iteration 194 fit: [20.8 s]: Recall = 0.2846, Jaccard score = 0.2031, loss = 0.0013, gradient norm = 0.0292, eval: [8.1 s]
# Iteration 195 fit: [20.9 s]: Recall = 0.2812, Jaccard score = 0.2003, loss = 0.0011, gradient norm = 0.0258, eval: [8.1 s]
# Iteration 196 fit: [20.8 s]: Recall = 0.2778, Jaccard score = 0.1974, loss = 0.0014, gradient norm = 0.0311, eval: [8.1 s]
# Iteration 197 fit: [20.9 s]: Recall = 0.2704, Jaccard score = 0.1911, loss = 0.0014, gradient norm = 0.0288, eval: [8.1 s]
# Iteration 198 fit: [20.9 s]: Recall = 0.2787, Jaccard score = 0.1981, loss = 0.0011, gradient norm = 0.0252, eval: [8.1 s]
# Iteration 199 fit: [20.9 s]: Recall = 0.2710, Jaccard score = 0.1916, loss = 0.0012, gradient norm = 0.0292, eval: [8.1 s]
# Iteration 200 fit: [20.8 s]: Recall = 0.2726, Jaccard score = 0.1929, loss = 0.0012, gradient norm = 0.0262, eval: [8.1 s]
# Iteration 201 fit: [20.9 s]: Recall = 0.2762, Jaccard score = 0.1960, loss = 0.0014, gradient norm = 0.0304, eval: [8.1 s]
# Iteration 202 fit: [20.8 s]: Recall = 0.2803, Jaccard score = 0.1995, loss = 0.0011, gradient norm = 0.0260, eval: [8.1 s]
# Iteration 203 fit: [20.9 s]: Recall = 0.2723, Jaccard score = 0.1927, loss = 0.0013, gradient norm = 0.0242, eval: [8.1 s]
# Iteration 204 fit: [20.8 s]: Recall = 0.2727, Jaccard score = 0.1930, loss = 0.0012, gradient norm = 0.0266, eval: [8.5 s]
# Iteration 205 fit: [20.9 s]: Recall = 0.2666, Jaccard score = 0.1879, loss = 0.0012, gradient norm = 0.0257, eval: [8.1 s]
# Iteration 206 fit: [20.9 s]: Recall = 0.2720, Jaccard score = 0.1924, loss = 0.0011, gradient norm = 0.0265, eval: [8.1 s]
# Iteration 207 fit: [20.9 s]: Recall = 0.2698, Jaccard score = 0.1906, loss = 0.0015, gradient norm = 0.0284, eval: [8.1 s]
# Iteration 208 fit: [20.8 s]: Recall = 0.2684, Jaccard score = 0.1895, loss = 0.0012, gradient norm = 0.0258, eval: [8.1 s]
# Iteration 209 fit: [20.9 s]: Recall = 0.2647, Jaccard score = 0.1863, loss = 0.0013, gradient norm = 0.0299, eval: [8.1 s]
# Iteration 210 fit: [20.9 s]: Recall = 0.2641, Jaccard score = 0.1858, loss = 0.0012, gradient norm = 0.0259, eval: [8.1 s]
# Iteration 211 fit: [20.9 s]: Recall = 0.2640, Jaccard score = 0.1857, loss = 0.0015, gradient norm = 0.0315, eval: [8.1 s]
# Iteration 212 fit: [21.0 s]: Recall = 0.2633, Jaccard score = 0.1852, loss = 0.0011, gradient norm = 0.0219, eval: [8.1 s]
# Iteration 213 fit: [20.9 s]: Recall = 0.2608, Jaccard score = 0.1831, loss = 0.0010, gradient norm = 0.0241, eval: [8.1 s]
# Iteration 214 fit: [20.9 s]: Recall = 0.2594, Jaccard score = 0.1819, loss = 0.0012, gradient norm = 0.0231, eval: [8.1 s]
# Iteration 215 fit: [20.9 s]: Recall = 0.2654, Jaccard score = 0.1869, loss = 0.0013, gradient norm = 0.0275, eval: [8.1 s]
# Iteration 216 fit: [20.9 s]: Recall = 0.2653, Jaccard score = 0.1868, loss = 0.0014, gradient norm = 0.0291, eval: [8.1 s]
# Iteration 217 fit: [20.9 s]: Recall = 0.2615, Jaccard score = 0.1836, loss = 0.0010, gradient norm = 0.0242, eval: [8.1 s]
# Iteration 218 fit: [20.9 s]: Recall = 0.2542, Jaccard score = 0.1776, loss = 0.0011, gradient norm = 0.0240, eval: [8.1 s]
# Iteration 219 fit: [20.9 s]: Recall = 0.2577, Jaccard score = 0.1805, loss = 0.0014, gradient norm = 0.0288, eval: [8.1 s]
# Iteration 220 fit: [20.9 s]: Recall = 0.2563, Jaccard score = 0.1794, loss = 0.0014, gradient norm = 0.0300, eval: [8.1 s]
# Iteration 221 fit: [20.9 s]: Recall = 0.2621, Jaccard score = 0.1841, loss = 0.0013, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 222 fit: [20.9 s]: Recall = 0.2553, Jaccard score = 0.1785, loss = 0.0010, gradient norm = 0.0266, eval: [8.1 s]
# Iteration 223 fit: [20.9 s]: Recall = 0.2560, Jaccard score = 0.1791, loss = 0.0012, gradient norm = 0.0272, eval: [8.1 s]
# Iteration 224 fit: [21.1 s]: Recall = 0.2594, Jaccard score = 0.1819, loss = 0.0013, gradient norm = 0.0282, eval: [8.1 s]
# Iteration 225 fit: [20.9 s]: Recall = 0.2526, Jaccard score = 0.1763, loss = 0.0012, gradient norm = 0.0271, eval: [8.1 s]
# Iteration 226 fit: [21.0 s]: Recall = 0.2551, Jaccard score = 0.1783, loss = 0.0015, gradient norm = 0.0284, eval: [8.1 s]
# Iteration 227 fit: [21.0 s]: Recall = 0.2553, Jaccard score = 0.1785, loss = 0.0014, gradient norm = 0.0297, eval: [8.1 s]
# Iteration 228 fit: [20.9 s]: Recall = 0.2544, Jaccard score = 0.1778, loss = 0.0013, gradient norm = 0.0250, eval: [8.1 s]
# Iteration 229 fit: [21.0 s]: Recall = 0.2573, Jaccard score = 0.1801, loss = 0.0011, gradient norm = 0.0275, eval: [8.1 s]
# Iteration 230 fit: [21.0 s]: Recall = 0.2513, Jaccard score = 0.1752, loss = 0.0013, gradient norm = 0.0264, eval: [8.1 s]
# Iteration 231 fit: [20.9 s]: Recall = 0.2505, Jaccard score = 0.1746, loss = 0.0012, gradient norm = 0.0265, eval: [8.1 s]
# Iteration 232 fit: [20.9 s]: Recall = 0.2504, Jaccard score = 0.1745, loss = 0.0012, gradient norm = 0.0269, eval: [8.1 s]
# Iteration 233 fit: [20.9 s]: Recall = 0.2481, Jaccard score = 0.1726, loss = 0.0012, gradient norm = 0.0252, eval: [8.1 s]
# Iteration 234 fit: [21.0 s]: Recall = 0.2479, Jaccard score = 0.1724, loss = 0.0009, gradient norm = 0.0272, eval: [8.1 s]
# Iteration 235 fit: [21.0 s]: Recall = 0.2479, Jaccard score = 0.1724, loss = 0.0012, gradient norm = 0.0258, eval: [8.1 s]
# Iteration 236 fit: [21.1 s]: Recall = 0.2479, Jaccard score = 0.1724, loss = 0.0012, gradient norm = 0.0229, eval: [8.1 s]
# Iteration 237 fit: [21.0 s]: Recall = 0.2480, Jaccard score = 0.1725, loss = 0.0011, gradient norm = 0.0242, eval: [8.1 s]
# Iteration 238 fit: [21.0 s]: Recall = 0.2399, Jaccard score = 0.1660, loss = 0.0013, gradient norm = 0.0242, eval: [8.1 s]
# Iteration 239 fit: [21.0 s]: Recall = 0.2455, Jaccard score = 0.1705, loss = 0.0012, gradient norm = 0.0270, eval: [8.1 s]
# Iteration 240 fit: [21.0 s]: Recall = 0.2390, Jaccard score = 0.1652, loss = 0.0010, gradient norm = 0.0233, eval: [8.1 s]
# Iteration 241 fit: [21.0 s]: Recall = 0.2472, Jaccard score = 0.1719, loss = 0.0013, gradient norm = 0.0274, eval: [8.1 s]
# Iteration 242 fit: [21.0 s]: Recall = 0.2400, Jaccard score = 0.1660, loss = 0.0010, gradient norm = 0.0241, eval: [8.1 s]
# Iteration 243 fit: [21.0 s]: Recall = 0.2461, Jaccard score = 0.1710, loss = 0.0013, gradient norm = 0.0253, eval: [8.1 s]
# Iteration 244 fit: [21.0 s]: Recall = 0.2423, Jaccard score = 0.1679, loss = 0.0012, gradient norm = 0.0263, eval: [8.1 s]
# Iteration 245 fit: [21.0 s]: Recall = 0.2411, Jaccard score = 0.1670, loss = 0.0013, gradient norm = 0.0239, eval: [8.1 s]
# Iteration 246 fit: [21.0 s]: Recall = 0.2401, Jaccard score = 0.1661, loss = 0.0012, gradient norm = 0.0303, eval: [8.1 s]
# Iteration 247 fit: [21.0 s]: Recall = 0.2333, Jaccard score = 0.1606, loss = 0.0012, gradient norm = 0.0229, eval: [8.1 s]
# Iteration 248 fit: [21.0 s]: Recall = 0.2337, Jaccard score = 0.1610, loss = 0.0011, gradient norm = 0.0220, eval: [8.1 s]
# Iteration 249 fit: [21.0 s]: Recall = 0.2309, Jaccard score = 0.1587, loss = 0.0010, gradient norm = 0.0262, eval: [8.1 s]
# Iteration 250 fit: [21.0 s]: Recall = 0.2368, Jaccard score = 0.1635, loss = 0.0011, gradient norm = 0.0263, eval: [8.1 s]
# Iteration 251 fit: [21.0 s]: Recall = 0.2328, Jaccard score = 0.1603, loss = 0.0010, gradient norm = 0.0229, eval: [8.1 s]
# Iteration 252 fit: [21.0 s]: Recall = 0.2258, Jaccard score = 0.1547, loss = 0.0012, gradient norm = 0.0282, eval: [8.6 s]
# Iteration 253 fit: [21.0 s]: Recall = 0.2264, Jaccard score = 0.1552, loss = 0.0010, gradient norm = 0.0196, eval: [8.1 s]
# Iteration 254 fit: [21.0 s]: Recall = 0.2354, Jaccard score = 0.1624, loss = 0.0010, gradient norm = 0.0209, eval: [8.1 s]
# Iteration 255 fit: [21.0 s]: Recall = 0.2386, Jaccard score = 0.1649, loss = 0.0012, gradient norm = 0.0227, eval: [8.1 s]
# Iteration 256 fit: [21.0 s]: Recall = 0.2279, Jaccard score = 0.1564, loss = 0.0011, gradient norm = 0.0264, eval: [8.1 s]
# Iteration 257 fit: [21.0 s]: Recall = 0.2279, Jaccard score = 0.1564, loss = 0.0011, gradient norm = 0.0211, eval: [8.1 s]
# Iteration 258 fit: [21.0 s]: Recall = 0.2317, Jaccard score = 0.1594, loss = 0.0007, gradient norm = 0.0188, eval: [8.1 s]
# Iteration 259 fit: [21.0 s]: Recall = 0.2318, Jaccard score = 0.1594, loss = 0.0012, gradient norm = 0.0276, eval: [8.1 s]
# Iteration 260 fit: [21.0 s]: Recall = 0.2310, Jaccard score = 0.1588, loss = 0.0012, gradient norm = 0.0233, eval: [8.1 s]
# Iteration 261 fit: [21.0 s]: Recall = 0.2224, Jaccard score = 0.1520, loss = 0.0009, gradient norm = 0.0215, eval: [8.1 s]
# Iteration 262 fit: [21.0 s]: Recall = 0.2271, Jaccard score = 0.1557, loss = 0.0013, gradient norm = 0.0257, eval: [8.1 s]
# Iteration 263 fit: [21.0 s]: Recall = 0.2245, Jaccard score = 0.1536, loss = 0.0013, gradient norm = 0.0234, eval: [8.1 s]
# Iteration 264 fit: [21.0 s]: Recall = 0.2306, Jaccard score = 0.1585, loss = 0.0009, gradient norm = 0.0267, eval: [8.1 s]
# Iteration 265 fit: [21.0 s]: Recall = 0.2250, Jaccard score = 0.1541, loss = 0.0010, gradient norm = 0.0208, eval: [8.1 s]
# Iteration 266 fit: [21.0 s]: Recall = 0.2213, Jaccard score = 0.1511, loss = 0.0010, gradient norm = 0.0230, eval: [8.1 s]
# Iteration 267 fit: [21.0 s]: Recall = 0.2222, Jaccard score = 0.1518, loss = 0.0010, gradient norm = 0.0200, eval: [8.0 s]
# Iteration 268 fit: [21.0 s]: Recall = 0.2197, Jaccard score = 0.1499, loss = 0.0011, gradient norm = 0.0232, eval: [8.1 s]
# Iteration 269 fit: [21.0 s]: Recall = 0.2160, Jaccard score = 0.1470, loss = 0.0011, gradient norm = 0.0241, eval: [8.1 s]
# Iteration 270 fit: [21.0 s]: Recall = 0.2164, Jaccard score = 0.1473, loss = 0.0010, gradient norm = 0.0249, eval: [8.1 s]
# Iteration 271 fit: [21.0 s]: Recall = 0.2231, Jaccard score = 0.1526, loss = 0.0011, gradient norm = 0.0257, eval: [8.1 s]
# Iteration 272 fit: [21.2 s]: Recall = 0.2213, Jaccard score = 0.1511, loss = 0.0009, gradient norm = 0.0189, eval: [8.1 s]
# Iteration 273 fit: [21.3 s]: Recall = 0.2116, Jaccard score = 0.1435, loss = 0.0009, gradient norm = 0.0243, eval: [8.1 s]
# Iteration 274 fit: [21.1 s]: Recall = 0.2152, Jaccard score = 0.1464, loss = 0.0010, gradient norm = 0.0262, eval: [8.1 s]
# Iteration 275 fit: [21.0 s]: Recall = 0.2168, Jaccard score = 0.1476, loss = 0.0010, gradient norm = 0.0240, eval: [8.1 s]
# Iteration 276 fit: [21.1 s]: Recall = 0.2191, Jaccard score = 0.1494, loss = 0.0011, gradient norm = 0.0219, eval: [8.1 s]
# Iteration 277 fit: [21.1 s]: Recall = 0.2164, Jaccard score = 0.1473, loss = 0.0009, gradient norm = 0.0212, eval: [8.0 s]
# Iteration 278 fit: [21.0 s]: Recall = 0.2154, Jaccard score = 0.1466, loss = 0.0012, gradient norm = 0.0257, eval: [8.0 s]
# Iteration 279 fit: [21.1 s]: Recall = 0.2189, Jaccard score = 0.1492, loss = 0.0011, gradient norm = 0.0234, eval: [8.0 s]
# Iteration 280 fit: [20.5 s]: Recall = 0.2182, Jaccard score = 0.1487, loss = 0.0011, gradient norm = 0.0219, eval: [8.2 s]
# Iteration 281 fit: [21.0 s]: Recall = 0.2143, Jaccard score = 0.1457, loss = 0.0011, gradient norm = 0.0215, eval: [8.1 s]
# Iteration 282 fit: [20.6 s]: Recall = 0.2166, Jaccard score = 0.1475, loss = 0.0010, gradient norm = 0.0220, eval: [8.1 s]
# End. Best Iteration 137:  Recall = 0.3193, Jaccard score = 0.2337. 
# The best NeuMF model has been saved to Pretrain/_GMF_94_[64,32,16,8]_1566485130.h5
# Model test performed 
# Recall score: 0.12240571301048873     Jaccard score: 0.07912008654886404

# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566509105.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566509105.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 1000)         1095000     concatenate_1[0][0]              
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 1000)         4000        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 1000)         0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent2 (Dens (None, 96)           96096       leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn2 (B (None, 96)           384         user_feature_item_latent2[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_2 (LeakyReLU)       (None, 96)           0           user_feature_item_latent_bn2[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_2[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_2[0][0]              
# ==================================================================================================
# Total params: 3,263,671
# Trainable params: 3,261,479
# Non-trainable params: 2,192
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0290, Jaccard score = 0.0175
# Iteration 0 fit: [24.8 s]: Recall = 0.2432, Jaccard score = 0.1686, loss = 0.4151, gradient norm = 0.3324, eval: [8.6 s]
# Iteration 1 fit: [24.4 s]: Recall = 0.2645, Jaccard score = 0.1861, loss = 0.3773, gradient norm = 0.2927, eval: [8.6 s]
# Iteration 2 fit: [23.8 s]: Recall = 0.2782, Jaccard score = 0.1977, loss = 0.3579, gradient norm = 0.2813, eval: [8.6 s]
# Iteration 3 fit: [24.3 s]: Recall = 0.2778, Jaccard score = 0.1974, loss = 0.3427, gradient norm = 0.2775, eval: [8.8 s]
# Iteration 4 fit: [24.3 s]: Recall = 0.2830, Jaccard score = 0.2018, loss = 0.3277, gradient norm = 0.2761, eval: [8.6 s]
# Iteration 5 fit: [24.4 s]: Recall = 0.2770, Jaccard score = 0.1967, loss = 0.3117, gradient norm = 0.2785, eval: [8.6 s]
# Iteration 6 fit: [24.2 s]: Recall = 0.2791, Jaccard score = 0.1984, loss = 0.2947, gradient norm = 0.2813, eval: [8.7 s]
# Iteration 7 fit: [24.5 s]: Recall = 0.2660, Jaccard score = 0.1874, loss = 0.2751, gradient norm = 0.2849, eval: [8.7 s]
# Iteration 8 fit: [24.4 s]: Recall = 0.2691, Jaccard score = 0.1900, loss = 0.2549, gradient norm = 0.2884, eval: [8.7 s]
# Iteration 9 fit: [24.4 s]: Recall = 0.2592, Jaccard score = 0.1817, loss = 0.2328, gradient norm = 0.2920, eval: [8.7 s]
# Iteration 10 fit: [24.4 s]: Recall = 0.2493, Jaccard score = 0.1736, loss = 0.2132, gradient norm = 0.2929, eval: [8.7 s]
# Iteration 11 fit: [24.4 s]: Recall = 0.2498, Jaccard score = 0.1740, loss = 0.1921, gradient norm = 0.2924, eval: [8.7 s]
# Iteration 12 fit: [24.2 s]: Recall = 0.2490, Jaccard score = 0.1734, loss = 0.1738, gradient norm = 0.2904, eval: [8.6 s]
# Iteration 13 fit: [24.3 s]: Recall = 0.2369, Jaccard score = 0.1636, loss = 0.1545, gradient norm = 0.2847, eval: [8.7 s]
# Iteration 14 fit: [24.1 s]: Recall = 0.2429, Jaccard score = 0.1684, loss = 0.1385, gradient norm = 0.2790, eval: [8.6 s]
# Iteration 15 fit: [24.4 s]: Recall = 0.2350, Jaccard score = 0.1620, loss = 0.1243, gradient norm = 0.2706, eval: [8.6 s]
# Iteration 16 fit: [24.4 s]: Recall = 0.2358, Jaccard score = 0.1626, loss = 0.1110, gradient norm = 0.2611, eval: [8.6 s]
# Iteration 17 fit: [24.3 s]: Recall = 0.2358, Jaccard score = 0.1626, loss = 0.0990, gradient norm = 0.2499, eval: [8.6 s]
# Iteration 18 fit: [24.3 s]: Recall = 0.2381, Jaccard score = 0.1645, loss = 0.0901, gradient norm = 0.2406, eval: [8.6 s]
# Iteration 19 fit: [24.4 s]: Recall = 0.2344, Jaccard score = 0.1615, loss = 0.0813, gradient norm = 0.2293, eval: [8.7 s]
# Iteration 20 fit: [24.3 s]: Recall = 0.2334, Jaccard score = 0.1607, loss = 0.0746, gradient norm = 0.2206, eval: [8.6 s]
# Iteration 21 fit: [24.5 s]: Recall = 0.2304, Jaccard score = 0.1584, loss = 0.0665, gradient norm = 0.2084, eval: [8.6 s]
# Iteration 22 fit: [24.1 s]: Recall = 0.2341, Jaccard score = 0.1613, loss = 0.0615, gradient norm = 0.1994, eval: [8.6 s]
# Iteration 23 fit: [24.4 s]: Recall = 0.2321, Jaccard score = 0.1597, loss = 0.0571, gradient norm = 0.1907, eval: [8.7 s]
# Iteration 24 fit: [24.0 s]: Recall = 0.2373, Jaccard score = 0.1638, loss = 0.0515, gradient norm = 0.1807, eval: [8.6 s]
# Iteration 25 fit: [24.5 s]: Recall = 0.2297, Jaccard score = 0.1578, loss = 0.0473, gradient norm = 0.1718, eval: [8.6 s]
# Iteration 26 fit: [24.3 s]: Recall = 0.2334, Jaccard score = 0.1607, loss = 0.0434, gradient norm = 0.1632, eval: [8.6 s]
# Iteration 27 fit: [24.4 s]: Recall = 0.2351, Jaccard score = 0.1621, loss = 0.0409, gradient norm = 0.1579, eval: [8.6 s]
# Iteration 28 fit: [24.4 s]: Recall = 0.2386, Jaccard score = 0.1649, loss = 0.0380, gradient norm = 0.1498, eval: [8.8 s]
# Iteration 29 fit: [24.2 s]: Recall = 0.2429, Jaccard score = 0.1684, loss = 0.0356, gradient norm = 0.1432, eval: [8.6 s]
# Iteration 30 fit: [24.5 s]: Recall = 0.2399, Jaccard score = 0.1660, loss = 0.0328, gradient norm = 0.1370, eval: [8.7 s]
# Iteration 31 fit: [24.4 s]: Recall = 0.2377, Jaccard score = 0.1642, loss = 0.0308, gradient norm = 0.1312, eval: [8.6 s]
# Iteration 32 fit: [24.2 s]: Recall = 0.2401, Jaccard score = 0.1661, loss = 0.0294, gradient norm = 0.1263, eval: [8.6 s]
# Iteration 33 fit: [24.3 s]: Recall = 0.2370, Jaccard score = 0.1637, loss = 0.0264, gradient norm = 0.1192, eval: [8.6 s]
# Iteration 34 fit: [24.4 s]: Recall = 0.2366, Jaccard score = 0.1633, loss = 0.0259, gradient norm = 0.1171, eval: [8.6 s]
# Iteration 35 fit: [24.2 s]: Recall = 0.2397, Jaccard score = 0.1658, loss = 0.0241, gradient norm = 0.1115, eval: [8.6 s]
# Iteration 36 fit: [24.4 s]: Recall = 0.2357, Jaccard score = 0.1626, loss = 0.0225, gradient norm = 0.1063, eval: [8.6 s]
# Iteration 37 fit: [24.4 s]: Recall = 0.2332, Jaccard score = 0.1605, loss = 0.0215, gradient norm = 0.1027, eval: [8.7 s]
# Iteration 38 fit: [24.5 s]: Recall = 0.2369, Jaccard score = 0.1636, loss = 0.0202, gradient norm = 0.0996, eval: [8.6 s]
# Iteration 39 fit: [24.5 s]: Recall = 0.2368, Jaccard score = 0.1635, loss = 0.0187, gradient norm = 0.0939, eval: [8.7 s]
# Iteration 40 fit: [24.6 s]: Recall = 0.2409, Jaccard score = 0.1668, loss = 0.0176, gradient norm = 0.0907, eval: [8.6 s]
# Iteration 41 fit: [24.4 s]: Recall = 0.2375, Jaccard score = 0.1640, loss = 0.0171, gradient norm = 0.0883, eval: [8.7 s]
# Iteration 42 fit: [24.2 s]: Recall = 0.2368, Jaccard score = 0.1635, loss = 0.0158, gradient norm = 0.0838, eval: [8.6 s]
# Iteration 43 fit: [24.5 s]: Recall = 0.2402, Jaccard score = 0.1662, loss = 0.0152, gradient norm = 0.0823, eval: [8.6 s]
# Iteration 44 fit: [24.2 s]: Recall = 0.2437, Jaccard score = 0.1690, loss = 0.0144, gradient norm = 0.0781, eval: [8.6 s]
# Iteration 45 fit: [24.4 s]: Recall = 0.2406, Jaccard score = 0.1665, loss = 0.0138, gradient norm = 0.0767, eval: [8.6 s]
# Iteration 46 fit: [24.3 s]: Recall = 0.2401, Jaccard score = 0.1661, loss = 0.0133, gradient norm = 0.0741, eval: [8.6 s]
# Iteration 47 fit: [24.4 s]: Recall = 0.2360, Jaccard score = 0.1628, loss = 0.0125, gradient norm = 0.0722, eval: [8.7 s]
# Iteration 48 fit: [24.8 s]: Recall = 0.2383, Jaccard score = 0.1647, loss = 0.0120, gradient norm = 0.0698, eval: [8.6 s]
# Iteration 49 fit: [24.5 s]: Recall = 0.2353, Jaccard score = 0.1623, loss = 0.0112, gradient norm = 0.0666, eval: [8.6 s]
# Iteration 50 fit: [24.5 s]: Recall = 0.2408, Jaccard score = 0.1667, loss = 0.0110, gradient norm = 0.0656, eval: [8.6 s]
# Iteration 51 fit: [24.6 s]: Recall = 0.2383, Jaccard score = 0.1647, loss = 0.0104, gradient norm = 0.0624, eval: [8.7 s]
# Iteration 52 fit: [24.4 s]: Recall = 0.2361, Jaccard score = 0.1629, loss = 0.0102, gradient norm = 0.0618, eval: [8.6 s]
# Iteration 53 fit: [24.3 s]: Recall = 0.2386, Jaccard score = 0.1649, loss = 0.0092, gradient norm = 0.0587, eval: [8.7 s]
# Iteration 54 fit: [24.5 s]: Recall = 0.2360, Jaccard score = 0.1628, loss = 0.0092, gradient norm = 0.0575, eval: [8.6 s]
# Iteration 55 fit: [24.6 s]: Recall = 0.2398, Jaccard score = 0.1659, loss = 0.0085, gradient norm = 0.0549, eval: [8.7 s]
# Iteration 56 fit: [24.5 s]: Recall = 0.2417, Jaccard score = 0.1674, loss = 0.0084, gradient norm = 0.0549, eval: [8.6 s]
# Iteration 57 fit: [24.5 s]: Recall = 0.2407, Jaccard score = 0.1666, loss = 0.0082, gradient norm = 0.0523, eval: [8.7 s]
# Iteration 58 fit: [24.3 s]: Recall = 0.2449, Jaccard score = 0.1700, loss = 0.0077, gradient norm = 0.0523, eval: [8.6 s]
# Iteration 59 fit: [24.4 s]: Recall = 0.2374, Jaccard score = 0.1639, loss = 0.0074, gradient norm = 0.0504, eval: [8.6 s]
# Iteration 60 fit: [24.3 s]: Recall = 0.2450, Jaccard score = 0.1701, loss = 0.0070, gradient norm = 0.0486, eval: [8.7 s]
# Iteration 61 fit: [24.6 s]: Recall = 0.2459, Jaccard score = 0.1709, loss = 0.0069, gradient norm = 0.0473, eval: [8.6 s]
# Iteration 62 fit: [24.6 s]: Recall = 0.2430, Jaccard score = 0.1684, loss = 0.0066, gradient norm = 0.0463, eval: [8.7 s]
# Iteration 63 fit: [24.6 s]: Recall = 0.2448, Jaccard score = 0.1699, loss = 0.0063, gradient norm = 0.0453, eval: [8.6 s]
# Iteration 64 fit: [24.1 s]: Recall = 0.2421, Jaccard score = 0.1677, loss = 0.0065, gradient norm = 0.0453, eval: [8.6 s]
# Iteration 65 fit: [24.2 s]: Recall = 0.2466, Jaccard score = 0.1714, loss = 0.0058, gradient norm = 0.0425, eval: [8.7 s]
# Iteration 66 fit: [24.1 s]: Recall = 0.2418, Jaccard score = 0.1675, loss = 0.0057, gradient norm = 0.0427, eval: [8.7 s]
# Iteration 67 fit: [24.4 s]: Recall = 0.2449, Jaccard score = 0.1700, loss = 0.0055, gradient norm = 0.0417, eval: [8.6 s]
# Iteration 68 fit: [24.3 s]: Recall = 0.2434, Jaccard score = 0.1688, loss = 0.0050, gradient norm = 0.0383, eval: [8.6 s]
# Iteration 69 fit: [24.6 s]: Recall = 0.2488, Jaccard score = 0.1732, loss = 0.0053, gradient norm = 0.0398, eval: [8.7 s]
# Iteration 70 fit: [24.3 s]: Recall = 0.2455, Jaccard score = 0.1705, loss = 0.0049, gradient norm = 0.0381, eval: [8.7 s]
# Iteration 71 fit: [24.7 s]: Recall = 0.2480, Jaccard score = 0.1725, loss = 0.0046, gradient norm = 0.0368, eval: [8.6 s]
# Iteration 72 fit: [24.5 s]: Recall = 0.2462, Jaccard score = 0.1710, loss = 0.0046, gradient norm = 0.0368, eval: [8.7 s]
# Iteration 73 fit: [24.3 s]: Recall = 0.2464, Jaccard score = 0.1712, loss = 0.0045, gradient norm = 0.0352, eval: [8.6 s]
# Iteration 74 fit: [24.4 s]: Recall = 0.2477, Jaccard score = 0.1723, loss = 0.0044, gradient norm = 0.0355, eval: [8.6 s]
# Iteration 75 fit: [24.6 s]: Recall = 0.2489, Jaccard score = 0.1733, loss = 0.0040, gradient norm = 0.0339, eval: [8.6 s]
# Iteration 76 fit: [24.5 s]: Recall = 0.2543, Jaccard score = 0.1777, loss = 0.0045, gradient norm = 0.0356, eval: [8.7 s]
# Iteration 77 fit: [24.6 s]: Recall = 0.2486, Jaccard score = 0.1730, loss = 0.0042, gradient norm = 0.0341, eval: [8.7 s]
# Iteration 78 fit: [24.6 s]: Recall = 0.2503, Jaccard score = 0.1744, loss = 0.0040, gradient norm = 0.0331, eval: [8.6 s]
# Iteration 79 fit: [24.4 s]: Recall = 0.2480, Jaccard score = 0.1725, loss = 0.0041, gradient norm = 0.0354, eval: [8.7 s]
# Iteration 80 fit: [24.4 s]: Recall = 0.2448, Jaccard score = 0.1699, loss = 0.0040, gradient norm = 0.0335, eval: [8.6 s]
# Iteration 81 fit: [24.4 s]: Recall = 0.2496, Jaccard score = 0.1738, loss = 0.0037, gradient norm = 0.0316, eval: [8.6 s]
# Iteration 82 fit: [24.5 s]: Recall = 0.2447, Jaccard score = 0.1698, loss = 0.0035, gradient norm = 0.0315, eval: [8.6 s]
# Iteration 83 fit: [24.2 s]: Recall = 0.2554, Jaccard score = 0.1786, loss = 0.0033, gradient norm = 0.0303, eval: [8.6 s]
# Iteration 84 fit: [24.3 s]: Recall = 0.2505, Jaccard score = 0.1746, loss = 0.0035, gradient norm = 0.0305, eval: [8.6 s]
# Iteration 85 fit: [24.6 s]: Recall = 0.2538, Jaccard score = 0.1773, loss = 0.0034, gradient norm = 0.0299, eval: [8.6 s]
# Iteration 86 fit: [24.5 s]: Recall = 0.2522, Jaccard score = 0.1760, loss = 0.0033, gradient norm = 0.0296, eval: [8.6 s]
# Iteration 87 fit: [24.6 s]: Recall = 0.2463, Jaccard score = 0.1711, loss = 0.0031, gradient norm = 0.0280, eval: [8.7 s]
# Iteration 88 fit: [24.5 s]: Recall = 0.2531, Jaccard score = 0.1767, loss = 0.0032, gradient norm = 0.0283, eval: [8.6 s]
# Iteration 89 fit: [24.2 s]: Recall = 0.2551, Jaccard score = 0.1783, loss = 0.0032, gradient norm = 0.0291, eval: [8.5 s]
# Iteration 90 fit: [24.2 s]: Recall = 0.2537, Jaccard score = 0.1772, loss = 0.0029, gradient norm = 0.0278, eval: [8.6 s]
# Iteration 91 fit: [24.2 s]: Recall = 0.2565, Jaccard score = 0.1795, loss = 0.0031, gradient norm = 0.0272, eval: [8.6 s]
# Iteration 92 fit: [24.2 s]: Recall = 0.2560, Jaccard score = 0.1791, loss = 0.0030, gradient norm = 0.0288, eval: [8.5 s]
# Iteration 93 fit: [24.7 s]: Recall = 0.2534, Jaccard score = 0.1769, loss = 0.0027, gradient norm = 0.0276, eval: [8.6 s]
# Iteration 94 fit: [24.6 s]: Recall = 0.2560, Jaccard score = 0.1791, loss = 0.0027, gradient norm = 0.0263, eval: [8.6 s]
# Iteration 95 fit: [24.7 s]: Recall = 0.2571, Jaccard score = 0.1800, loss = 0.0028, gradient norm = 0.0266, eval: [8.7 s]
# Iteration 96 fit: [24.9 s]: Recall = 0.2551, Jaccard score = 0.1783, loss = 0.0022, gradient norm = 0.0247, eval: [8.5 s]
# Iteration 97 fit: [24.5 s]: Recall = 0.2574, Jaccard score = 0.1802, loss = 0.0025, gradient norm = 0.0255, eval: [8.7 s]
# Iteration 98 fit: [24.7 s]: Recall = 0.2549, Jaccard score = 0.1782, loss = 0.0024, gradient norm = 0.0242, eval: [8.7 s]
# Iteration 99 fit: [24.5 s]: Recall = 0.2600, Jaccard score = 0.1824, loss = 0.0026, gradient norm = 0.0263, eval: [8.6 s]
# Iteration 100 fit: [24.6 s]: Recall = 0.2570, Jaccard score = 0.1799, loss = 0.0025, gradient norm = 0.0259, eval: [8.6 s]
# Iteration 101 fit: [24.7 s]: Recall = 0.2563, Jaccard score = 0.1794, loss = 0.0024, gradient norm = 0.0254, eval: [8.6 s]
# Iteration 102 fit: [24.4 s]: Recall = 0.2606, Jaccard score = 0.1829, loss = 0.0024, gradient norm = 0.0251, eval: [8.6 s]
# Iteration 103 fit: [24.7 s]: Recall = 0.2626, Jaccard score = 0.1846, loss = 0.0023, gradient norm = 0.0251, eval: [8.7 s]
# Iteration 104 fit: [24.7 s]: Recall = 0.2634, Jaccard score = 0.1853, loss = 0.0022, gradient norm = 0.0246, eval: [8.6 s]
# Iteration 105 fit: [24.5 s]: Recall = 0.2648, Jaccard score = 0.1864, loss = 0.0022, gradient norm = 0.0243, eval: [8.6 s]
# Iteration 106 fit: [24.7 s]: Recall = 0.2607, Jaccard score = 0.1830, loss = 0.0021, gradient norm = 0.0228, eval: [8.6 s]
# Iteration 107 fit: [24.7 s]: Recall = 0.2627, Jaccard score = 0.1847, loss = 0.0020, gradient norm = 0.0222, eval: [8.7 s]
# Iteration 108 fit: [24.6 s]: Recall = 0.2630, Jaccard score = 0.1849, loss = 0.0020, gradient norm = 0.0225, eval: [8.6 s]
# Iteration 109 fit: [24.2 s]: Recall = 0.2635, Jaccard score = 0.1853, loss = 0.0020, gradient norm = 0.0222, eval: [8.6 s]
# Iteration 110 fit: [24.7 s]: Recall = 0.2663, Jaccard score = 0.1876, loss = 0.0021, gradient norm = 0.0236, eval: [8.6 s]
# Iteration 111 fit: [24.7 s]: Recall = 0.2668, Jaccard score = 0.1881, loss = 0.0019, gradient norm = 0.0229, eval: [8.7 s]
# Iteration 112 fit: [24.6 s]: Recall = 0.2589, Jaccard score = 0.1815, loss = 0.0020, gradient norm = 0.0232, eval: [8.6 s]
# Iteration 113 fit: [24.7 s]: Recall = 0.2614, Jaccard score = 0.1835, loss = 0.0020, gradient norm = 0.0236, eval: [8.6 s]
# Iteration 114 fit: [24.7 s]: Recall = 0.2635, Jaccard score = 0.1853, loss = 0.0018, gradient norm = 0.0211, eval: [8.6 s]
# Iteration 115 fit: [24.6 s]: Recall = 0.2627, Jaccard score = 0.1847, loss = 0.0020, gradient norm = 0.0236, eval: [8.6 s]
# Iteration 116 fit: [24.5 s]: Recall = 0.2667, Jaccard score = 0.1880, loss = 0.0019, gradient norm = 0.0230, eval: [8.6 s]
# Iteration 117 fit: [24.7 s]: Recall = 0.2648, Jaccard score = 0.1864, loss = 0.0020, gradient norm = 0.0224, eval: [8.6 s]
# Iteration 118 fit: [24.5 s]: Recall = 0.2617, Jaccard score = 0.1838, loss = 0.0018, gradient norm = 0.0214, eval: [8.6 s]
# Iteration 119 fit: [24.7 s]: Recall = 0.2692, Jaccard score = 0.1901, loss = 0.0018, gradient norm = 0.0222, eval: [8.7 s]
# Iteration 120 fit: [25.2 s]: Recall = 0.2718, Jaccard score = 0.1922, loss = 0.0018, gradient norm = 0.0210, eval: [8.6 s]
# Iteration 121 fit: [24.6 s]: Recall = 0.2703, Jaccard score = 0.1910, loss = 0.0017, gradient norm = 0.0214, eval: [8.6 s]
# Iteration 122 fit: [24.5 s]: Recall = 0.2721, Jaccard score = 0.1925, loss = 0.0020, gradient norm = 0.0218, eval: [8.7 s]
# Iteration 123 fit: [24.7 s]: Recall = 0.2706, Jaccard score = 0.1913, loss = 0.0016, gradient norm = 0.0198, eval: [8.6 s]
# Iteration 124 fit: [24.8 s]: Recall = 0.2699, Jaccard score = 0.1907, loss = 0.0013, gradient norm = 0.0202, eval: [8.6 s]
# Iteration 125 fit: [24.7 s]: Recall = 0.2640, Jaccard score = 0.1857, loss = 0.0017, gradient norm = 0.0210, eval: [8.6 s]
# Iteration 126 fit: [24.7 s]: Recall = 0.2714, Jaccard score = 0.1920, loss = 0.0017, gradient norm = 0.0216, eval: [8.7 s]
# Iteration 127 fit: [24.6 s]: Recall = 0.2687, Jaccard score = 0.1896, loss = 0.0017, gradient norm = 0.0218, eval: [8.6 s]
# Iteration 128 fit: [24.5 s]: Recall = 0.2684, Jaccard score = 0.1895, loss = 0.0015, gradient norm = 0.0194, eval: [8.6 s]
# Iteration 129 fit: [24.4 s]: Recall = 0.2682, Jaccard score = 0.1893, loss = 0.0017, gradient norm = 0.0214, eval: [8.6 s]
# Iteration 130 fit: [24.8 s]: Recall = 0.2682, Jaccard score = 0.1893, loss = 0.0015, gradient norm = 0.0200, eval: [8.5 s]
# Iteration 131 fit: [24.8 s]: Recall = 0.2683, Jaccard score = 0.1894, loss = 0.0015, gradient norm = 0.0201, eval: [8.6 s]
# Iteration 132 fit: [24.7 s]: Recall = 0.2696, Jaccard score = 0.1904, loss = 0.0015, gradient norm = 0.0203, eval: [8.5 s]
# Iteration 133 fit: [24.7 s]: Recall = 0.2675, Jaccard score = 0.1887, loss = 0.0015, gradient norm = 0.0202, eval: [8.6 s]
# Iteration 134 fit: [24.3 s]: Recall = 0.2718, Jaccard score = 0.1922, loss = 0.0015, gradient norm = 0.0182, eval: [8.6 s]
# Iteration 135 fit: [24.8 s]: Recall = 0.2704, Jaccard score = 0.1911, loss = 0.0013, gradient norm = 0.0184, eval: [8.6 s]
# Iteration 136 fit: [24.8 s]: Recall = 0.2675, Jaccard score = 0.1887, loss = 0.0014, gradient norm = 0.0199, eval: [8.7 s]
# Iteration 137 fit: [24.6 s]: Recall = 0.2695, Jaccard score = 0.1903, loss = 0.0012, gradient norm = 0.0180, eval: [8.6 s]
# Iteration 138 fit: [24.7 s]: Recall = 0.2708, Jaccard score = 0.1915, loss = 0.0016, gradient norm = 0.0216, eval: [8.6 s]
# Iteration 139 fit: [24.6 s]: Recall = 0.2698, Jaccard score = 0.1906, loss = 0.0014, gradient norm = 0.0183, eval: [8.6 s]
# Iteration 140 fit: [24.8 s]: Recall = 0.2743, Jaccard score = 0.1944, loss = 0.0013, gradient norm = 0.0199, eval: [8.6 s]
# Iteration 141 fit: [24.7 s]: Recall = 0.2732, Jaccard score = 0.1935, loss = 0.0015, gradient norm = 0.0196, eval: [8.6 s]
# Iteration 142 fit: [24.3 s]: Recall = 0.2672, Jaccard score = 0.1884, loss = 0.0014, gradient norm = 0.0188, eval: [8.6 s]
# Iteration 143 fit: [24.5 s]: Recall = 0.2762, Jaccard score = 0.1960, loss = 0.0014, gradient norm = 0.0187, eval: [8.5 s]
# Iteration 144 fit: [24.8 s]: Recall = 0.2766, Jaccard score = 0.1963, loss = 0.0012, gradient norm = 0.0188, eval: [8.6 s]
# Iteration 145 fit: [24.3 s]: Recall = 0.2719, Jaccard score = 0.1923, loss = 0.0014, gradient norm = 0.0179, eval: [8.6 s]
# Iteration 146 fit: [24.8 s]: Recall = 0.2748, Jaccard score = 0.1948, loss = 0.0014, gradient norm = 0.0194, eval: [8.6 s]
# Iteration 147 fit: [24.4 s]: Recall = 0.2764, Jaccard score = 0.1962, loss = 0.0014, gradient norm = 0.0194, eval: [8.6 s]
# Iteration 148 fit: [24.8 s]: Recall = 0.2755, Jaccard score = 0.1954, loss = 0.0013, gradient norm = 0.0211, eval: [8.7 s]
# Iteration 149 fit: [24.4 s]: Recall = 0.2729, Jaccard score = 0.1932, loss = 0.0014, gradient norm = 0.0168, eval: [8.6 s]
# End. Best Iteration 4:  Recall = 0.2830, Jaccard score = 0.2018. 
# The best NeuMF model has been saved to Pretrain/_GMF_94_[64,32,16,8]_1566509105.h5
# Model test performed 
# Recall score: 0.08324034813657666     Jaccard score: 0.05247608328643782

# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566543538.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566543538.h5
# Load data done [1.7 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_2[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 1000)         1095000     concatenate_1[0][0]              
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 1000)         4000        user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 1000)         0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 1094)         0           multiply_1[0][0]                 
#                                                                  leaky_re_lu_1[0][0]              
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            1095        concatenate_2[0][0]              
# ==================================================================================================
# Total params: 3,168,095
# Trainable params: 3,166,095
# Non-trainable params: 2,000
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0271, Jaccard score = 0.0163
# Iteration 0 fit: [22.7 s]: Recall = 0.2368, Jaccard score = 0.1635, loss = 0.4250, gradient norm = 0.5633, eval: [8.2 s]
# Iteration 1 fit: [22.2 s]: Recall = 0.2581, Jaccard score = 0.1808, loss = 0.3875, gradient norm = 0.4294, eval: [8.0 s]
# Iteration 2 fit: [21.9 s]: Recall = 0.2764, Jaccard score = 0.1962, loss = 0.3671, gradient norm = 0.3683, eval: [8.1 s]
# Iteration 3 fit: [22.3 s]: Recall = 0.2800, Jaccard score = 0.1992, loss = 0.3519, gradient norm = 0.3357, eval: [8.1 s]
# Iteration 4 fit: [21.7 s]: Recall = 0.2780, Jaccard score = 0.1976, loss = 0.3378, gradient norm = 0.3174, eval: [8.1 s]
# Iteration 5 fit: [22.0 s]: Recall = 0.2754, Jaccard score = 0.1953, loss = 0.3220, gradient norm = 0.3050, eval: [8.1 s]
# Iteration 6 fit: [21.9 s]: Recall = 0.2748, Jaccard score = 0.1948, loss = 0.3045, gradient norm = 0.2972, eval: [8.1 s]
# Iteration 7 fit: [22.1 s]: Recall = 0.2654, Jaccard score = 0.1869, loss = 0.2855, gradient norm = 0.2916, eval: [8.1 s]
# Iteration 8 fit: [21.9 s]: Recall = 0.2578, Jaccard score = 0.1806, loss = 0.2655, gradient norm = 0.2855, eval: [8.0 s]
# Iteration 9 fit: [22.0 s]: Recall = 0.2539, Jaccard score = 0.1774, loss = 0.2439, gradient norm = 0.2801, eval: [8.2 s]
# Iteration 10 fit: [22.3 s]: Recall = 0.2469, Jaccard score = 0.1716, loss = 0.2221, gradient norm = 0.2742, eval: [8.1 s]
# Iteration 11 fit: [22.0 s]: Recall = 0.2417, Jaccard score = 0.1674, loss = 0.2005, gradient norm = 0.2679, eval: [8.1 s]
# Iteration 12 fit: [22.0 s]: Recall = 0.2400, Jaccard score = 0.1660, loss = 0.1796, gradient norm = 0.2602, eval: [8.1 s]
# Iteration 13 fit: [22.0 s]: Recall = 0.2341, Jaccard score = 0.1613, loss = 0.1596, gradient norm = 0.2515, eval: [8.0 s]
# Iteration 14 fit: [22.2 s]: Recall = 0.2367, Jaccard score = 0.1634, loss = 0.1421, gradient norm = 0.2432, eval: [8.1 s]
# Iteration 15 fit: [22.3 s]: Recall = 0.2322, Jaccard score = 0.1598, loss = 0.1256, gradient norm = 0.2339, eval: [8.0 s]
# Iteration 16 fit: [22.3 s]: Recall = 0.2300, Jaccard score = 0.1580, loss = 0.1104, gradient norm = 0.2233, eval: [8.2 s]
# Iteration 17 fit: [22.3 s]: Recall = 0.2337, Jaccard score = 0.1610, loss = 0.0981, gradient norm = 0.2127, eval: [8.1 s]
# Iteration 18 fit: [22.3 s]: Recall = 0.2375, Jaccard score = 0.1640, loss = 0.0870, gradient norm = 0.2029, eval: [8.1 s]
# Iteration 19 fit: [22.2 s]: Recall = 0.2326, Jaccard score = 0.1601, loss = 0.0772, gradient norm = 0.1924, eval: [8.1 s]
# Iteration 20 fit: [22.3 s]: Recall = 0.2337, Jaccard score = 0.1610, loss = 0.0690, gradient norm = 0.1837, eval: [8.1 s]
# Iteration 21 fit: [22.2 s]: Recall = 0.2302, Jaccard score = 0.1582, loss = 0.0619, gradient norm = 0.1737, eval: [8.1 s]
# Iteration 22 fit: [22.1 s]: Recall = 0.2325, Jaccard score = 0.1600, loss = 0.0557, gradient norm = 0.1648, eval: [8.1 s]
# Iteration 23 fit: [22.2 s]: Recall = 0.2381, Jaccard score = 0.1645, loss = 0.0509, gradient norm = 0.1573, eval: [8.0 s]
# Iteration 24 fit: [22.3 s]: Recall = 0.2365, Jaccard score = 0.1632, loss = 0.0453, gradient norm = 0.1483, eval: [8.1 s]
# Iteration 25 fit: [21.9 s]: Recall = 0.2351, Jaccard score = 0.1621, loss = 0.0420, gradient norm = 0.1422, eval: [8.1 s]
# Iteration 26 fit: [22.1 s]: Recall = 0.2385, Jaccard score = 0.1649, loss = 0.0381, gradient norm = 0.1348, eval: [8.1 s]
# Iteration 27 fit: [22.1 s]: Recall = 0.2437, Jaccard score = 0.1690, loss = 0.0357, gradient norm = 0.1295, eval: [8.0 s]
# Iteration 28 fit: [22.0 s]: Recall = 0.2417, Jaccard score = 0.1674, loss = 0.0329, gradient norm = 0.1226, eval: [8.1 s]
# Iteration 29 fit: [22.2 s]: Recall = 0.2463, Jaccard score = 0.1711, loss = 0.0302, gradient norm = 0.1165, eval: [8.1 s]
# Iteration 30 fit: [22.1 s]: Recall = 0.2441, Jaccard score = 0.1694, loss = 0.0280, gradient norm = 0.1121, eval: [8.1 s]
# Iteration 31 fit: [22.1 s]: Recall = 0.2474, Jaccard score = 0.1721, loss = 0.0266, gradient norm = 0.1079, eval: [8.2 s]
# Iteration 32 fit: [22.2 s]: Recall = 0.2487, Jaccard score = 0.1731, loss = 0.0240, gradient norm = 0.1019, eval: [8.1 s]
# Iteration 33 fit: [22.3 s]: Recall = 0.2466, Jaccard score = 0.1714, loss = 0.0228, gradient norm = 0.0989, eval: [8.2 s]
# Iteration 34 fit: [22.2 s]: Recall = 0.2439, Jaccard score = 0.1692, loss = 0.0210, gradient norm = 0.0932, eval: [8.1 s]
# Iteration 35 fit: [22.2 s]: Recall = 0.2495, Jaccard score = 0.1737, loss = 0.0201, gradient norm = 0.0899, eval: [8.1 s]
# Iteration 36 fit: [22.3 s]: Recall = 0.2523, Jaccard score = 0.1761, loss = 0.0185, gradient norm = 0.0865, eval: [8.1 s]
# Iteration 37 fit: [22.0 s]: Recall = 0.2453, Jaccard score = 0.1703, loss = 0.0178, gradient norm = 0.0828, eval: [8.2 s]
# Iteration 38 fit: [22.2 s]: Recall = 0.2518, Jaccard score = 0.1756, loss = 0.0163, gradient norm = 0.0800, eval: [8.1 s]
# Iteration 39 fit: [22.3 s]: Recall = 0.2539, Jaccard score = 0.1774, loss = 0.0150, gradient norm = 0.0757, eval: [8.1 s]
# Iteration 40 fit: [22.3 s]: Recall = 0.2518, Jaccard score = 0.1756, loss = 0.0153, gradient norm = 0.0752, eval: [8.1 s]
# Iteration 41 fit: [22.4 s]: Recall = 0.2459, Jaccard score = 0.1709, loss = 0.0135, gradient norm = 0.0706, eval: [8.1 s]
# Iteration 42 fit: [22.1 s]: Recall = 0.2519, Jaccard score = 0.1757, loss = 0.0128, gradient norm = 0.0670, eval: [8.1 s]
# Iteration 43 fit: [22.3 s]: Recall = 0.2513, Jaccard score = 0.1752, loss = 0.0125, gradient norm = 0.0657, eval: [8.1 s]
# Iteration 44 fit: [22.2 s]: Recall = 0.2499, Jaccard score = 0.1741, loss = 0.0113, gradient norm = 0.0621, eval: [8.1 s]
# Iteration 45 fit: [22.3 s]: Recall = 0.2512, Jaccard score = 0.1751, loss = 0.0109, gradient norm = 0.0606, eval: [8.2 s]
# Iteration 46 fit: [22.2 s]: Recall = 0.2557, Jaccard score = 0.1788, loss = 0.0105, gradient norm = 0.0588, eval: [8.1 s]
# Iteration 47 fit: [22.4 s]: Recall = 0.2509, Jaccard score = 0.1749, loss = 0.0102, gradient norm = 0.0561, eval: [8.1 s]
# Iteration 48 fit: [22.3 s]: Recall = 0.2477, Jaccard score = 0.1723, loss = 0.0095, gradient norm = 0.0545, eval: [8.2 s]
# Iteration 49 fit: [22.5 s]: Recall = 0.2565, Jaccard score = 0.1795, loss = 0.0087, gradient norm = 0.0516, eval: [8.1 s]
# Iteration 50 fit: [22.3 s]: Recall = 0.2603, Jaccard score = 0.1827, loss = 0.0089, gradient norm = 0.0512, eval: [8.1 s]
# Iteration 51 fit: [22.4 s]: Recall = 0.2553, Jaccard score = 0.1785, loss = 0.0082, gradient norm = 0.0499, eval: [8.0 s]
# Iteration 52 fit: [22.3 s]: Recall = 0.2576, Jaccard score = 0.1804, loss = 0.0078, gradient norm = 0.0478, eval: [8.0 s]
# Iteration 53 fit: [25.0 s]: Recall = 0.2551, Jaccard score = 0.1783, loss = 0.0076, gradient norm = 0.0461, eval: [8.1 s]
# Iteration 54 fit: [22.1 s]: Recall = 0.2544, Jaccard score = 0.1778, loss = 0.0071, gradient norm = 0.0441, eval: [8.1 s]
# Iteration 55 fit: [22.2 s]: Recall = 0.2558, Jaccard score = 0.1789, loss = 0.0067, gradient norm = 0.0435, eval: [8.1 s]
# Iteration 56 fit: [22.2 s]: Recall = 0.2562, Jaccard score = 0.1793, loss = 0.0067, gradient norm = 0.0420, eval: [8.0 s]
# Iteration 57 fit: [22.3 s]: Recall = 0.2590, Jaccard score = 0.1815, loss = 0.0059, gradient norm = 0.0394, eval: [8.1 s]
# Iteration 58 fit: [22.1 s]: Recall = 0.2583, Jaccard score = 0.1810, loss = 0.0064, gradient norm = 0.0395, eval: [8.1 s]
# Iteration 59 fit: [22.1 s]: Recall = 0.2573, Jaccard score = 0.1801, loss = 0.0057, gradient norm = 0.0377, eval: [8.0 s]
# Iteration 60 fit: [22.2 s]: Recall = 0.2560, Jaccard score = 0.1791, loss = 0.0056, gradient norm = 0.0371, eval: [8.0 s]
# Iteration 61 fit: [22.3 s]: Recall = 0.2597, Jaccard score = 0.1821, loss = 0.0053, gradient norm = 0.0357, eval: [8.0 s]
# Iteration 62 fit: [22.3 s]: Recall = 0.2565, Jaccard score = 0.1795, loss = 0.0054, gradient norm = 0.0363, eval: [8.0 s]
# Iteration 63 fit: [22.2 s]: Recall = 0.2561, Jaccard score = 0.1792, loss = 0.0049, gradient norm = 0.0338, eval: [8.1 s]
# Iteration 64 fit: [22.1 s]: Recall = 0.2591, Jaccard score = 0.1816, loss = 0.0049, gradient norm = 0.0342, eval: [8.1 s]
# Iteration 65 fit: [22.4 s]: Recall = 0.2618, Jaccard score = 0.1839, loss = 0.0047, gradient norm = 0.0336, eval: [8.1 s]
# Iteration 66 fit: [22.2 s]: Recall = 0.2656, Jaccard score = 0.1871, loss = 0.0043, gradient norm = 0.0308, eval: [8.0 s]
# Iteration 67 fit: [22.3 s]: Recall = 0.2671, Jaccard score = 0.1883, loss = 0.0044, gradient norm = 0.0319, eval: [8.0 s]
# Iteration 68 fit: [22.5 s]: Recall = 0.2597, Jaccard score = 0.1821, loss = 0.0045, gradient norm = 0.0309, eval: [8.1 s]
# Iteration 69 fit: [22.3 s]: Recall = 0.2665, Jaccard score = 0.1878, loss = 0.0039, gradient norm = 0.0291, eval: [8.1 s]
# Iteration 70 fit: [22.3 s]: Recall = 0.2657, Jaccard score = 0.1872, loss = 0.0039, gradient norm = 0.0294, eval: [8.1 s]
# Iteration 71 fit: [22.4 s]: Recall = 0.2666, Jaccard score = 0.1879, loss = 0.0040, gradient norm = 0.0278, eval: [8.1 s]
# Iteration 72 fit: [22.1 s]: Recall = 0.2654, Jaccard score = 0.1869, loss = 0.0040, gradient norm = 0.0294, eval: [8.1 s]
# Iteration 73 fit: [22.4 s]: Recall = 0.2684, Jaccard score = 0.1895, loss = 0.0035, gradient norm = 0.0268, eval: [8.1 s]
# Iteration 74 fit: [21.9 s]: Recall = 0.2679, Jaccard score = 0.1890, loss = 0.0035, gradient norm = 0.0269, eval: [8.1 s]
# Iteration 75 fit: [22.2 s]: Recall = 0.2672, Jaccard score = 0.1884, loss = 0.0034, gradient norm = 0.0261, eval: [8.0 s]
# Iteration 76 fit: [22.4 s]: Recall = 0.2695, Jaccard score = 0.1903, loss = 0.0034, gradient norm = 0.0267, eval: [8.1 s]
# Iteration 77 fit: [22.0 s]: Recall = 0.2713, Jaccard score = 0.1919, loss = 0.0033, gradient norm = 0.0256, eval: [8.0 s]
# Iteration 78 fit: [21.9 s]: Recall = 0.2740, Jaccard score = 0.1942, loss = 0.0032, gradient norm = 0.0263, eval: [8.0 s]
# Iteration 79 fit: [22.4 s]: Recall = 0.2719, Jaccard score = 0.1923, loss = 0.0029, gradient norm = 0.0231, eval: [8.0 s]
# Iteration 80 fit: [21.9 s]: Recall = 0.2704, Jaccard score = 0.1911, loss = 0.0031, gradient norm = 0.0248, eval: [8.1 s]
# Iteration 81 fit: [22.3 s]: Recall = 0.2767, Jaccard score = 0.1964, loss = 0.0030, gradient norm = 0.0248, eval: [8.0 s]
# Iteration 82 fit: [22.2 s]: Recall = 0.2816, Jaccard score = 0.2006, loss = 0.0026, gradient norm = 0.0224, eval: [8.1 s]
# Iteration 83 fit: [22.2 s]: Recall = 0.2742, Jaccard score = 0.1943, loss = 0.0028, gradient norm = 0.0236, eval: [8.1 s]
# Iteration 84 fit: [22.3 s]: Recall = 0.2804, Jaccard score = 0.1996, loss = 0.0026, gradient norm = 0.0224, eval: [8.1 s]
# Iteration 85 fit: [22.7 s]: Recall = 0.2792, Jaccard score = 0.1985, loss = 0.0029, gradient norm = 0.0241, eval: [8.0 s]
# Iteration 86 fit: [22.2 s]: Recall = 0.2827, Jaccard score = 0.2016, loss = 0.0028, gradient norm = 0.0242, eval: [8.1 s]
# Iteration 87 fit: [22.4 s]: Recall = 0.2847, Jaccard score = 0.2032, loss = 0.0026, gradient norm = 0.0220, eval: [8.2 s]
# Iteration 88 fit: [22.2 s]: Recall = 0.2782, Jaccard score = 0.1977, loss = 0.0023, gradient norm = 0.0214, eval: [8.2 s]
# Iteration 89 fit: [22.0 s]: Recall = 0.2860, Jaccard score = 0.2044, loss = 0.0025, gradient norm = 0.0233, eval: [8.2 s]
# Iteration 90 fit: [22.5 s]: Recall = 0.2844, Jaccard score = 0.2030, loss = 0.0023, gradient norm = 0.0204, eval: [8.4 s]
# Iteration 91 fit: [22.5 s]: Recall = 0.2880, Jaccard score = 0.2061, loss = 0.0021, gradient norm = 0.0203, eval: [8.2 s]
# Iteration 92 fit: [22.5 s]: Recall = 0.2865, Jaccard score = 0.2048, loss = 0.0026, gradient norm = 0.0220, eval: [8.4 s]
# Iteration 93 fit: [22.5 s]: Recall = 0.2847, Jaccard score = 0.2032, loss = 0.0024, gradient norm = 0.0220, eval: [8.3 s]
# Iteration 94 fit: [22.5 s]: Recall = 0.2912, Jaccard score = 0.2088, loss = 0.0021, gradient norm = 0.0223, eval: [8.4 s]
# Iteration 95 fit: [22.5 s]: Recall = 0.2905, Jaccard score = 0.2083, loss = 0.0021, gradient norm = 0.0200, eval: [8.3 s]
# Iteration 96 fit: [22.5 s]: Recall = 0.2848, Jaccard score = 0.2033, loss = 0.0023, gradient norm = 0.0208, eval: [8.4 s]
# Iteration 97 fit: [22.5 s]: Recall = 0.2904, Jaccard score = 0.2082, loss = 0.0022, gradient norm = 0.0196, eval: [8.3 s]
# Iteration 98 fit: [22.5 s]: Recall = 0.2908, Jaccard score = 0.2086, loss = 0.0022, gradient norm = 0.0229, eval: [8.4 s]
# Iteration 99 fit: [22.4 s]: Recall = 0.2946, Jaccard score = 0.2118, loss = 0.0019, gradient norm = 0.0197, eval: [8.3 s]
# Iteration 100 fit: [22.0 s]: Recall = 0.2942, Jaccard score = 0.2114, loss = 0.0019, gradient norm = 0.0203, eval: [8.3 s]
# Iteration 101 fit: [22.6 s]: Recall = 0.2953, Jaccard score = 0.2124, loss = 0.0021, gradient norm = 0.0209, eval: [8.2 s]
# Iteration 102 fit: [22.5 s]: Recall = 0.2913, Jaccard score = 0.2089, loss = 0.0023, gradient norm = 0.0234, eval: [8.2 s]
# Iteration 103 fit: [22.4 s]: Recall = 0.2921, Jaccard score = 0.2096, loss = 0.0019, gradient norm = 0.0205, eval: [8.2 s]
# Iteration 104 fit: [22.5 s]: Recall = 0.2989, Jaccard score = 0.2156, loss = 0.0019, gradient norm = 0.0205, eval: [8.2 s]
# Iteration 105 fit: [22.4 s]: Recall = 0.2964, Jaccard score = 0.2134, loss = 0.0021, gradient norm = 0.0212, eval: [8.2 s]
# Iteration 106 fit: [22.5 s]: Recall = 0.2981, Jaccard score = 0.2149, loss = 0.0017, gradient norm = 0.0197, eval: [8.2 s]
# Iteration 107 fit: [22.8 s]: Recall = 0.3010, Jaccard score = 0.2174, loss = 0.0020, gradient norm = 0.0204, eval: [8.2 s]
# Iteration 108 fit: [22.5 s]: Recall = 0.2993, Jaccard score = 0.2159, loss = 0.0019, gradient norm = 0.0196, eval: [8.2 s]
# Iteration 109 fit: [22.3 s]: Recall = 0.2969, Jaccard score = 0.2138, loss = 0.0021, gradient norm = 0.0208, eval: [8.4 s]
# Iteration 110 fit: [22.3 s]: Recall = 0.2973, Jaccard score = 0.2142, loss = 0.0021, gradient norm = 0.0210, eval: [8.3 s]
# Iteration 111 fit: [22.3 s]: Recall = 0.2989, Jaccard score = 0.2156, loss = 0.0020, gradient norm = 0.0223, eval: [8.2 s]
# Iteration 112 fit: [22.5 s]: Recall = 0.3012, Jaccard score = 0.2176, loss = 0.0018, gradient norm = 0.0198, eval: [8.2 s]
# Iteration 113 fit: [22.5 s]: Recall = 0.3002, Jaccard score = 0.2167, loss = 0.0018, gradient norm = 0.0196, eval: [8.2 s]
# Iteration 114 fit: [22.5 s]: Recall = 0.3041, Jaccard score = 0.2201, loss = 0.0017, gradient norm = 0.0195, eval: [8.2 s]
# Iteration 115 fit: [22.0 s]: Recall = 0.3043, Jaccard score = 0.2203, loss = 0.0017, gradient norm = 0.0213, eval: [8.2 s]
# Iteration 116 fit: [22.0 s]: Recall = 0.3020, Jaccard score = 0.2183, loss = 0.0017, gradient norm = 0.0190, eval: [8.3 s]
# Iteration 117 fit: [22.5 s]: Recall = 0.3041, Jaccard score = 0.2201, loss = 0.0019, gradient norm = 0.0208, eval: [8.3 s]
# Iteration 118 fit: [22.5 s]: Recall = 0.3033, Jaccard score = 0.2194, loss = 0.0016, gradient norm = 0.0198, eval: [8.3 s]
# Iteration 119 fit: [22.5 s]: Recall = 0.3036, Jaccard score = 0.2197, loss = 0.0016, gradient norm = 0.0187, eval: [8.3 s]
# Iteration 120 fit: [22.5 s]: Recall = 0.3025, Jaccard score = 0.2187, loss = 0.0015, gradient norm = 0.0176, eval: [8.2 s]
# Iteration 121 fit: [22.7 s]: Recall = 0.3045, Jaccard score = 0.2205, loss = 0.0015, gradient norm = 0.0182, eval: [8.3 s]
# Iteration 122 fit: [22.1 s]: Recall = 0.3029, Jaccard score = 0.2191, loss = 0.0015, gradient norm = 0.0187, eval: [8.2 s]
# Iteration 123 fit: [22.1 s]: Recall = 0.3015, Jaccard score = 0.2178, loss = 0.0016, gradient norm = 0.0204, eval: [8.1 s]
# Iteration 124 fit: [22.1 s]: Recall = 0.3065, Jaccard score = 0.2223, loss = 0.0015, gradient norm = 0.0185, eval: [8.2 s]
# Iteration 125 fit: [22.1 s]: Recall = 0.3067, Jaccard score = 0.2225, loss = 0.0016, gradient norm = 0.0199, eval: [8.3 s]
# Iteration 126 fit: [22.0 s]: Recall = 0.3081, Jaccard score = 0.2237, loss = 0.0013, gradient norm = 0.0190, eval: [8.3 s]
# Iteration 127 fit: [22.1 s]: Recall = 0.3033, Jaccard score = 0.2194, loss = 0.0014, gradient norm = 0.0199, eval: [8.3 s]
# Iteration 128 fit: [22.1 s]: Recall = 0.3047, Jaccard score = 0.2207, loss = 0.0015, gradient norm = 0.0198, eval: [8.3 s]
# Iteration 129 fit: [22.1 s]: Recall = 0.3059, Jaccard score = 0.2218, loss = 0.0015, gradient norm = 0.0184, eval: [8.3 s]
# Iteration 130 fit: [22.1 s]: Recall = 0.3036, Jaccard score = 0.2197, loss = 0.0017, gradient norm = 0.0206, eval: [8.3 s]
# Iteration 131 fit: [22.1 s]: Recall = 0.2996, Jaccard score = 0.2162, loss = 0.0015, gradient norm = 0.0200, eval: [8.3 s]
# Iteration 132 fit: [22.1 s]: Recall = 0.3053, Jaccard score = 0.2213, loss = 0.0015, gradient norm = 0.0178, eval: [8.3 s]
# Iteration 133 fit: [22.4 s]: Recall = 0.2979, Jaccard score = 0.2147, loss = 0.0014, gradient norm = 0.0219, eval: [8.2 s]
# Iteration 134 fit: [22.1 s]: Recall = 0.3000, Jaccard score = 0.2165, loss = 0.0016, gradient norm = 0.0197, eval: [8.2 s]
# Iteration 135 fit: [22.1 s]: Recall = 0.3039, Jaccard score = 0.2199, loss = 0.0017, gradient norm = 0.0203, eval: [8.2 s]
# Iteration 136 fit: [22.1 s]: Recall = 0.3033, Jaccard score = 0.2194, loss = 0.0016, gradient norm = 0.0196, eval: [8.3 s]
# Iteration 137 fit: [22.1 s]: Recall = 0.3015, Jaccard score = 0.2178, loss = 0.0015, gradient norm = 0.0194, eval: [8.2 s]
# Iteration 138 fit: [22.4 s]: Recall = 0.3009, Jaccard score = 0.2173, loss = 0.0014, gradient norm = 0.0195, eval: [8.3 s]
# Iteration 139 fit: [22.5 s]: Recall = 0.3007, Jaccard score = 0.2171, loss = 0.0015, gradient norm = 0.0231, eval: [8.2 s]
# Iteration 140 fit: [22.4 s]: Recall = 0.3011, Jaccard score = 0.2175, loss = 0.0015, gradient norm = 0.0188, eval: [8.3 s]
# Iteration 141 fit: [22.5 s]: Recall = 0.2976, Jaccard score = 0.2144, loss = 0.0015, gradient norm = 0.0187, eval: [8.2 s]
# Iteration 142 fit: [22.4 s]: Recall = 0.2945, Jaccard score = 0.2117, loss = 0.0015, gradient norm = 0.0186, eval: [8.2 s]
# Iteration 143 fit: [22.6 s]: Recall = 0.2936, Jaccard score = 0.2109, loss = 0.0012, gradient norm = 0.0182, eval: [8.2 s]
# Iteration 144 fit: [22.5 s]: Recall = 0.2932, Jaccard score = 0.2106, loss = 0.0015, gradient norm = 0.0168, eval: [8.3 s]
# Iteration 145 fit: [22.6 s]: Recall = 0.2897, Jaccard score = 0.2076, loss = 0.0014, gradient norm = 0.0194, eval: [8.2 s]
# Iteration 146 fit: [22.5 s]: Recall = 0.2895, Jaccard score = 0.2074, loss = 0.0017, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 147 fit: [22.7 s]: Recall = 0.2888, Jaccard score = 0.2068, loss = 0.0013, gradient norm = 0.0180, eval: [8.1 s]
# Iteration 148 fit: [22.5 s]: Recall = 0.2889, Jaccard score = 0.2069, loss = 0.0015, gradient norm = 0.0182, eval: [8.2 s]
# Iteration 149 fit: [22.5 s]: Recall = 0.2946, Jaccard score = 0.2118, loss = 0.0013, gradient norm = 0.0181, eval: [8.1 s]
# Iteration 150 fit: [22.6 s]: Recall = 0.2912, Jaccard score = 0.2088, loss = 0.0015, gradient norm = 0.0213, eval: [8.2 s]
# Iteration 151 fit: [22.5 s]: Recall = 0.2892, Jaccard score = 0.2072, loss = 0.0016, gradient norm = 0.0186, eval: [8.1 s]
# Iteration 152 fit: [22.5 s]: Recall = 0.2903, Jaccard score = 0.2081, loss = 0.0018, gradient norm = 0.0211, eval: [8.1 s]
# Iteration 153 fit: [22.5 s]: Recall = 0.2820, Jaccard score = 0.2010, loss = 0.0014, gradient norm = 0.0218, eval: [8.1 s]
# Iteration 154 fit: [22.6 s]: Recall = 0.2824, Jaccard score = 0.2013, loss = 0.0013, gradient norm = 0.0191, eval: [8.1 s]
# Iteration 155 fit: [22.5 s]: Recall = 0.2854, Jaccard score = 0.2038, loss = 0.0013, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 156 fit: [22.6 s]: Recall = 0.2844, Jaccard score = 0.2030, loss = 0.0012, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 157 fit: [22.5 s]: Recall = 0.2836, Jaccard score = 0.2023, loss = 0.0016, gradient norm = 0.0191, eval: [8.1 s]
# Iteration 158 fit: [22.6 s]: Recall = 0.2850, Jaccard score = 0.2035, loss = 0.0015, gradient norm = 0.0186, eval: [8.1 s]
# Iteration 159 fit: [22.5 s]: Recall = 0.2817, Jaccard score = 0.2007, loss = 0.0016, gradient norm = 0.0187, eval: [8.1 s]
# Iteration 160 fit: [22.6 s]: Recall = 0.2792, Jaccard score = 0.1985, loss = 0.0013, gradient norm = 0.0186, eval: [8.1 s]
# Iteration 161 fit: [22.7 s]: Recall = 0.2825, Jaccard score = 0.2014, loss = 0.0014, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 162 fit: [22.6 s]: Recall = 0.2754, Jaccard score = 0.1953, loss = 0.0016, gradient norm = 0.0213, eval: [8.1 s]
# Iteration 163 fit: [22.5 s]: Recall = 0.2761, Jaccard score = 0.1959, loss = 0.0014, gradient norm = 0.0175, eval: [8.1 s]
# Iteration 164 fit: [22.6 s]: Recall = 0.2737, Jaccard score = 0.1939, loss = 0.0015, gradient norm = 0.0200, eval: [8.1 s]
# Iteration 165 fit: [22.5 s]: Recall = 0.2795, Jaccard score = 0.1988, loss = 0.0014, gradient norm = 0.0207, eval: [8.4 s]
# Iteration 166 fit: [22.6 s]: Recall = 0.2735, Jaccard score = 0.1937, loss = 0.0017, gradient norm = 0.0206, eval: [8.1 s]
# Iteration 167 fit: [22.6 s]: Recall = 0.2689, Jaccard score = 0.1898, loss = 0.0015, gradient norm = 0.0192, eval: [8.1 s]
# Iteration 168 fit: [22.6 s]: Recall = 0.2744, Jaccard score = 0.1945, loss = 0.0014, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 169 fit: [22.6 s]: Recall = 0.2684, Jaccard score = 0.1895, loss = 0.0015, gradient norm = 0.0214, eval: [8.1 s]
# Iteration 170 fit: [22.7 s]: Recall = 0.2655, Jaccard score = 0.1870, loss = 0.0013, gradient norm = 0.0202, eval: [8.1 s]
# Iteration 171 fit: [22.7 s]: Recall = 0.2720, Jaccard score = 0.1924, loss = 0.0014, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 172 fit: [22.6 s]: Recall = 0.2696, Jaccard score = 0.1904, loss = 0.0011, gradient norm = 0.0159, eval: [8.1 s]
# Iteration 173 fit: [22.6 s]: Recall = 0.2699, Jaccard score = 0.1907, loss = 0.0012, gradient norm = 0.0180, eval: [8.1 s]
# Iteration 174 fit: [22.6 s]: Recall = 0.2645, Jaccard score = 0.1861, loss = 0.0015, gradient norm = 0.0195, eval: [8.1 s]
# Iteration 175 fit: [22.6 s]: Recall = 0.2696, Jaccard score = 0.1904, loss = 0.0014, gradient norm = 0.0192, eval: [8.1 s]
# Iteration 176 fit: [22.6 s]: Recall = 0.2634, Jaccard score = 0.1853, loss = 0.0013, gradient norm = 0.0182, eval: [8.1 s]
# Iteration 177 fit: [22.6 s]: Recall = 0.2651, Jaccard score = 0.1867, loss = 0.0014, gradient norm = 0.0176, eval: [8.1 s]
# Iteration 178 fit: [22.6 s]: Recall = 0.2632, Jaccard score = 0.1851, loss = 0.0013, gradient norm = 0.0173, eval: [8.1 s]
# Iteration 179 fit: [22.7 s]: Recall = 0.2606, Jaccard score = 0.1829, loss = 0.0012, gradient norm = 0.0165, eval: [8.1 s]
# Iteration 180 fit: [22.6 s]: Recall = 0.2592, Jaccard score = 0.1817, loss = 0.0014, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 181 fit: [22.6 s]: Recall = 0.2560, Jaccard score = 0.1791, loss = 0.0012, gradient norm = 0.0201, eval: [8.1 s]
# Iteration 182 fit: [22.6 s]: Recall = 0.2589, Jaccard score = 0.1815, loss = 0.0014, gradient norm = 0.0191, eval: [8.1 s]
# Iteration 183 fit: [22.8 s]: Recall = 0.2555, Jaccard score = 0.1787, loss = 0.0015, gradient norm = 0.0185, eval: [8.1 s]
# Iteration 184 fit: [22.6 s]: Recall = 0.2599, Jaccard score = 0.1823, loss = 0.0014, gradient norm = 0.0170, eval: [8.1 s]
# Iteration 185 fit: [22.7 s]: Recall = 0.2574, Jaccard score = 0.1802, loss = 0.0014, gradient norm = 0.0182, eval: [8.1 s]
# Iteration 186 fit: [22.7 s]: Recall = 0.2518, Jaccard score = 0.1756, loss = 0.0015, gradient norm = 0.0193, eval: [8.1 s]
# Iteration 187 fit: [22.6 s]: Recall = 0.2581, Jaccard score = 0.1808, loss = 0.0013, gradient norm = 0.0173, eval: [8.1 s]
# Iteration 188 fit: [22.7 s]: Recall = 0.2525, Jaccard score = 0.1762, loss = 0.0013, gradient norm = 0.0192, eval: [8.1 s]
# Iteration 189 fit: [22.7 s]: Recall = 0.2494, Jaccard score = 0.1737, loss = 0.0013, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 190 fit: [22.6 s]: Recall = 0.2487, Jaccard score = 0.1731, loss = 0.0012, gradient norm = 0.0162, eval: [8.1 s]
# Iteration 191 fit: [22.7 s]: Recall = 0.2502, Jaccard score = 0.1743, loss = 0.0010, gradient norm = 0.0180, eval: [8.1 s]
# Iteration 192 fit: [22.7 s]: Recall = 0.2443, Jaccard score = 0.1696, loss = 0.0011, gradient norm = 0.0171, eval: [8.1 s]
# Iteration 193 fit: [22.7 s]: Recall = 0.2449, Jaccard score = 0.1700, loss = 0.0011, gradient norm = 0.0184, eval: [8.1 s]
# Iteration 194 fit: [22.7 s]: Recall = 0.2440, Jaccard score = 0.1693, loss = 0.0013, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 195 fit: [22.7 s]: Recall = 0.2489, Jaccard score = 0.1733, loss = 0.0012, gradient norm = 0.0156, eval: [8.1 s]
# Iteration 196 fit: [22.7 s]: Recall = 0.2414, Jaccard score = 0.1672, loss = 0.0014, gradient norm = 0.0177, eval: [8.1 s]
# Iteration 197 fit: [22.7 s]: Recall = 0.2431, Jaccard score = 0.1685, loss = 0.0010, gradient norm = 0.0159, eval: [8.1 s]
# Iteration 198 fit: [22.7 s]: Recall = 0.2461, Jaccard score = 0.1710, loss = 0.0014, gradient norm = 0.0181, eval: [8.1 s]
# Iteration 199 fit: [22.8 s]: Recall = 0.2393, Jaccard score = 0.1655, loss = 0.0014, gradient norm = 0.0185, eval: [8.1 s]
# Iteration 200 fit: [22.7 s]: Recall = 0.2462, Jaccard score = 0.1710, loss = 0.0012, gradient norm = 0.0180, eval: [8.1 s]
# Iteration 201 fit: [22.7 s]: Recall = 0.2397, Jaccard score = 0.1658, loss = 0.0013, gradient norm = 0.0173, eval: [8.1 s]
# Iteration 202 fit: [22.7 s]: Recall = 0.2367, Jaccard score = 0.1634, loss = 0.0013, gradient norm = 0.0174, eval: [8.1 s]
# Iteration 203 fit: [22.7 s]: Recall = 0.2410, Jaccard score = 0.1669, loss = 0.0012, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 204 fit: [22.7 s]: Recall = 0.2384, Jaccard score = 0.1648, loss = 0.0011, gradient norm = 0.0134, eval: [8.6 s]
# Iteration 205 fit: [22.7 s]: Recall = 0.2320, Jaccard score = 0.1596, loss = 0.0011, gradient norm = 0.0186, eval: [8.1 s]
# Iteration 206 fit: [22.7 s]: Recall = 0.2480, Jaccard score = 0.1725, loss = 0.0012, gradient norm = 0.0161, eval: [8.1 s]
# Iteration 207 fit: [22.7 s]: Recall = 0.2342, Jaccard score = 0.1614, loss = 0.0012, gradient norm = 0.0168, eval: [8.1 s]
# Iteration 208 fit: [22.7 s]: Recall = 0.2297, Jaccard score = 0.1578, loss = 0.0013, gradient norm = 0.0192, eval: [8.1 s]
# Iteration 209 fit: [22.8 s]: Recall = 0.2282, Jaccard score = 0.1566, loss = 0.0014, gradient norm = 0.0193, eval: [8.1 s]
# Iteration 210 fit: [22.7 s]: Recall = 0.2320, Jaccard score = 0.1596, loss = 0.0013, gradient norm = 0.0180, eval: [8.1 s]
# Iteration 211 fit: [22.7 s]: Recall = 0.2247, Jaccard score = 0.1538, loss = 0.0012, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 212 fit: [22.8 s]: Recall = 0.2268, Jaccard score = 0.1555, loss = 0.0014, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 213 fit: [22.7 s]: Recall = 0.2265, Jaccard score = 0.1553, loss = 0.0013, gradient norm = 0.0153, eval: [8.1 s]
# Iteration 214 fit: [22.7 s]: Recall = 0.2289, Jaccard score = 0.1572, loss = 0.0009, gradient norm = 0.0165, eval: [8.1 s]
# Iteration 215 fit: [22.7 s]: Recall = 0.2282, Jaccard score = 0.1566, loss = 0.0011, gradient norm = 0.0163, eval: [8.1 s]
# Iteration 216 fit: [22.7 s]: Recall = 0.2306, Jaccard score = 0.1585, loss = 0.0012, gradient norm = 0.0173, eval: [8.1 s]
# Iteration 217 fit: [22.7 s]: Recall = 0.2262, Jaccard score = 0.1550, loss = 0.0014, gradient norm = 0.0172, eval: [8.1 s]
# Iteration 218 fit: [22.7 s]: Recall = 0.2274, Jaccard score = 0.1560, loss = 0.0013, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 219 fit: [22.7 s]: Recall = 0.2217, Jaccard score = 0.1515, loss = 0.0012, gradient norm = 0.0194, eval: [8.1 s]
# Iteration 220 fit: [22.7 s]: Recall = 0.2152, Jaccard score = 0.1464, loss = 0.0012, gradient norm = 0.0193, eval: [8.1 s]
# Iteration 221 fit: [22.7 s]: Recall = 0.2218, Jaccard score = 0.1516, loss = 0.0012, gradient norm = 0.0198, eval: [8.1 s]
# Iteration 222 fit: [22.7 s]: Recall = 0.2198, Jaccard score = 0.1500, loss = 0.0011, gradient norm = 0.0172, eval: [8.2 s]
# Iteration 223 fit: [22.8 s]: Recall = 0.2193, Jaccard score = 0.1496, loss = 0.0013, gradient norm = 0.0169, eval: [8.1 s]
# Iteration 224 fit: [22.8 s]: Recall = 0.2224, Jaccard score = 0.1520, loss = 0.0012, gradient norm = 0.0165, eval: [8.1 s]
# Iteration 225 fit: [22.8 s]: Recall = 0.2232, Jaccard score = 0.1527, loss = 0.0012, gradient norm = 0.0168, eval: [8.1 s]
# Iteration 226 fit: [22.8 s]: Recall = 0.2236, Jaccard score = 0.1529, loss = 0.0011, gradient norm = 0.0175, eval: [8.2 s]
# Iteration 227 fit: [22.8 s]: Recall = 0.2082, Jaccard score = 0.1410, loss = 0.0012, gradient norm = 0.0172, eval: [8.1 s]
# Iteration 228 fit: [22.7 s]: Recall = 0.2188, Jaccard score = 0.1492, loss = 0.0011, gradient norm = 0.0160, eval: [8.1 s]
# Iteration 229 fit: [22.9 s]: Recall = 0.2202, Jaccard score = 0.1503, loss = 0.0014, gradient norm = 0.0162, eval: [8.1 s]
# Iteration 230 fit: [22.8 s]: Recall = 0.2158, Jaccard score = 0.1468, loss = 0.0013, gradient norm = 0.0188, eval: [8.1 s]
# Iteration 231 fit: [22.8 s]: Recall = 0.2161, Jaccard score = 0.1471, loss = 0.0009, gradient norm = 0.0152, eval: [8.1 s]
# Iteration 232 fit: [22.8 s]: Recall = 0.2097, Jaccard score = 0.1421, loss = 0.0011, gradient norm = 0.0186, eval: [8.1 s]
# Iteration 233 fit: [22.8 s]: Recall = 0.2181, Jaccard score = 0.1486, loss = 0.0013, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 234 fit: [22.8 s]: Recall = 0.2105, Jaccard score = 0.1427, loss = 0.0014, gradient norm = 0.0209, eval: [8.1 s]
# Iteration 235 fit: [22.8 s]: Recall = 0.2100, Jaccard score = 0.1423, loss = 0.0013, gradient norm = 0.0167, eval: [8.1 s]
# Iteration 236 fit: [22.8 s]: Recall = 0.2116, Jaccard score = 0.1435, loss = 0.0012, gradient norm = 0.0165, eval: [8.1 s]
# Iteration 237 fit: [22.8 s]: Recall = 0.2112, Jaccard score = 0.1433, loss = 0.0011, gradient norm = 0.0177, eval: [8.1 s]
# Iteration 238 fit: [22.8 s]: Recall = 0.2074, Jaccard score = 0.1404, loss = 0.0015, gradient norm = 0.0175, eval: [8.1 s]
# Iteration 239 fit: [22.8 s]: Recall = 0.2101, Jaccard score = 0.1424, loss = 0.0012, gradient norm = 0.0174, eval: [8.1 s]
# Iteration 240 fit: [22.8 s]: Recall = 0.2037, Jaccard score = 0.1375, loss = 0.0011, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 241 fit: [22.8 s]: Recall = 0.2064, Jaccard score = 0.1396, loss = 0.0012, gradient norm = 0.0150, eval: [8.1 s]
# Iteration 242 fit: [22.8 s]: Recall = 0.2100, Jaccard score = 0.1423, loss = 0.0012, gradient norm = 0.0121, eval: [8.1 s]
# Iteration 243 fit: [23.4 s]: Recall = 0.2093, Jaccard score = 0.1418, loss = 0.0010, gradient norm = 0.0166, eval: [8.1 s]
# Iteration 244 fit: [23.0 s]: Recall = 0.1965, Jaccard score = 0.1320, loss = 0.0011, gradient norm = 0.0166, eval: [8.2 s]
# Iteration 245 fit: [22.8 s]: Recall = 0.2021, Jaccard score = 0.1362, loss = 0.0014, gradient norm = 0.0184, eval: [8.1 s]
# Iteration 246 fit: [22.8 s]: Recall = 0.2036, Jaccard score = 0.1374, loss = 0.0012, gradient norm = 0.0193, eval: [8.1 s]
# Iteration 247 fit: [22.8 s]: Recall = 0.1967, Jaccard score = 0.1321, loss = 0.0013, gradient norm = 0.0151, eval: [8.1 s]
# Iteration 248 fit: [22.9 s]: Recall = 0.2077, Jaccard score = 0.1405, loss = 0.0013, gradient norm = 0.0143, eval: [8.1 s]
# Iteration 249 fit: [22.9 s]: Recall = 0.2041, Jaccard score = 0.1378, loss = 0.0010, gradient norm = 0.0173, eval: [8.1 s]
# Iteration 250 fit: [22.9 s]: Recall = 0.1968, Jaccard score = 0.1322, loss = 0.0011, gradient norm = 0.0159, eval: [8.4 s]


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566551779.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566551779.h5
# Load data done [2.4 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall


# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=145, epochs=300, eval_recall=1, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0,0,0,0]', reg_mf=0, test_dataset=1, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_94_[64,32,16,8]_1566551912.h5
--weights_path: Pretrain/_GMF_94_[64,32,16,8]_1566551912.h5
# Load data done [1.9 s]. #user=20000, #item=2000, #train=161729, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1094)         0           flatten_1[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# user_feature_item_latent1 (Dens (None, 94)           102930      concatenate_1[0][0]              
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_feature_item_latent_bn1 (B (None, 94)           376         user_feature_item_latent1[0][0]  
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# leaky_re_lu_1 (LeakyReLU)       (None, 94)           0           user_feature_item_latent_bn1[0][0
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           leaky_re_lu_1[0][0]              
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            95          multiply_1[0][0]                 
# ==================================================================================================
# Total params: 2,171,401
# Trainable params: 2,171,213
# Non-trainable params: 188
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0255, Jaccard score = 0.0153
# Iteration 0 fit: [20.4 s]: Recall = 0.2280, Jaccard score = 0.1565, loss = 0.4824, gradient norm = 0.2873, eval: [8.0 s]
# Iteration 1 fit: [19.0 s]: Recall = 0.2514, Jaccard score = 0.1753, loss = 0.3825, gradient norm = 0.2489, eval: [7.9 s]
# Iteration 2 fit: [18.8 s]: Recall = 0.2584, Jaccard score = 0.1811, loss = 0.3554, gradient norm = 0.2528, eval: [8.1 s]
# Iteration 3 fit: [19.5 s]: Recall = 0.2594, Jaccard score = 0.1819, loss = 0.3325, gradient norm = 0.2629, eval: [8.1 s]
# Iteration 4 fit: [18.5 s]: Recall = 0.2602, Jaccard score = 0.1826, loss = 0.3095, gradient norm = 0.2729, eval: [8.1 s]
# Iteration 5 fit: [19.1 s]: Recall = 0.2546, Jaccard score = 0.1780, loss = 0.2871, gradient norm = 0.2812, eval: [8.0 s]
# Iteration 6 fit: [18.8 s]: Recall = 0.2509, Jaccard score = 0.1749, loss = 0.2659, gradient norm = 0.2877, eval: [8.0 s]
# Iteration 7 fit: [19.0 s]: Recall = 0.2521, Jaccard score = 0.1759, loss = 0.2450, gradient norm = 0.2891, eval: [8.0 s]
# Iteration 8 fit: [18.9 s]: Recall = 0.2491, Jaccard score = 0.1735, loss = 0.2246, gradient norm = 0.2906, eval: [8.0 s]
# Iteration 9 fit: [18.9 s]: Recall = 0.2480, Jaccard score = 0.1725, loss = 0.2064, gradient norm = 0.2887, eval: [8.1 s]
# Iteration 10 fit: [18.9 s]: Recall = 0.2552, Jaccard score = 0.1784, loss = 0.1881, gradient norm = 0.2857, eval: [8.0 s]
# Iteration 11 fit: [19.1 s]: Recall = 0.2479, Jaccard score = 0.1724, loss = 0.1734, gradient norm = 0.2828, eval: [8.1 s]
# Iteration 12 fit: [18.9 s]: Recall = 0.2549, Jaccard score = 0.1782, loss = 0.1586, gradient norm = 0.2772, eval: [8.1 s]
# Iteration 13 fit: [18.9 s]: Recall = 0.2490, Jaccard score = 0.1734, loss = 0.1453, gradient norm = 0.2717, eval: [8.0 s]
# Iteration 14 fit: [19.1 s]: Recall = 0.2529, Jaccard score = 0.1766, loss = 0.1341, gradient norm = 0.2662, eval: [8.0 s]
# Iteration 15 fit: [18.9 s]: Recall = 0.2488, Jaccard score = 0.1732, loss = 0.1235, gradient norm = 0.2597, eval: [8.0 s]
# Iteration 16 fit: [19.0 s]: Recall = 0.2565, Jaccard score = 0.1795, loss = 0.1149, gradient norm = 0.2537, eval: [8.1 s]
# Iteration 17 fit: [19.0 s]: Recall = 0.2562, Jaccard score = 0.1793, loss = 0.1051, gradient norm = 0.2477, eval: [8.0 s]
# Iteration 18 fit: [18.9 s]: Recall = 0.2584, Jaccard score = 0.1811, loss = 0.0979, gradient norm = 0.2411, eval: [8.0 s]
# Iteration 19 fit: [19.0 s]: Recall = 0.2574, Jaccard score = 0.1802, loss = 0.0912, gradient norm = 0.2345, eval: [8.1 s]
# Iteration 20 fit: [18.9 s]: Recall = 0.2597, Jaccard score = 0.1821, loss = 0.0849, gradient norm = 0.2280, eval: [8.0 s]
# Iteration 21 fit: [19.0 s]: Recall = 0.2578, Jaccard score = 0.1806, loss = 0.0797, gradient norm = 0.2222, eval: [7.9 s]
# Iteration 22 fit: [18.9 s]: Recall = 0.2618, Jaccard score = 0.1839, loss = 0.0743, gradient norm = 0.2167, eval: [8.0 s]
# Iteration 23 fit: [19.2 s]: Recall = 0.2666, Jaccard score = 0.1879, loss = 0.0700, gradient norm = 0.2102, eval: [8.1 s]
# Iteration 24 fit: [19.2 s]: Recall = 0.2614, Jaccard score = 0.1835, loss = 0.0663, gradient norm = 0.2053, eval: [8.1 s]
# Iteration 25 fit: [19.0 s]: Recall = 0.2670, Jaccard score = 0.1882, loss = 0.0632, gradient norm = 0.2001, eval: [8.0 s]
# Iteration 26 fit: [19.1 s]: Recall = 0.2675, Jaccard score = 0.1887, loss = 0.0604, gradient norm = 0.1948, eval: [8.0 s]
# Iteration 27 fit: [18.8 s]: Recall = 0.2653, Jaccard score = 0.1868, loss = 0.0572, gradient norm = 0.1894, eval: [8.1 s]
# Iteration 28 fit: [18.9 s]: Recall = 0.2697, Jaccard score = 0.1905, loss = 0.0545, gradient norm = 0.1849, eval: [8.1 s]
# Iteration 29 fit: [18.7 s]: Recall = 0.2656, Jaccard score = 0.1871, loss = 0.0521, gradient norm = 0.1799, eval: [8.1 s]
# Iteration 30 fit: [19.0 s]: Recall = 0.2686, Jaccard score = 0.1896, loss = 0.0498, gradient norm = 0.1757, eval: [8.1 s]
# Iteration 31 fit: [18.7 s]: Recall = 0.2722, Jaccard score = 0.1926, loss = 0.0469, gradient norm = 0.1707, eval: [8.1 s]
# Iteration 32 fit: [18.6 s]: Recall = 0.2667, Jaccard score = 0.1880, loss = 0.0457, gradient norm = 0.1677, eval: [8.2 s]
# Iteration 33 fit: [18.5 s]: Recall = 0.2731, Jaccard score = 0.1934, loss = 0.0436, gradient norm = 0.1631, eval: [8.1 s]
# Iteration 34 fit: [19.0 s]: Recall = 0.2767, Jaccard score = 0.1964, loss = 0.0414, gradient norm = 0.1578, eval: [8.2 s]
# Iteration 35 fit: [19.0 s]: Recall = 0.2787, Jaccard score = 0.1981, loss = 0.0396, gradient norm = 0.1549, eval: [8.1 s]
# Iteration 36 fit: [18.5 s]: Recall = 0.2726, Jaccard score = 0.1929, loss = 0.0384, gradient norm = 0.1505, eval: [8.1 s]
# Iteration 37 fit: [18.8 s]: Recall = 0.2735, Jaccard score = 0.1937, loss = 0.0371, gradient norm = 0.1482, eval: [8.1 s]
# Iteration 38 fit: [18.8 s]: Recall = 0.2838, Jaccard score = 0.2024, loss = 0.0353, gradient norm = 0.1435, eval: [8.8 s]
# Iteration 39 fit: [18.6 s]: Recall = 0.2767, Jaccard score = 0.1964, loss = 0.0345, gradient norm = 0.1413, eval: [8.2 s]
# Iteration 40 fit: [18.7 s]: Recall = 0.2794, Jaccard score = 0.1987, loss = 0.0326, gradient norm = 0.1368, eval: [8.1 s]
# Iteration 41 fit: [18.8 s]: Recall = 0.2831, Jaccard score = 0.2019, loss = 0.0316, gradient norm = 0.1332, eval: [8.1 s]
# Iteration 42 fit: [18.6 s]: Recall = 0.2806, Jaccard score = 0.1997, loss = 0.0308, gradient norm = 0.1307, eval: [8.2 s]
# Iteration 43 fit: [18.6 s]: Recall = 0.2835, Jaccard score = 0.2022, loss = 0.0296, gradient norm = 0.1281, eval: [8.1 s]
# Iteration 44 fit: [18.6 s]: Recall = 0.2802, Jaccard score = 0.1994, loss = 0.0286, gradient norm = 0.1246, eval: [8.2 s]
# Iteration 45 fit: [18.6 s]: Recall = 0.2831, Jaccard score = 0.2019, loss = 0.0283, gradient norm = 0.1223, eval: [8.2 s]
# Iteration 46 fit: [18.6 s]: Recall = 0.2876, Jaccard score = 0.2058, loss = 0.0270, gradient norm = 0.1190, eval: [8.2 s]
# Iteration 47 fit: [19.1 s]: Recall = 0.2871, Jaccard score = 0.2053, loss = 0.0257, gradient norm = 0.1152, eval: [8.1 s]
# Iteration 48 fit: [18.6 s]: Recall = 0.2866, Jaccard score = 0.2049, loss = 0.0252, gradient norm = 0.1128, eval: [8.1 s]
# Iteration 49 fit: [19.0 s]: Recall = 0.2863, Jaccard score = 0.2046, loss = 0.0246, gradient norm = 0.1115, eval: [8.1 s]
# Iteration 50 fit: [19.1 s]: Recall = 0.2892, Jaccard score = 0.2072, loss = 0.0239, gradient norm = 0.1085, eval: [8.0 s]
# Iteration 51 fit: [18.6 s]: Recall = 0.2882, Jaccard score = 0.2063, loss = 0.0231, gradient norm = 0.1063, eval: [8.1 s]
# Iteration 52 fit: [18.8 s]: Recall = 0.2857, Jaccard score = 0.2041, loss = 0.0227, gradient norm = 0.1037, eval: [8.1 s]
# Iteration 53 fit: [18.8 s]: Recall = 0.2936, Jaccard score = 0.2109, loss = 0.0222, gradient norm = 0.1026, eval: [8.1 s]
# Iteration 54 fit: [19.1 s]: Recall = 0.2868, Jaccard score = 0.2051, loss = 0.0215, gradient norm = 0.0997, eval: [8.1 s]
# Iteration 55 fit: [19.1 s]: Recall = 0.2918, Jaccard score = 0.2093, loss = 0.0207, gradient norm = 0.0975, eval: [8.1 s]
# Iteration 56 fit: [19.1 s]: Recall = 0.2906, Jaccard score = 0.2084, loss = 0.0204, gradient norm = 0.0956, eval: [8.1 s]
# Iteration 57 fit: [19.1 s]: Recall = 0.2890, Jaccard score = 0.2070, loss = 0.0199, gradient norm = 0.0945, eval: [8.1 s]
# Iteration 58 fit: [18.9 s]: Recall = 0.2929, Jaccard score = 0.2103, loss = 0.0193, gradient norm = 0.0921, eval: [8.1 s]
# Iteration 59 fit: [19.0 s]: Recall = 0.2953, Jaccard score = 0.2124, loss = 0.0189, gradient norm = 0.0908, eval: [8.1 s]
# Iteration 60 fit: [19.1 s]: Recall = 0.2976, Jaccard score = 0.2144, loss = 0.0189, gradient norm = 0.0904, eval: [8.2 s]
# Iteration 61 fit: [19.1 s]: Recall = 0.2980, Jaccard score = 0.2148, loss = 0.0181, gradient norm = 0.0874, eval: [8.2 s]
# Iteration 62 fit: [18.8 s]: Recall = 0.2976, Jaccard score = 0.2144, loss = 0.0178, gradient norm = 0.0864, eval: [8.2 s]
# Iteration 63 fit: [18.7 s]: Recall = 0.2952, Jaccard score = 0.2123, loss = 0.0174, gradient norm = 0.0848, eval: [8.1 s]
# Iteration 64 fit: [18.6 s]: Recall = 0.2960, Jaccard score = 0.2130, loss = 0.0168, gradient norm = 0.0832, eval: [8.1 s]
# Iteration 65 fit: [18.6 s]: Recall = 0.2981, Jaccard score = 0.2149, loss = 0.0166, gradient norm = 0.0816, eval: [8.2 s]
# Iteration 66 fit: [19.1 s]: Recall = 0.3012, Jaccard score = 0.2176, loss = 0.0166, gradient norm = 0.0814, eval: [8.1 s]
# Iteration 67 fit: [19.2 s]: Recall = 0.3004, Jaccard score = 0.2169, loss = 0.0160, gradient norm = 0.0802, eval: [8.3 s]
# Iteration 68 fit: [19.1 s]: Recall = 0.3044, Jaccard score = 0.2204, loss = 0.0158, gradient norm = 0.0787, eval: [8.3 s]
# Iteration 69 fit: [18.7 s]: Recall = 0.3028, Jaccard score = 0.2190, loss = 0.0157, gradient norm = 0.0780, eval: [8.1 s]
# Iteration 70 fit: [19.0 s]: Recall = 0.3021, Jaccard score = 0.2184, loss = 0.0154, gradient norm = 0.0770, eval: [8.1 s]
# Iteration 71 fit: [18.9 s]: Recall = 0.3034, Jaccard score = 0.2195, loss = 0.0154, gradient norm = 0.0770, eval: [8.1 s]
# Iteration 72 fit: [19.0 s]: Recall = 0.3034, Jaccard score = 0.2195, loss = 0.0148, gradient norm = 0.0755, eval: [8.0 s]
# Iteration 73 fit: [18.9 s]: Recall = 0.3025, Jaccard score = 0.2187, loss = 0.0147, gradient norm = 0.0751, eval: [8.0 s]
# Iteration 74 fit: [19.0 s]: Recall = 0.3056, Jaccard score = 0.2215, loss = 0.0145, gradient norm = 0.0739, eval: [8.0 s]
# Iteration 75 fit: [19.2 s]: Recall = 0.3107, Jaccard score = 0.2260, loss = 0.0143, gradient norm = 0.0733, eval: [8.2 s]
# Iteration 76 fit: [19.2 s]: Recall = 0.3097, Jaccard score = 0.2251, loss = 0.0141, gradient norm = 0.0730, eval: [8.1 s]
# Iteration 77 fit: [19.1 s]: Recall = 0.3064, Jaccard score = 0.2222, loss = 0.0139, gradient norm = 0.0723, eval: [8.1 s]
# Iteration 78 fit: [19.2 s]: Recall = 0.3101, Jaccard score = 0.2255, loss = 0.0138, gradient norm = 0.0725, eval: [8.1 s]
# Iteration 79 fit: [19.1 s]: Recall = 0.3123, Jaccard score = 0.2275, loss = 0.0137, gradient norm = 0.0718, eval: [8.1 s]
# Iteration 80 fit: [19.2 s]: Recall = 0.3107, Jaccard score = 0.2260, loss = 0.0132, gradient norm = 0.0703, eval: [8.1 s]
# Iteration 81 fit: [19.2 s]: Recall = 0.3107, Jaccard score = 0.2260, loss = 0.0132, gradient norm = 0.0705, eval: [8.1 s]
# Iteration 82 fit: [19.4 s]: Recall = 0.3101, Jaccard score = 0.2255, loss = 0.0130, gradient norm = 0.0699, eval: [8.1 s]
# Iteration 83 fit: [19.2 s]: Recall = 0.3124, Jaccard score = 0.2276, loss = 0.0128, gradient norm = 0.0689, eval: [8.1 s]
# Iteration 84 fit: [18.7 s]: Recall = 0.3081, Jaccard score = 0.2237, loss = 0.0129, gradient norm = 0.0702, eval: [8.2 s]
# Iteration 85 fit: [19.5 s]: Recall = 0.3159, Jaccard score = 0.2306, loss = 0.0126, gradient norm = 0.0692, eval: [8.1 s]
# Iteration 86 fit: [19.1 s]: Recall = 0.3160, Jaccard score = 0.2307, loss = 0.0123, gradient norm = 0.0683, eval: [8.1 s]
# Iteration 87 fit: [18.7 s]: Recall = 0.3157, Jaccard score = 0.2305, loss = 0.0124, gradient norm = 0.0691, eval: [8.2 s]
# Iteration 88 fit: [18.7 s]: Recall = 0.3161, Jaccard score = 0.2308, loss = 0.0122, gradient norm = 0.0686, eval: [8.2 s]
# Iteration 89 fit: [19.2 s]: Recall = 0.3141, Jaccard score = 0.2291, loss = 0.0121, gradient norm = 0.0685, eval: [8.1 s]
# Iteration 90 fit: [18.7 s]: Recall = 0.3159, Jaccard score = 0.2306, loss = 0.0119, gradient norm = 0.0679, eval: [8.1 s]
# Iteration 91 fit: [19.2 s]: Recall = 0.3165, Jaccard score = 0.2312, loss = 0.0118, gradient norm = 0.0681, eval: [8.2 s]
# Iteration 92 fit: [18.7 s]: Recall = 0.3159, Jaccard score = 0.2306, loss = 0.0115, gradient norm = 0.0673, eval: [8.0 s]
# Iteration 93 fit: [18.8 s]: Recall = 0.3165, Jaccard score = 0.2312, loss = 0.0116, gradient norm = 0.0681, eval: [8.1 s]
# Iteration 94 fit: [18.7 s]: Recall = 0.3164, Jaccard score = 0.2311, loss = 0.0117, gradient norm = 0.0690, eval: [8.0 s]
# Iteration 95 fit: [18.7 s]: Recall = 0.3167, Jaccard score = 0.2313, loss = 0.0114, gradient norm = 0.0679, eval: [8.0 s]
# Iteration 96 fit: [19.2 s]: Recall = 0.3156, Jaccard score = 0.2304, loss = 0.0115, gradient norm = 0.0680, eval: [8.1 s]
# Iteration 97 fit: [19.2 s]: Recall = 0.3185, Jaccard score = 0.2330, loss = 0.0113, gradient norm = 0.0681, eval: [8.2 s]
# Iteration 98 fit: [19.2 s]: Recall = 0.3195, Jaccard score = 0.2339, loss = 0.0113, gradient norm = 0.0683, eval: [8.1 s]
# Iteration 99 fit: [18.7 s]: Recall = 0.3180, Jaccard score = 0.2326, loss = 0.0112, gradient norm = 0.0680, eval: [8.1 s]
# Iteration 100 fit: [19.2 s]: Recall = 0.3170, Jaccard score = 0.2317, loss = 0.0112, gradient norm = 0.0684, eval: [8.1 s]
# Iteration 101 fit: [19.2 s]: Recall = 0.3213, Jaccard score = 0.2356, loss = 0.0109, gradient norm = 0.0678, eval: [8.1 s]
# Iteration 102 fit: [18.9 s]: Recall = 0.3197, Jaccard score = 0.2341, loss = 0.0110, gradient norm = 0.0689, eval: [8.1 s]
# Iteration 103 fit: [18.7 s]: Recall = 0.3172, Jaccard score = 0.2319, loss = 0.0107, gradient norm = 0.0674, eval: [8.1 s]
# Iteration 104 fit: [18.7 s]: Recall = 0.3209, Jaccard score = 0.2352, loss = 0.0106, gradient norm = 0.0683, eval: [8.1 s]
# Iteration 105 fit: [18.8 s]: Recall = 0.3189, Jaccard score = 0.2334, loss = 0.0106, gradient norm = 0.0683, eval: [8.1 s]
# Iteration 106 fit: [18.7 s]: Recall = 0.3228, Jaccard score = 0.2369, loss = 0.0108, gradient norm = 0.0696, eval: [8.1 s]
# Iteration 107 fit: [19.5 s]: Recall = 0.3215, Jaccard score = 0.2357, loss = 0.0106, gradient norm = 0.0692, eval: [8.2 s]
# Iteration 108 fit: [19.2 s]: Recall = 0.3225, Jaccard score = 0.2366, loss = 0.0104, gradient norm = 0.0684, eval: [8.1 s]
# Iteration 109 fit: [19.4 s]: Recall = 0.3212, Jaccard score = 0.2355, loss = 0.0103, gradient norm = 0.0684, eval: [8.2 s]
# Iteration 110 fit: [19.3 s]: Recall = 0.3219, Jaccard score = 0.2361, loss = 0.0102, gradient norm = 0.0682, eval: [8.2 s]
# Iteration 111 fit: [19.3 s]: Recall = 0.3204, Jaccard score = 0.2347, loss = 0.0102, gradient norm = 0.0692, eval: [8.1 s]
# Iteration 112 fit: [19.3 s]: Recall = 0.3225, Jaccard score = 0.2366, loss = 0.0103, gradient norm = 0.0694, eval: [8.3 s]
# Iteration 113 fit: [19.3 s]: Recall = 0.3204, Jaccard score = 0.2347, loss = 0.0101, gradient norm = 0.0689, eval: [8.1 s]
# Iteration 114 fit: [19.3 s]: Recall = 0.3188, Jaccard score = 0.2333, loss = 0.0101, gradient norm = 0.0704, eval: [8.2 s]
# Iteration 115 fit: [19.2 s]: Recall = 0.3239, Jaccard score = 0.2379, loss = 0.0099, gradient norm = 0.0688, eval: [8.2 s]
# Iteration 116 fit: [18.8 s]: Recall = 0.3226, Jaccard score = 0.2367, loss = 0.0097, gradient norm = 0.0679, eval: [8.1 s]
# Iteration 117 fit: [19.3 s]: Recall = 0.3210, Jaccard score = 0.2353, loss = 0.0097, gradient norm = 0.0697, eval: [8.1 s]
# Iteration 118 fit: [19.3 s]: Recall = 0.3255, Jaccard score = 0.2393, loss = 0.0099, gradient norm = 0.0708, eval: [8.2 s]
# Iteration 119 fit: [18.8 s]: Recall = 0.3245, Jaccard score = 0.2385, loss = 0.0098, gradient norm = 0.0710, eval: [8.2 s]
# Iteration 120 fit: [18.8 s]: Recall = 0.3251, Jaccard score = 0.2390, loss = 0.0096, gradient norm = 0.0705, eval: [8.1 s]
# Iteration 121 fit: [18.7 s]: Recall = 0.3223, Jaccard score = 0.2364, loss = 0.0097, gradient norm = 0.0706, eval: [8.1 s]
# Iteration 122 fit: [18.8 s]: Recall = 0.3251, Jaccard score = 0.2390, loss = 0.0097, gradient norm = 0.0714, eval: [8.1 s]
# Iteration 123 fit: [18.8 s]: Recall = 0.3256, Jaccard score = 0.2394, loss = 0.0094, gradient norm = 0.0708, eval: [8.1 s]
# Iteration 124 fit: [18.8 s]: Recall = 0.3255, Jaccard score = 0.2393, loss = 0.0094, gradient norm = 0.0705, eval: [8.1 s]
# Iteration 125 fit: [18.8 s]: Recall = 0.3236, Jaccard score = 0.2376, loss = 0.0095, gradient norm = 0.0721, eval: [8.1 s]
# Iteration 126 fit: [18.8 s]: Recall = 0.3247, Jaccard score = 0.2386, loss = 0.0093, gradient norm = 0.0708, eval: [8.1 s]
# Iteration 127 fit: [18.8 s]: Recall = 0.3308, Jaccard score = 0.2442, loss = 0.0092, gradient norm = 0.0711, eval: [8.1 s]
# Iteration 128 fit: [19.3 s]: Recall = 0.3253, Jaccard score = 0.2392, loss = 0.0090, gradient norm = 0.0707, eval: [8.2 s]
# Iteration 129 fit: [19.3 s]: Recall = 0.3258, Jaccard score = 0.2396, loss = 0.0092, gradient norm = 0.0724, eval: [8.2 s]
# Iteration 130 fit: [19.3 s]: Recall = 0.3294, Jaccard score = 0.2430, loss = 0.0089, gradient norm = 0.0707, eval: [8.3 s]
# Iteration 131 fit: [19.3 s]: Recall = 0.3275, Jaccard score = 0.2412, loss = 0.0087, gradient norm = 0.0705, eval: [8.2 s]
# Iteration 132 fit: [19.3 s]: Recall = 0.3249, Jaccard score = 0.2388, loss = 0.0093, gradient norm = 0.0746, eval: [8.2 s]
# Iteration 133 fit: [19.3 s]: Recall = 0.3305, Jaccard score = 0.2439, loss = 0.0089, gradient norm = 0.0724, eval: [8.5 s]
# Iteration 134 fit: [19.5 s]: Recall = 0.3256, Jaccard score = 0.2394, loss = 0.0089, gradient norm = 0.0728, eval: [8.3 s]
# Iteration 135 fit: [19.3 s]: Recall = 0.3266, Jaccard score = 0.2404, loss = 0.0089, gradient norm = 0.0737, eval: [8.2 s]
# Iteration 136 fit: [19.3 s]: Recall = 0.3253, Jaccard score = 0.2392, loss = 0.0088, gradient norm = 0.0732, eval: [8.3 s]
# Iteration 137 fit: [19.3 s]: Recall = 0.3275, Jaccard score = 0.2412, loss = 0.0086, gradient norm = 0.0723, eval: [8.3 s]
# Iteration 138 fit: [19.3 s]: Recall = 0.3285, Jaccard score = 0.2421, loss = 0.0086, gradient norm = 0.0732, eval: [8.2 s]
# Iteration 139 fit: [19.4 s]: Recall = 0.3298, Jaccard score = 0.2433, loss = 0.0087, gradient norm = 0.0741, eval: [8.2 s]
# Iteration 140 fit: [19.3 s]: Recall = 0.3293, Jaccard score = 0.2429, loss = 0.0086, gradient norm = 0.0737, eval: [8.2 s]
# Iteration 141 fit: [18.8 s]: Recall = 0.3298, Jaccard score = 0.2433, loss = 0.0089, gradient norm = 0.0762, eval: [8.3 s]
# Iteration 142 fit: [18.8 s]: Recall = 0.3265, Jaccard score = 0.2402, loss = 0.0085, gradient norm = 0.0737, eval: [8.2 s]
# Iteration 143 fit: [18.9 s]: Recall = 0.3268, Jaccard score = 0.2406, loss = 0.0085, gradient norm = 0.0739, eval: [8.3 s]
# Iteration 144 fit: [18.8 s]: Recall = 0.3218, Jaccard score = 0.2360, loss = 0.0086, gradient norm = 0.0756, eval: [8.2 s]
# Iteration 145 fit: [18.8 s]: Recall = 0.3268, Jaccard score = 0.2406, loss = 0.0085, gradient norm = 0.0751, eval: [8.3 s]
# Iteration 146 fit: [18.8 s]: Recall = 0.3298, Jaccard score = 0.2433, loss = 0.0085, gradient norm = 0.0761, eval: [8.2 s]
# Iteration 147 fit: [18.8 s]: Recall = 0.3281, Jaccard score = 0.2417, loss = 0.0084, gradient norm = 0.0759, eval: [8.3 s]
# Iteration 148 fit: [18.8 s]: Recall = 0.3294, Jaccard score = 0.2430, loss = 0.0084, gradient norm = 0.0761, eval: [8.2 s]
# Iteration 149 fit: [18.9 s]: Recall = 0.3302, Jaccard score = 0.2437, loss = 0.0083, gradient norm = 0.0756, eval: [8.2 s]
# Iteration 150 fit: [18.8 s]: Recall = 0.3298, Jaccard score = 0.2433, loss = 0.0084, gradient norm = 0.0770, eval: [8.3 s]
# Iteration 151 fit: [18.9 s]: Recall = 0.3258, Jaccard score = 0.2396, loss = 0.0082, gradient norm = 0.0759, eval: [8.2 s]
# Iteration 152 fit: [18.9 s]: Recall = 0.3304, Jaccard score = 0.2438, loss = 0.0080, gradient norm = 0.0755, eval: [8.2 s]
# Iteration 153 fit: [18.9 s]: Recall = 0.3328, Jaccard score = 0.2460, loss = 0.0082, gradient norm = 0.0763, eval: [8.3 s]
# Iteration 154 fit: [19.4 s]: Recall = 0.3300, Jaccard score = 0.2435, loss = 0.0081, gradient norm = 0.0764, eval: [8.1 s]
# Iteration 155 fit: [19.3 s]: Recall = 0.3312, Jaccard score = 0.2445, loss = 0.0083, gradient norm = 0.0780, eval: [8.1 s]
# Iteration 156 fit: [18.9 s]: Recall = 0.3306, Jaccard score = 0.2440, loss = 0.0079, gradient norm = 0.0757, eval: [8.1 s]
# Iteration 157 fit: [19.4 s]: Recall = 0.3261, Jaccard score = 0.2399, loss = 0.0081, gradient norm = 0.0785, eval: [8.1 s]
# Iteration 158 fit: [18.9 s]: Recall = 0.3261, Jaccard score = 0.2399, loss = 0.0081, gradient norm = 0.0784, eval: [8.1 s]
# Iteration 159 fit: [18.9 s]: Recall = 0.3266, Jaccard score = 0.2404, loss = 0.0080, gradient norm = 0.0780, eval: [8.1 s]
# Iteration 160 fit: [19.3 s]: Recall = 0.3275, Jaccard score = 0.2412, loss = 0.0078, gradient norm = 0.0770, eval: [8.1 s]
# Iteration 161 fit: [19.4 s]: Recall = 0.3326, Jaccard score = 0.2459, loss = 0.0079, gradient norm = 0.0786, eval: [8.1 s]
# Iteration 162 fit: [18.9 s]: Recall = 0.3282, Jaccard score = 0.2418, loss = 0.0078, gradient norm = 0.0785, eval: [8.1 s]
# Iteration 163 fit: [18.9 s]: Recall = 0.3259, Jaccard score = 0.2397, loss = 0.0078, gradient norm = 0.0782, eval: [8.1 s]
# Iteration 164 fit: [19.4 s]: Recall = 0.3318, Jaccard score = 0.2452, loss = 0.0079, gradient norm = 0.0781, eval: [8.1 s]
# Iteration 165 fit: [18.9 s]: Recall = 0.3301, Jaccard score = 0.2436, loss = 0.0077, gradient norm = 0.0788, eval: [8.5 s]
# Iteration 166 fit: [19.4 s]: Recall = 0.3317, Jaccard score = 0.2451, loss = 0.0078, gradient norm = 0.0788, eval: [8.1 s]
# Iteration 167 fit: [19.4 s]: Recall = 0.3292, Jaccard score = 0.2428, loss = 0.0077, gradient norm = 0.0793, eval: [8.1 s]
# Iteration 168 fit: [19.4 s]: Recall = 0.3302, Jaccard score = 0.2437, loss = 0.0079, gradient norm = 0.0807, eval: [8.0 s]
# Iteration 169 fit: [19.4 s]: Recall = 0.3291, Jaccard score = 0.2427, loss = 0.0076, gradient norm = 0.0796, eval: [8.1 s]
# Iteration 170 fit: [19.4 s]: Recall = 0.3279, Jaccard score = 0.2415, loss = 0.0075, gradient norm = 0.0790, eval: [8.0 s]
# Iteration 171 fit: [19.4 s]: Recall = 0.3285, Jaccard score = 0.2421, loss = 0.0078, gradient norm = 0.0810, eval: [8.1 s]
# Iteration 172 fit: [19.4 s]: Recall = 0.3304, Jaccard score = 0.2438, loss = 0.0076, gradient norm = 0.0804, eval: [8.0 s]
# Iteration 173 fit: [19.6 s]: Recall = 0.3286, Jaccard score = 0.2422, loss = 0.0077, gradient norm = 0.0815, eval: [8.0 s]
# Iteration 174 fit: [19.4 s]: Recall = 0.3299, Jaccard score = 0.2434, loss = 0.0076, gradient norm = 0.0808, eval: [8.0 s]
# Iteration 175 fit: [19.4 s]: Recall = 0.3304, Jaccard score = 0.2438, loss = 0.0075, gradient norm = 0.0806, eval: [8.1 s]
# Iteration 176 fit: [19.5 s]: Recall = 0.3364, Jaccard score = 0.2494, loss = 0.0075, gradient norm = 0.0808, eval: [8.1 s]
# Iteration 177 fit: [19.1 s]: Recall = 0.3323, Jaccard score = 0.2456, loss = 0.0076, gradient norm = 0.0823, eval: [8.2 s]
# Iteration 178 fit: [19.0 s]: Recall = 0.3268, Jaccard score = 0.2406, loss = 0.0076, gradient norm = 0.0830, eval: [8.2 s]
# Iteration 179 fit: [18.9 s]: Recall = 0.3297, Jaccard score = 0.2432, loss = 0.0074, gradient norm = 0.0821, eval: [8.1 s]
# Iteration 180 fit: [19.4 s]: Recall = 0.3289, Jaccard score = 0.2424, loss = 0.0075, gradient norm = 0.0823, eval: [8.1 s]
# Iteration 181 fit: [19.0 s]: Recall = 0.3268, Jaccard score = 0.2406, loss = 0.0073, gradient norm = 0.0818, eval: [8.1 s]
# Iteration 182 fit: [19.4 s]: Recall = 0.3318, Jaccard score = 0.2452, loss = 0.0073, gradient norm = 0.0818, eval: [8.1 s]
# Iteration 183 fit: [19.0 s]: Recall = 0.3310, Jaccard score = 0.2444, loss = 0.0073, gradient norm = 0.0827, eval: [8.1 s]
# Iteration 184 fit: [19.4 s]: Recall = 0.3358, Jaccard score = 0.2489, loss = 0.0071, gradient norm = 0.0817, eval: [8.1 s]
# Iteration 185 fit: [19.0 s]: Recall = 0.3299, Jaccard score = 0.2434, loss = 0.0074, gradient norm = 0.0838, eval: [8.1 s]
# Iteration 186 fit: [19.4 s]: Recall = 0.3323, Jaccard score = 0.2456, loss = 0.0070, gradient norm = 0.0810, eval: [8.1 s]
# Iteration 187 fit: [18.9 s]: Recall = 0.3307, Jaccard score = 0.2441, loss = 0.0073, gradient norm = 0.0835, eval: [8.1 s]
# Iteration 188 fit: [19.4 s]: Recall = 0.3313, Jaccard score = 0.2446, loss = 0.0071, gradient norm = 0.0830, eval: [8.1 s]
# Iteration 189 fit: [19.0 s]: Recall = 0.3308, Jaccard score = 0.2442, loss = 0.0070, gradient norm = 0.0825, eval: [8.1 s]
# Iteration 190 fit: [19.4 s]: Recall = 0.3323, Jaccard score = 0.2456, loss = 0.0072, gradient norm = 0.0838, eval: [8.1 s]
# Iteration 191 fit: [19.0 s]: Recall = 0.3305, Jaccard score = 0.2439, loss = 0.0070, gradient norm = 0.0829, eval: [8.1 s]
# Iteration 192 fit: [19.6 s]: Recall = 0.3296, Jaccard score = 0.2431, loss = 0.0072, gradient norm = 0.0848, eval: [8.1 s]
# Iteration 193 fit: [19.0 s]: Recall = 0.3330, Jaccard score = 0.2462, loss = 0.0071, gradient norm = 0.0844, eval: [8.1 s]
# Iteration 194 fit: [19.4 s]: Recall = 0.3331, Jaccard score = 0.2463, loss = 0.0067, gradient norm = 0.0818, eval: [8.1 s]
# Iteration 195 fit: [19.0 s]: Recall = 0.3302, Jaccard score = 0.2437, loss = 0.0070, gradient norm = 0.0841, eval: [8.1 s]
# Iteration 196 fit: [19.4 s]: Recall = 0.3338, Jaccard score = 0.2470, loss = 0.0070, gradient norm = 0.0842, eval: [8.1 s]
# Iteration 197 fit: [19.0 s]: Recall = 0.3280, Jaccard score = 0.2416, loss = 0.0070, gradient norm = 0.0852, eval: [8.1 s]
# Iteration 198 fit: [19.5 s]: Recall = 0.3312, Jaccard score = 0.2445, loss = 0.0070, gradient norm = 0.0855, eval: [8.0 s]
# Iteration 199 fit: [19.2 s]: Recall = 0.3274, Jaccard score = 0.2411, loss = 0.0068, gradient norm = 0.0839, eval: [8.1 s]
# Iteration 200 fit: [19.4 s]: Recall = 0.3322, Jaccard score = 0.2455, loss = 0.0072, gradient norm = 0.0866, eval: [8.2 s]
# Iteration 201 fit: [19.0 s]: Recall = 0.3316, Jaccard score = 0.2450, loss = 0.0070, gradient norm = 0.0858, eval: [8.1 s]
# Iteration 202 fit: [19.4 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0069, gradient norm = 0.0855, eval: [8.1 s]
# Iteration 203 fit: [19.0 s]: Recall = 0.3306, Jaccard score = 0.2440, loss = 0.0067, gradient norm = 0.0845, eval: [8.1 s]
# Iteration 204 fit: [19.6 s]: Recall = 0.3330, Jaccard score = 0.2462, loss = 0.0068, gradient norm = 0.0858, eval: [8.5 s]
# Iteration 205 fit: [19.0 s]: Recall = 0.3305, Jaccard score = 0.2439, loss = 0.0066, gradient norm = 0.0841, eval: [8.1 s]
# Iteration 206 fit: [19.5 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0066, gradient norm = 0.0860, eval: [8.1 s]
# Iteration 207 fit: [19.0 s]: Recall = 0.3331, Jaccard score = 0.2463, loss = 0.0067, gradient norm = 0.0856, eval: [8.1 s]
# Iteration 208 fit: [19.5 s]: Recall = 0.3326, Jaccard score = 0.2459, loss = 0.0068, gradient norm = 0.0865, eval: [8.1 s]
# Iteration 209 fit: [19.0 s]: Recall = 0.3257, Jaccard score = 0.2395, loss = 0.0067, gradient norm = 0.0861, eval: [8.1 s]
# Iteration 210 fit: [19.7 s]: Recall = 0.3298, Jaccard score = 0.2433, loss = 0.0068, gradient norm = 0.0878, eval: [8.1 s]
# Iteration 211 fit: [19.0 s]: Recall = 0.3336, Jaccard score = 0.2467, loss = 0.0066, gradient norm = 0.0860, eval: [8.1 s]
# Iteration 212 fit: [19.4 s]: Recall = 0.3348, Jaccard score = 0.2479, loss = 0.0067, gradient norm = 0.0879, eval: [8.1 s]
# Iteration 213 fit: [19.0 s]: Recall = 0.3318, Jaccard score = 0.2452, loss = 0.0069, gradient norm = 0.0880, eval: [8.1 s]
# Iteration 214 fit: [19.5 s]: Recall = 0.3316, Jaccard score = 0.2450, loss = 0.0066, gradient norm = 0.0867, eval: [8.0 s]
# Iteration 215 fit: [19.0 s]: Recall = 0.3365, Jaccard score = 0.2495, loss = 0.0067, gradient norm = 0.0882, eval: [8.1 s]
# Iteration 216 fit: [19.2 s]: Recall = 0.3313, Jaccard score = 0.2446, loss = 0.0066, gradient norm = 0.0867, eval: [8.1 s]
# Iteration 217 fit: [19.5 s]: Recall = 0.3325, Jaccard score = 0.2458, loss = 0.0066, gradient norm = 0.0887, eval: [8.2 s]
# Iteration 218 fit: [19.0 s]: Recall = 0.3283, Jaccard score = 0.2419, loss = 0.0069, gradient norm = 0.0901, eval: [8.2 s]
# Iteration 219 fit: [19.5 s]: Recall = 0.3296, Jaccard score = 0.2431, loss = 0.0067, gradient norm = 0.0882, eval: [8.2 s]
# Iteration 220 fit: [19.8 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0066, gradient norm = 0.0885, eval: [8.2 s]
# Iteration 221 fit: [19.1 s]: Recall = 0.3321, Jaccard score = 0.2454, loss = 0.0065, gradient norm = 0.0884, eval: [8.2 s]
# Iteration 222 fit: [19.5 s]: Recall = 0.3307, Jaccard score = 0.2441, loss = 0.0066, gradient norm = 0.0896, eval: [8.1 s]
# Iteration 223 fit: [19.0 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0065, gradient norm = 0.0892, eval: [8.2 s]
# Iteration 224 fit: [19.5 s]: Recall = 0.3309, Jaccard score = 0.2443, loss = 0.0069, gradient norm = 0.0920, eval: [8.1 s]
# Iteration 225 fit: [19.5 s]: Recall = 0.3305, Jaccard score = 0.2439, loss = 0.0066, gradient norm = 0.0903, eval: [8.2 s]
# Iteration 226 fit: [19.5 s]: Recall = 0.3288, Jaccard score = 0.2423, loss = 0.0066, gradient norm = 0.0911, eval: [8.0 s]
# Iteration 227 fit: [19.1 s]: Recall = 0.3338, Jaccard score = 0.2470, loss = 0.0065, gradient norm = 0.0897, eval: [8.0 s]
# Iteration 228 fit: [19.5 s]: Recall = 0.3332, Jaccard score = 0.2464, loss = 0.0064, gradient norm = 0.0890, eval: [8.1 s]
# Iteration 229 fit: [19.1 s]: Recall = 0.3324, Jaccard score = 0.2457, loss = 0.0064, gradient norm = 0.0909, eval: [8.0 s]
# Iteration 230 fit: [19.5 s]: Recall = 0.3320, Jaccard score = 0.2453, loss = 0.0065, gradient norm = 0.0902, eval: [8.0 s]
# Iteration 231 fit: [19.1 s]: Recall = 0.3322, Jaccard score = 0.2455, loss = 0.0066, gradient norm = 0.0916, eval: [8.0 s]
# Iteration 232 fit: [19.5 s]: Recall = 0.3349, Jaccard score = 0.2480, loss = 0.0065, gradient norm = 0.0912, eval: [8.1 s]
# Iteration 233 fit: [19.1 s]: Recall = 0.3361, Jaccard score = 0.2491, loss = 0.0063, gradient norm = 0.0910, eval: [8.0 s]
# Iteration 234 fit: [19.6 s]: Recall = 0.3325, Jaccard score = 0.2458, loss = 0.0066, gradient norm = 0.0928, eval: [8.0 s]
# Iteration 235 fit: [19.1 s]: Recall = 0.3321, Jaccard score = 0.2454, loss = 0.0062, gradient norm = 0.0908, eval: [8.1 s]
# Iteration 236 fit: [19.5 s]: Recall = 0.3320, Jaccard score = 0.2453, loss = 0.0064, gradient norm = 0.0924, eval: [8.1 s]
# Iteration 237 fit: [19.1 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0063, gradient norm = 0.0916, eval: [8.1 s]
# Iteration 238 fit: [19.5 s]: Recall = 0.3333, Jaccard score = 0.2465, loss = 0.0064, gradient norm = 0.0923, eval: [8.1 s]
# Iteration 239 fit: [19.1 s]: Recall = 0.3314, Jaccard score = 0.2447, loss = 0.0063, gradient norm = 0.0918, eval: [8.1 s]
# Iteration 240 fit: [19.6 s]: Recall = 0.3331, Jaccard score = 0.2463, loss = 0.0063, gradient norm = 0.0925, eval: [8.0 s]
# Iteration 241 fit: [19.1 s]: Recall = 0.3297, Jaccard score = 0.2432, loss = 0.0064, gradient norm = 0.0934, eval: [8.0 s]
# Iteration 242 fit: [19.5 s]: Recall = 0.3322, Jaccard score = 0.2455, loss = 0.0061, gradient norm = 0.0899, eval: [8.0 s]
# Iteration 243 fit: [19.1 s]: Recall = 0.3362, Jaccard score = 0.2492, loss = 0.0062, gradient norm = 0.0934, eval: [8.0 s]
# Iteration 244 fit: [19.6 s]: Recall = 0.3334, Jaccard score = 0.2466, loss = 0.0065, gradient norm = 0.0951, eval: [8.1 s]
# Iteration 245 fit: [19.3 s]: Recall = 0.3312, Jaccard score = 0.2445, loss = 0.0062, gradient norm = 0.0914, eval: [8.1 s]
# Iteration 246 fit: [19.6 s]: Recall = 0.3329, Jaccard score = 0.2461, loss = 0.0062, gradient norm = 0.0929, eval: [8.1 s]
# Iteration 247 fit: [19.1 s]: Recall = 0.3324, Jaccard score = 0.2457, loss = 0.0062, gradient norm = 0.0940, eval: [8.1 s]
# Iteration 248 fit: [19.6 s]: Recall = 0.3292, Jaccard score = 0.2428, loss = 0.0060, gradient norm = 0.0915, eval: [8.1 s]
# Iteration 249 fit: [19.3 s]: Recall = 0.3352, Jaccard score = 0.2482, loss = 0.0060, gradient norm = 0.0919, eval: [8.1 s]
# Iteration 250 fit: [19.5 s]: Recall = 0.3284, Jaccard score = 0.2420, loss = 0.0062, gradient norm = 0.0948, eval: [8.1 s]
# Iteration 251 fit: [19.1 s]: Recall = 0.3341, Jaccard score = 0.2473, loss = 0.0062, gradient norm = 0.0939, eval: [8.1 s]
# Iteration 252 fit: [20.1 s]: Recall = 0.3282, Jaccard score = 0.2418, loss = 0.0060, gradient norm = 0.0930, eval: [8.1 s]
# Iteration 253 fit: [19.2 s]: Recall = 0.3338, Jaccard score = 0.2470, loss = 0.0062, gradient norm = 0.0939, eval: [8.1 s]
# Iteration 254 fit: [19.6 s]: Recall = 0.3378, Jaccard score = 0.2507, loss = 0.0062, gradient norm = 0.0946, eval: [8.1 s]
# Iteration 255 fit: [19.5 s]: Recall = 0.3317, Jaccard score = 0.2451, loss = 0.0061, gradient norm = 0.0951, eval: [8.2 s]
# Iteration 256 fit: [19.9 s]: Recall = 0.3332, Jaccard score = 0.2464, loss = 0.0062, gradient norm = 0.0961, eval: [8.2 s]
# Iteration 257 fit: [19.9 s]: Recall = 0.3315, Jaccard score = 0.2449, loss = 0.0062, gradient norm = 0.0961, eval: [8.1 s]
# Iteration 258 fit: [19.6 s]: Recall = 0.3310, Jaccard score = 0.2444, loss = 0.0062, gradient norm = 0.0970, eval: [8.2 s]
# Iteration 259 fit: [19.2 s]: Recall = 0.3370, Jaccard score = 0.2499, loss = 0.0062, gradient norm = 0.0971, eval: [8.2 s]
# Iteration 260 fit: [19.6 s]: Recall = 0.3326, Jaccard score = 0.2459, loss = 0.0058, gradient norm = 0.0928, eval: [8.2 s]
# Iteration 261 fit: [19.9 s]: Recall = 0.3332, Jaccard score = 0.2464, loss = 0.0062, gradient norm = 0.0973, eval: [8.2 s]
# Iteration 262 fit: [19.1 s]: Recall = 0.3322, Jaccard score = 0.2455, loss = 0.0059, gradient norm = 0.0940, eval: [8.2 s]
# Iteration 263 fit: [19.6 s]: Recall = 0.3312, Jaccard score = 0.2445, loss = 0.0062, gradient norm = 0.0986, eval: [8.2 s]
# Iteration 264 fit: [19.2 s]: Recall = 0.3342, Jaccard score = 0.2474, loss = 0.0064, gradient norm = 0.1019, eval: [8.1 s]
# Iteration 265 fit: [19.2 s]: Recall = 0.3347, Jaccard score = 0.2478, loss = 0.0061, gradient norm = 0.0977, eval: [8.2 s]
# Iteration 266 fit: [19.1 s]: Recall = 0.3376, Jaccard score = 0.2504, loss = 0.0059, gradient norm = 0.0957, eval: [8.2 s]
# Iteration 267 fit: [19.8 s]: Recall = 0.3310, Jaccard score = 0.2444, loss = 0.0060, gradient norm = 0.0981, eval: [8.2 s]
# Iteration 268 fit: [19.7 s]: Recall = 0.3345, Jaccard score = 0.2476, loss = 0.0062, gradient norm = 0.0991, eval: [8.1 s]
# Iteration 269 fit: [19.1 s]: Recall = 0.3331, Jaccard score = 0.2463, loss = 0.0061, gradient norm = 0.0982, eval: [8.1 s]
# Iteration 270 fit: [19.1 s]: Recall = 0.3330, Jaccard score = 0.2462, loss = 0.0060, gradient norm = 0.0969, eval: [8.1 s]
# Iteration 271 fit: [19.2 s]: Recall = 0.3334, Jaccard score = 0.2466, loss = 0.0060, gradient norm = 0.0984, eval: [8.1 s]
# Iteration 272 fit: [19.1 s]: Recall = 0.3341, Jaccard score = 0.2473, loss = 0.0058, gradient norm = 0.0956, eval: [8.1 s]
# Iteration 273 fit: [19.1 s]: Recall = 0.3329, Jaccard score = 0.2461, loss = 0.0060, gradient norm = 0.0985, eval: [8.1 s]
# Iteration 274 fit: [19.2 s]: Recall = 0.3312, Jaccard score = 0.2445, loss = 0.0059, gradient norm = 0.0973, eval: [8.1 s]
# Iteration 275 fit: [19.6 s]: Recall = 0.3320, Jaccard score = 0.2453, loss = 0.0059, gradient norm = 0.0978, eval: [8.1 s]
# Iteration 276 fit: [19.6 s]: Recall = 0.3339, Jaccard score = 0.2471, loss = 0.0061, gradient norm = 0.1006, eval: [8.1 s]
# Iteration 277 fit: [19.2 s]: Recall = 0.3318, Jaccard score = 0.2452, loss = 0.0056, gradient norm = 0.0951, eval: [8.1 s]
# Iteration 278 fit: [19.1 s]: Recall = 0.3329, Jaccard score = 0.2461, loss = 0.0059, gradient norm = 0.0981, eval: [8.1 s]
# Iteration 279 fit: [19.7 s]: Recall = 0.3334, Jaccard score = 0.2466, loss = 0.0058, gradient norm = 0.0987, eval: [8.1 s]
# Iteration 280 fit: [19.6 s]: Recall = 0.3340, Jaccard score = 0.2472, loss = 0.0058, gradient norm = 0.0982, eval: [8.1 s]
# Iteration 281 fit: [19.2 s]: Recall = 0.3344, Jaccard score = 0.2475, loss = 0.0057, gradient norm = 0.0973, eval: [8.1 s]
# Iteration 282 fit: [19.3 s]: Recall = 0.3323, Jaccard score = 0.2456, loss = 0.0059, gradient norm = 0.0984, eval: [8.1 s]
# Iteration 283 fit: [19.7 s]: Recall = 0.3309, Jaccard score = 0.2443, loss = 0.0059, gradient norm = 0.1003, eval: [8.1 s]
# Iteration 284 fit: [19.7 s]: Recall = 0.3291, Jaccard score = 0.2427, loss = 0.0057, gradient norm = 0.0985, eval: [8.1 s]
# Iteration 285 fit: [19.7 s]: Recall = 0.3318, Jaccard score = 0.2452, loss = 0.0058, gradient norm = 0.0997, eval: [8.1 s]
# Iteration 286 fit: [19.8 s]: Recall = 0.3291, Jaccard score = 0.2427, loss = 0.0061, gradient norm = 0.1020, eval: [8.2 s]
# Iteration 287 fit: [19.4 s]: Recall = 0.3329, Jaccard score = 0.2461, loss = 0.0059, gradient norm = 0.0994, eval: [8.1 s]
# Iteration 288 fit: [19.2 s]: Recall = 0.3316, Jaccard score = 0.2450, loss = 0.0060, gradient norm = 0.1019, eval: [8.1 s]
# Iteration 289 fit: [19.7 s]: Recall = 0.3272, Jaccard score = 0.2409, loss = 0.0057, gradient norm = 0.1001, eval: [8.1 s]
# Iteration 290 fit: [20.0 s]: Recall = 0.3357, Jaccard score = 0.2488, loss = 0.0057, gradient norm = 0.1001, eval: [8.1 s]
# Iteration 291 fit: [19.4 s]: Recall = 0.3361, Jaccard score = 0.2491, loss = 0.0057, gradient norm = 0.0991, eval: [8.1 s]
# Iteration 292 fit: [19.2 s]: Recall = 0.3357, Jaccard score = 0.2488, loss = 0.0058, gradient norm = 0.1012, eval: [8.1 s]
# Iteration 293 fit: [19.7 s]: Recall = 0.3342, Jaccard score = 0.2474, loss = 0.0056, gradient norm = 0.0993, eval: [8.1 s]
# Iteration 294 fit: [19.7 s]: Recall = 0.3293, Jaccard score = 0.2429, loss = 0.0058, gradient norm = 0.1015, eval: [8.1 s]
# Iteration 295 fit: [19.3 s]: Recall = 0.3360, Jaccard score = 0.2490, loss = 0.0058, gradient norm = 0.1001, eval: [8.1 s]
# Iteration 296 fit: [22.2 s]: Recall = 0.3347, Jaccard score = 0.2478, loss = 0.0056, gradient norm = 0.0999, eval: [8.6 s]
# Iteration 297 fit: [22.2 s]: Recall = 0.3316, Jaccard score = 0.2450, loss = 0.0056, gradient norm = 0.1008, eval: [8.5 s]
# Iteration 298 fit: [20.1 s]: Recall = 0.3333, Jaccard score = 0.2465, loss = 0.0057, gradient norm = 0.1008, eval: [8.2 s]
# Iteration 299 fit: [21.7 s]: Recall = 0.3329, Jaccard score = 0.2461, loss = 0.0056, gradient norm = 0.1006, eval: [8.2 s]
# End. Best Iteration 254:  Recall = 0.3378, Jaccard score = 0.2507. 
# The best NeuMF model has been saved to Pretrain/_GMF_94_[64,32,16,8]_1566551912.h5
# Model test performed 
# Recall score: 0.15175184110689577     Jaccard score: 0.09998529627995884