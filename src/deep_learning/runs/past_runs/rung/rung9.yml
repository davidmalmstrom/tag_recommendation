--nn_model: MLP
--is_tag: "1"
--eval_recall: "1"
--topk: "3"
#--dataset: "ml-1m"
--big_tag: "0"
--epochs: "70"
--layers: "[128,110,90,75,64]"
--reg_layers: "[0,0,0,0,0]"

# Launched by terminal.
# MLP arguments: Namespace(batch_size=256, big_tag=0, dataset='', epochs=70, eval_recall=1, is_tag=1, layers='[128,110,90,75,64]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='MLP', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0,0,0,0,0]', reg_mf=0, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_MLP_8_[128,110,90,75,64]_1560863182.h5
# Load data done [2.7 s]. #user=17431, #item=986, #train=133134, #test=17431
# Init: Recall = 0.0038, Jaccard score = 0.0021
# Iteration 0 fit: [8.6 s]: Recall = 0.0262, Jaccard score = 0.0143, loss = 0.4548, val_loss = 0.0000, eval: [8.8 s]
# Iteration 1 fit: [7.9 s]: Recall = 0.0288, Jaccard score = 0.0158, loss = 0.4407, val_loss = 0.0000, eval: [8.7 s]
# Iteration 2 fit: [7.9 s]: Recall = 0.0277, Jaccard score = 0.0152, loss = 0.4384, val_loss = 0.0000, eval: [8.9 s]
# Iteration 3 fit: [7.9 s]: Recall = 0.0252, Jaccard score = 0.0138, loss = 0.4339, val_loss = 0.0000, eval: [8.8 s]
# Iteration 4 fit: [7.9 s]: Recall = 0.0285, Jaccard score = 0.0156, loss = 0.4262, val_loss = 0.0000, eval: [8.4 s]
# Iteration 5 fit: [7.9 s]: Recall = 0.0266, Jaccard score = 0.0145, loss = 0.4156, val_loss = 0.0000, eval: [8.6 s]
# Iteration 6 fit: [7.9 s]: Recall = 0.0262, Jaccard score = 0.0143, loss = 0.4032, val_loss = 0.0000, eval: [8.8 s]
# Iteration 7 fit: [7.9 s]: Recall = 0.0243, Jaccard score = 0.0133, loss = 0.3872, val_loss = 0.0000, eval: [8.8 s]
# Iteration 8 fit: [7.9 s]: Recall = 0.0258, Jaccard score = 0.0141, loss = 0.3718, val_loss = 0.0000, eval: [8.4 s]
# Iteration 9 fit: [7.9 s]: Recall = 0.0252, Jaccard score = 0.0138, loss = 0.3555, val_loss = 0.0000, eval: [8.3 s]
# Iteration 10 fit: [7.9 s]: Recall = 0.0260, Jaccard score = 0.0142, loss = 0.3392, val_loss = 0.0000, eval: [8.2 s]
# Iteration 11 fit: [7.9 s]: Recall = 0.0249, Jaccard score = 0.0136, loss = 0.3237, val_loss = 0.0000, eval: [8.6 s]
# Iteration 12 fit: [7.9 s]: Recall = 0.0207, Jaccard score = 0.0113, loss = 0.3083, val_loss = 0.0000, eval: [8.2 s]
# Iteration 13 fit: [7.9 s]: Recall = 0.0230, Jaccard score = 0.0125, loss = 0.2932, val_loss = 0.0000, eval: [8.1 s]
# Iteration 14 fit: [7.9 s]: Recall = 0.0232, Jaccard score = 0.0126, loss = 0.2791, val_loss = 0.0000, eval: [8.9 s]
# Iteration 15 fit: [7.9 s]: Recall = 0.0232, Jaccard score = 0.0126, loss = 0.2653, val_loss = 0.0000, eval: [8.4 s]
# Iteration 16 fit: [7.9 s]: Recall = 0.0203, Jaccard score = 0.0111, loss = 0.2526, val_loss = 0.0000, eval: [8.3 s]
# Iteration 17 fit: [7.9 s]: Recall = 0.0207, Jaccard score = 0.0113, loss = 0.2405, val_loss = 0.0000, eval: [8.6 s]
# Iteration 18 fit: [7.9 s]: Recall = 0.0233, Jaccard score = 0.0128, loss = 0.2292, val_loss = 0.0000, eval: [8.7 s]
# Iteration 19 fit: [7.9 s]: Recall = 0.0218, Jaccard score = 0.0119, loss = 0.2197, val_loss = 0.0000, eval: [8.6 s]
# Iteration 20 fit: [7.9 s]: Recall = 0.0186, Jaccard score = 0.0101, loss = 0.2102, val_loss = 0.0000, eval: [8.5 s]
# Iteration 21 fit: [7.9 s]: Recall = 0.0228, Jaccard score = 0.0124, loss = 0.2013, val_loss = 0.0000, eval: [8.6 s]
# Iteration 22 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.1924, val_loss = 0.0000, eval: [8.7 s]
# Iteration 23 fit: [7.9 s]: Recall = 0.0224, Jaccard score = 0.0122, loss = 0.1854, val_loss = 0.0000, eval: [8.9 s]
# Iteration 24 fit: [7.9 s]: Recall = 0.0211, Jaccard score = 0.0115, loss = 0.1792, val_loss = 0.0000, eval: [8.8 s]
# Iteration 25 fit: [7.9 s]: Recall = 0.0209, Jaccard score = 0.0114, loss = 0.1731, val_loss = 0.0000, eval: [8.2 s]
# Iteration 26 fit: [7.9 s]: Recall = 0.0232, Jaccard score = 0.0126, loss = 0.1668, val_loss = 0.0000, eval: [9.0 s]
# Iteration 27 fit: [7.9 s]: Recall = 0.0235, Jaccard score = 0.0129, loss = 0.1618, val_loss = 0.0000, eval: [8.3 s]
# Iteration 28 fit: [7.9 s]: Recall = 0.0220, Jaccard score = 0.0120, loss = 0.1563, val_loss = 0.0000, eval: [8.3 s]
# Iteration 29 fit: [7.9 s]: Recall = 0.0230, Jaccard score = 0.0125, loss = 0.1527, val_loss = 0.0000, eval: [8.8 s]
# Iteration 30 fit: [7.9 s]: Recall = 0.0216, Jaccard score = 0.0118, loss = 0.1472, val_loss = 0.0000, eval: [8.5 s]
# Iteration 31 fit: [7.9 s]: Recall = 0.0249, Jaccard score = 0.0136, loss = 0.1446, val_loss = 0.0000, eval: [8.9 s]
# Iteration 32 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.1396, val_loss = 0.0000, eval: [8.6 s]
# Iteration 33 fit: [7.9 s]: Recall = 0.0249, Jaccard score = 0.0136, loss = 0.1363, val_loss = 0.0000, eval: [8.7 s]
# Iteration 34 fit: [7.9 s]: Recall = 0.0243, Jaccard score = 0.0133, loss = 0.1326, val_loss = 0.0000, eval: [8.6 s]
# Iteration 35 fit: [7.9 s]: Recall = 0.0230, Jaccard score = 0.0125, loss = 0.1299, val_loss = 0.0000, eval: [8.5 s]
# Iteration 36 fit: [7.9 s]: Recall = 0.0224, Jaccard score = 0.0122, loss = 0.1270, val_loss = 0.0000, eval: [8.6 s]
# Iteration 37 fit: [7.9 s]: Recall = 0.0230, Jaccard score = 0.0125, loss = 0.1235, val_loss = 0.0000, eval: [8.6 s]
# Iteration 38 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.1213, val_loss = 0.0000, eval: [8.5 s]
# Iteration 39 fit: [7.9 s]: Recall = 0.0243, Jaccard score = 0.0133, loss = 0.1180, val_loss = 0.0000, eval: [8.5 s]
# Iteration 40 fit: [7.9 s]: Recall = 0.0222, Jaccard score = 0.0121, loss = 0.1146, val_loss = 0.0000, eval: [8.4 s]
# Iteration 41 fit: [7.9 s]: Recall = 0.0235, Jaccard score = 0.0129, loss = 0.1127, val_loss = 0.0000, eval: [8.5 s]
# Iteration 42 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.1109, val_loss = 0.0000, eval: [8.7 s]
# Iteration 43 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.1088, val_loss = 0.0000, eval: [8.1 s]
# Iteration 44 fit: [7.9 s]: Recall = 0.0207, Jaccard score = 0.0113, loss = 0.1072, val_loss = 0.0000, eval: [8.1 s]
# Iteration 45 fit: [7.9 s]: Recall = 0.0213, Jaccard score = 0.0116, loss = 0.1051, val_loss = 0.0000, eval: [8.7 s]
# Iteration 46 fit: [7.9 s]: Recall = 0.0241, Jaccard score = 0.0132, loss = 0.1029, val_loss = 0.0000, eval: [8.7 s]
# Iteration 47 fit: [7.9 s]: Recall = 0.0220, Jaccard score = 0.0120, loss = 0.1010, val_loss = 0.0000, eval: [8.8 s]
# Iteration 48 fit: [7.9 s]: Recall = 0.0195, Jaccard score = 0.0107, loss = 0.0990, val_loss = 0.0000, eval: [9.0 s]
# Iteration 49 fit: [7.9 s]: Recall = 0.0224, Jaccard score = 0.0122, loss = 0.0960, val_loss = 0.0000, eval: [8.4 s]
# Iteration 50 fit: [7.9 s]: Recall = 0.0222, Jaccard score = 0.0121, loss = 0.0959, val_loss = 0.0000, eval: [8.4 s]
# Iteration 51 fit: [7.9 s]: Recall = 0.0209, Jaccard score = 0.0114, loss = 0.0938, val_loss = 0.0000, eval: [8.1 s]
# Iteration 52 fit: [7.9 s]: Recall = 0.0245, Jaccard score = 0.0134, loss = 0.0923, val_loss = 0.0000, eval: [8.4 s]
# Iteration 53 fit: [7.9 s]: Recall = 0.0218, Jaccard score = 0.0119, loss = 0.0904, val_loss = 0.0000, eval: [8.5 s]
# Iteration 54 fit: [7.9 s]: Recall = 0.0211, Jaccard score = 0.0115, loss = 0.0893, val_loss = 0.0000, eval: [8.5 s]
# Iteration 55 fit: [7.9 s]: Recall = 0.0205, Jaccard score = 0.0112, loss = 0.0892, val_loss = 0.0000, eval: [8.6 s]
# Iteration 56 fit: [7.9 s]: Recall = 0.0237, Jaccard score = 0.0130, loss = 0.0866, val_loss = 0.0000, eval: [8.2 s]
# Iteration 57 fit: [7.9 s]: Recall = 0.0233, Jaccard score = 0.0128, loss = 0.0849, val_loss = 0.0000, eval: [8.8 s]
# Iteration 58 fit: [7.9 s]: Recall = 0.0222, Jaccard score = 0.0121, loss = 0.0838, val_loss = 0.0000, eval: [8.6 s]
# Iteration 59 fit: [7.9 s]: Recall = 0.0197, Jaccard score = 0.0108, loss = 0.0828, val_loss = 0.0000, eval: [8.7 s]
# Iteration 60 fit: [7.9 s]: Recall = 0.0222, Jaccard score = 0.0121, loss = 0.0824, val_loss = 0.0000, eval: [8.7 s]
# Iteration 61 fit: [7.9 s]: Recall = 0.0214, Jaccard score = 0.0117, loss = 0.0805, val_loss = 0.0000, eval: [8.7 s]
# Iteration 62 fit: [7.9 s]: Recall = 0.0186, Jaccard score = 0.0101, loss = 0.0791, val_loss = 0.0000, eval: [8.7 s]
# Iteration 63 fit: [7.9 s]: Recall = 0.0232, Jaccard score = 0.0126, loss = 0.0783, val_loss = 0.0000, eval: [8.5 s]
# Iteration 64 fit: [7.9 s]: Recall = 0.0224, Jaccard score = 0.0122, loss = 0.0768, val_loss = 0.0000, eval: [8.9 s]
# Iteration 65 fit: [7.9 s]: Recall = 0.0228, Jaccard score = 0.0124, loss = 0.0765, val_loss = 0.0000, eval: [8.7 s]
# Iteration 66 fit: [7.9 s]: Recall = 0.0211, Jaccard score = 0.0115, loss = 0.0749, val_loss = 0.0000, eval: [8.8 s]
# Iteration 67 fit: [7.9 s]: Recall = 0.0226, Jaccard score = 0.0123, loss = 0.0731, val_loss = 0.0000, eval: [8.1 s]
# Iteration 68 fit: [7.9 s]: Recall = 0.0199, Jaccard score = 0.0109, loss = 0.0730, val_loss = 0.0000, eval: [9.0 s]
# Iteration 69 fit: [7.9 s]: Recall = 0.0207, Jaccard score = 0.0113, loss = 0.0715, val_loss = 0.0000, eval: [8.4 s]
# End. Best Iteration 1:  Recall = 0.0288, Jaccard score = 0.0158. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[128,110,90,75,64]_1560863182.h5
