--nn_model: GMF
--is_tag: "1"
--eval_recall: "0"
--topk: "3"
#--dataset: "ml-1m"
--big_tag: "0"
--epochs: "100"
--num_factors: "64"

# Launched by terminal.
# GMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', epochs=100, eval_recall=0, is_tag=1, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='GMF', num_factors=64, num_neg=4, out=1, path='Data/', reg_layers='[0,0,0,0]', reg_mf=0, topk=3, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_GMF_64_[64,32,16,8]_1560852290.h5
# Load data done [2.7 s]. #user=17431, #item=986, #train=133134, #test=17431
# Init: HR = 0.0313, NDCG = 0.0224
# Iteration 0 fit: [6.8 s]: HR = 0.0307, NDCG = 0.0225, loss = 0.5458, val_loss = 0.0000, eval: [9.4 s]
# Iteration 1 fit: [6.4 s]: HR = 0.0313, NDCG = 0.0221, loss = 0.5008, val_loss = 0.0000, eval: [9.4 s]
# Iteration 2 fit: [6.4 s]: HR = 0.0334, NDCG = 0.0241, loss = 0.5004, val_loss = 0.0000, eval: [9.4 s]
# Iteration 3 fit: [6.4 s]: HR = 0.0328, NDCG = 0.0236, loss = 0.4988, val_loss = 0.0000, eval: [9.4 s]
# Iteration 4 fit: [6.4 s]: HR = 0.0356, NDCG = 0.0258, loss = 0.4946, val_loss = 0.0000, eval: [9.4 s]
# Iteration 5 fit: [6.4 s]: HR = 0.0406, NDCG = 0.0292, loss = 0.4863, val_loss = 0.0000, eval: [9.4 s]
# Iteration 6 fit: [6.4 s]: HR = 0.0462, NDCG = 0.0339, loss = 0.4734, val_loss = 0.0000, eval: [9.4 s]
# Iteration 7 fit: [6.4 s]: HR = 0.0556, NDCG = 0.0413, loss = 0.4564, val_loss = 0.0000, eval: [9.4 s]
# Iteration 8 fit: [6.4 s]: HR = 0.0694, NDCG = 0.0519, loss = 0.4344, val_loss = 0.0000, eval: [9.4 s]
# Iteration 9 fit: [6.4 s]: HR = 0.0842, NDCG = 0.0642, loss = 0.4085, val_loss = 0.0000, eval: [9.3 s]
# Iteration 10 fit: [6.4 s]: HR = 0.1034, NDCG = 0.0793, loss = 0.3805, val_loss = 0.0000, eval: [9.4 s]
# Iteration 11 fit: [6.4 s]: HR = 0.1208, NDCG = 0.0932, loss = 0.3507, val_loss = 0.0000, eval: [9.4 s]
# Iteration 12 fit: [6.4 s]: HR = 0.1364, NDCG = 0.1063, loss = 0.3233, val_loss = 0.0000, eval: [9.4 s]
# Iteration 13 fit: [6.4 s]: HR = 0.1506, NDCG = 0.1178, loss = 0.2963, val_loss = 0.0000, eval: [9.4 s]
# Iteration 14 fit: [6.4 s]: HR = 0.1652, NDCG = 0.1296, loss = 0.2723, val_loss = 0.0000, eval: [9.4 s]
# Iteration 15 fit: [6.4 s]: HR = 0.1766, NDCG = 0.1394, loss = 0.2492, val_loss = 0.0000, eval: [9.4 s]
# Iteration 16 fit: [6.4 s]: HR = 0.1879, NDCG = 0.1488, loss = 0.2287, val_loss = 0.0000, eval: [9.4 s]
# Iteration 17 fit: [6.4 s]: HR = 0.1963, NDCG = 0.1570, loss = 0.2089, val_loss = 0.0000, eval: [9.4 s]
# Iteration 18 fit: [6.4 s]: HR = 0.2055, NDCG = 0.1637, loss = 0.1912, val_loss = 0.0000, eval: [9.4 s]
# Iteration 19 fit: [6.4 s]: HR = 0.2148, NDCG = 0.1708, loss = 0.1746, val_loss = 0.0000, eval: [9.4 s]
# Iteration 20 fit: [6.4 s]: HR = 0.2210, NDCG = 0.1769, loss = 0.1587, val_loss = 0.0000, eval: [9.4 s]
# Iteration 21 fit: [6.4 s]: HR = 0.2282, NDCG = 0.1829, loss = 0.1453, val_loss = 0.0000, eval: [9.4 s]
# Iteration 22 fit: [6.4 s]: HR = 0.2364, NDCG = 0.1887, loss = 0.1320, val_loss = 0.0000, eval: [9.4 s]
# Iteration 23 fit: [6.4 s]: HR = 0.2415, NDCG = 0.1941, loss = 0.1196, val_loss = 0.0000, eval: [9.4 s]
# Iteration 24 fit: [6.4 s]: HR = 0.2492, NDCG = 0.2006, loss = 0.1090, val_loss = 0.0000, eval: [9.5 s]
# Iteration 25 fit: [6.4 s]: HR = 0.2558, NDCG = 0.2055, loss = 0.0984, val_loss = 0.0000, eval: [9.4 s]
# Iteration 26 fit: [6.4 s]: HR = 0.2618, NDCG = 0.2107, loss = 0.0904, val_loss = 0.0000, eval: [9.4 s]
# Iteration 27 fit: [6.4 s]: HR = 0.2683, NDCG = 0.2157, loss = 0.0830, val_loss = 0.0000, eval: [9.5 s]
# Iteration 28 fit: [6.4 s]: HR = 0.2747, NDCG = 0.2209, loss = 0.0752, val_loss = 0.0000, eval: [9.4 s]
# Iteration 29 fit: [6.4 s]: HR = 0.2789, NDCG = 0.2259, loss = 0.0688, val_loss = 0.0000, eval: [9.4 s]
# Iteration 30 fit: [6.4 s]: HR = 0.2835, NDCG = 0.2309, loss = 0.0632, val_loss = 0.0000, eval: [9.5 s]
# Iteration 31 fit: [6.4 s]: HR = 0.2892, NDCG = 0.2354, loss = 0.0577, val_loss = 0.0000, eval: [9.4 s]
# Iteration 32 fit: [6.4 s]: HR = 0.2961, NDCG = 0.2414, loss = 0.0529, val_loss = 0.0000, eval: [9.5 s]
# Iteration 33 fit: [6.4 s]: HR = 0.3000, NDCG = 0.2460, loss = 0.0489, val_loss = 0.0000, eval: [9.4 s]
# Iteration 34 fit: [6.4 s]: HR = 0.3063, NDCG = 0.2514, loss = 0.0454, val_loss = 0.0000, eval: [9.4 s]
# Iteration 35 fit: [6.4 s]: HR = 0.3106, NDCG = 0.2556, loss = 0.0415, val_loss = 0.0000, eval: [9.4 s]
# Iteration 36 fit: [6.4 s]: HR = 0.3159, NDCG = 0.2596, loss = 0.0391, val_loss = 0.0000, eval: [9.5 s]
# Iteration 37 fit: [6.4 s]: HR = 0.3194, NDCG = 0.2630, loss = 0.0362, val_loss = 0.0000, eval: [9.4 s]
# Iteration 38 fit: [6.4 s]: HR = 0.3242, NDCG = 0.2675, loss = 0.0338, val_loss = 0.0000, eval: [9.4 s]
# Iteration 39 fit: [6.4 s]: HR = 0.3298, NDCG = 0.2725, loss = 0.0320, val_loss = 0.0000, eval: [9.4 s]
# Iteration 40 fit: [6.4 s]: HR = 0.3334, NDCG = 0.2755, loss = 0.0296, val_loss = 0.0000, eval: [9.4 s]
# Iteration 41 fit: [6.4 s]: HR = 0.3386, NDCG = 0.2805, loss = 0.0280, val_loss = 0.0000, eval: [9.4 s]
# Iteration 42 fit: [6.4 s]: HR = 0.3425, NDCG = 0.2842, loss = 0.0266, val_loss = 0.0000, eval: [9.4 s]
# Iteration 43 fit: [6.4 s]: HR = 0.3466, NDCG = 0.2882, loss = 0.0249, val_loss = 0.0000, eval: [9.4 s]
# Iteration 44 fit: [6.4 s]: HR = 0.3511, NDCG = 0.2926, loss = 0.0230, val_loss = 0.0000, eval: [9.4 s]
# Iteration 45 fit: [6.4 s]: HR = 0.3537, NDCG = 0.2946, loss = 0.0216, val_loss = 0.0000, eval: [9.5 s]
# Iteration 46 fit: [6.4 s]: HR = 0.3566, NDCG = 0.2984, loss = 0.0207, val_loss = 0.0000, eval: [9.5 s]
# Iteration 47 fit: [6.4 s]: HR = 0.3612, NDCG = 0.3025, loss = 0.0198, val_loss = 0.0000, eval: [9.4 s]
# Iteration 48 fit: [6.4 s]: HR = 0.3646, NDCG = 0.3046, loss = 0.0191, val_loss = 0.0000, eval: [9.4 s]
# Iteration 49 fit: [6.4 s]: HR = 0.3657, NDCG = 0.3055, loss = 0.0177, val_loss = 0.0000, eval: [9.5 s]
# Iteration 50 fit: [6.4 s]: HR = 0.3682, NDCG = 0.3086, loss = 0.0175, val_loss = 0.0000, eval: [9.4 s]
# Iteration 51 fit: [6.4 s]: HR = 0.3723, NDCG = 0.3113, loss = 0.0169, val_loss = 0.0000, eval: [9.5 s]
# Iteration 52 fit: [6.4 s]: HR = 0.3748, NDCG = 0.3133, loss = 0.0155, val_loss = 0.0000, eval: [9.4 s]
# Iteration 53 fit: [6.4 s]: HR = 0.3790, NDCG = 0.3173, loss = 0.0152, val_loss = 0.0000, eval: [9.5 s]
# Iteration 54 fit: [6.4 s]: HR = 0.3792, NDCG = 0.3178, loss = 0.0152, val_loss = 0.0000, eval: [9.5 s]
# Iteration 55 fit: [6.4 s]: HR = 0.3848, NDCG = 0.3224, loss = 0.0137, val_loss = 0.0000, eval: [9.4 s]
# Iteration 56 fit: [6.4 s]: HR = 0.3843, NDCG = 0.3231, loss = 0.0139, val_loss = 0.0000, eval: [9.5 s]
# Iteration 57 fit: [6.4 s]: HR = 0.3868, NDCG = 0.3251, loss = 0.0136, val_loss = 0.0000, eval: [9.5 s]
# Iteration 58 fit: [6.4 s]: HR = 0.3883, NDCG = 0.3266, loss = 0.0127, val_loss = 0.0000, eval: [9.4 s]
# Iteration 59 fit: [6.4 s]: HR = 0.3894, NDCG = 0.3283, loss = 0.0122, val_loss = 0.0000, eval: [9.4 s]
# Iteration 60 fit: [6.4 s]: HR = 0.3915, NDCG = 0.3300, loss = 0.0119, val_loss = 0.0000, eval: [9.4 s]
# Iteration 61 fit: [6.4 s]: HR = 0.3916, NDCG = 0.3300, loss = 0.0115, val_loss = 0.0000, eval: [9.4 s]
# Iteration 62 fit: [6.4 s]: HR = 0.3939, NDCG = 0.3322, loss = 0.0113, val_loss = 0.0000, eval: [9.4 s]
# Iteration 63 fit: [6.4 s]: HR = 0.3969, NDCG = 0.3345, loss = 0.0105, val_loss = 0.0000, eval: [9.4 s]
# Iteration 64 fit: [6.4 s]: HR = 0.3969, NDCG = 0.3348, loss = 0.0105, val_loss = 0.0000, eval: [9.5 s]
# Iteration 65 fit: [6.4 s]: HR = 0.4014, NDCG = 0.3379, loss = 0.0101, val_loss = 0.0000, eval: [9.4 s]
# Iteration 66 fit: [6.4 s]: HR = 0.4013, NDCG = 0.3390, loss = 0.0100, val_loss = 0.0000, eval: [9.4 s]
# Iteration 67 fit: [6.4 s]: HR = 0.4022, NDCG = 0.3396, loss = 0.0094, val_loss = 0.0000, eval: [9.5 s]
# Iteration 68 fit: [6.4 s]: HR = 0.4049, NDCG = 0.3417, loss = 0.0089, val_loss = 0.0000, eval: [9.4 s]
# Iteration 69 fit: [6.4 s]: HR = 0.4045, NDCG = 0.3419, loss = 0.0085, val_loss = 0.0000, eval: [9.4 s]
# Iteration 70 fit: [6.4 s]: HR = 0.4061, NDCG = 0.3427, loss = 0.0089, val_loss = 0.0000, eval: [9.4 s]
# Iteration 71 fit: [6.4 s]: HR = 0.4084, NDCG = 0.3456, loss = 0.0085, val_loss = 0.0000, eval: [9.5 s]
# Iteration 72 fit: [6.4 s]: HR = 0.4104, NDCG = 0.3472, loss = 0.0079, val_loss = 0.0000, eval: [9.4 s]
# Iteration 73 fit: [6.4 s]: HR = 0.4097, NDCG = 0.3470, loss = 0.0082, val_loss = 0.0000, eval: [9.5 s]
# Iteration 74 fit: [6.4 s]: HR = 0.4116, NDCG = 0.3486, loss = 0.0079, val_loss = 0.0000, eval: [9.5 s]
# Iteration 75 fit: [6.4 s]: HR = 0.4112, NDCG = 0.3479, loss = 0.0079, val_loss = 0.0000, eval: [9.5 s]
# Iteration 76 fit: [6.4 s]: HR = 0.4137, NDCG = 0.3488, loss = 0.0077, val_loss = 0.0000, eval: [9.5 s]
# Iteration 77 fit: [6.4 s]: HR = 0.4150, NDCG = 0.3507, loss = 0.0074, val_loss = 0.0000, eval: [9.5 s]
# Iteration 78 fit: [6.4 s]: HR = 0.4161, NDCG = 0.3523, loss = 0.0072, val_loss = 0.0000, eval: [9.4 s]
# Iteration 79 fit: [6.4 s]: HR = 0.4177, NDCG = 0.3531, loss = 0.0072, val_loss = 0.0000, eval: [9.4 s]
# Iteration 80 fit: [6.4 s]: HR = 0.4180, NDCG = 0.3539, loss = 0.0069, val_loss = 0.0000, eval: [9.4 s]
# Iteration 81 fit: [6.4 s]: HR = 0.4192, NDCG = 0.3550, loss = 0.0066, val_loss = 0.0000, eval: [9.4 s]
# Iteration 82 fit: [6.4 s]: HR = 0.4194, NDCG = 0.3546, loss = 0.0066, val_loss = 0.0000, eval: [9.5 s]
# Iteration 83 fit: [6.4 s]: HR = 0.4191, NDCG = 0.3553, loss = 0.0064, val_loss = 0.0000, eval: [9.4 s]
# Iteration 84 fit: [6.4 s]: HR = 0.4197, NDCG = 0.3567, loss = 0.0064, val_loss = 0.0000, eval: [9.5 s]
# Iteration 85 fit: [6.4 s]: HR = 0.4218, NDCG = 0.3580, loss = 0.0066, val_loss = 0.0000, eval: [9.5 s]
# Iteration 86 fit: [6.4 s]: HR = 0.4218, NDCG = 0.3583, loss = 0.0063, val_loss = 0.0000, eval: [9.5 s]
# Iteration 87 fit: [6.4 s]: HR = 0.4241, NDCG = 0.3597, loss = 0.0061, val_loss = 0.0000, eval: [9.5 s]
# Iteration 88 fit: [6.4 s]: HR = 0.4252, NDCG = 0.3608, loss = 0.0061, val_loss = 0.0000, eval: [9.5 s]
# Iteration 89 fit: [6.4 s]: HR = 0.4237, NDCG = 0.3603, loss = 0.0059, val_loss = 0.0000, eval: [9.4 s]
# Iteration 90 fit: [6.4 s]: HR = 0.4258, NDCG = 0.3609, loss = 0.0061, val_loss = 0.0000, eval: [9.4 s]
# Iteration 91 fit: [6.4 s]: HR = 0.4273, NDCG = 0.3624, loss = 0.0054, val_loss = 0.0000, eval: [9.5 s]
# Iteration 92 fit: [6.4 s]: HR = 0.4282, NDCG = 0.3628, loss = 0.0056, val_loss = 0.0000, eval: [9.5 s]
# Iteration 93 fit: [6.4 s]: HR = 0.4269, NDCG = 0.3617, loss = 0.0057, val_loss = 0.0000, eval: [9.4 s]
# Iteration 94 fit: [6.4 s]: HR = 0.4296, NDCG = 0.3641, loss = 0.0053, val_loss = 0.0000, eval: [9.5 s]
# Iteration 95 fit: [6.4 s]: HR = 0.4301, NDCG = 0.3650, loss = 0.0055, val_loss = 0.0000, eval: [9.4 s]
# Iteration 96 fit: [6.4 s]: HR = 0.4316, NDCG = 0.3665, loss = 0.0053, val_loss = 0.0000, eval: [9.5 s]
# Iteration 97 fit: [6.4 s]: HR = 0.4324, NDCG = 0.3674, loss = 0.0051, val_loss = 0.0000, eval: [9.4 s]
# Iteration 98 fit: [6.4 s]: HR = 0.4320, NDCG = 0.3667, loss = 0.0054, val_loss = 0.0000, eval: [9.5 s]
# Iteration 99 fit: [6.4 s]: HR = 0.4320, NDCG = 0.3665, loss = 0.0054, val_loss = 0.0000, eval: [9.5 s]
# End. Best Iteration 97:  HR = 0.4324, NDCG = 0.3674. 
# The best NeuMF model has been saved to Pretrain/_GMF_64_[64,32,16,8]_1560852290.h5
