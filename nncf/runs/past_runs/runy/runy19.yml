--nn_model: NeuMF
--is_tag: "1"
--eval_recall: "1"
--topk: "10"
--big_tag: "0"
--epochs: "600"
--lr: "0.00001"
--num_factors: "94"
--early_stopping: "10"
--layers: "[512,96]"
--reg_layers: "[0,0]"
--test_dataset: "1"
--percentage: "0.0"
--dataset_name_prepend: "cold_0.0_"
--mf_pretrain: "Pretrain/_GMF_94_[64,32,16,8]_1568834136.h5"
--mlp_pretrain: "Pretrain/_MLP_8_[512,96]_1568811491.h5"


# Launched by terminal.
# NeuMF arguments: Namespace(batch_size=256, big_tag=0, dataset='', dataset_name_prepend='cold_0.0_', early_stopping=10, epochs=600, eval_recall=1, is_tag=1, layers='[512,96]', learner='adam', lr=1e-05, mf_pretrain='Pretrain/_GMF_94_[64,32,16,8]_1568834136.h5', mlp_pretrain='Pretrain/_MLP_8_[512,96]_1568811491.h5', nn_model='NeuMF', num_factors=94, num_k_folds=1, num_neg=4, out=1, path='../data/', percentage=0.0, reg_layers='[0,0]', reg_mf=0, test_dataset=1, topk=10, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_NeuMF_94_[512,96]_1568978168.h5
--weights_path: Pretrain/_NeuMF_94_[512,96]_1568978168.h5
# Load data done [1.6 s]. #user=20000, #item=2000, #train=143502, #test=eval_recall
# Load pretrained GMF (Pretrain/_GMF_94_[64,32,16,8]_1568834136.h5) and MLP (Pretrain/_MLP_8_[512,96]_1568811491.h5) models done. 
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# mlp_embedding_user (Embedding)  (None, 1, 256)       5120000     user_input[0][0]                 
# __________________________________________________________________________________________________
# flatten_3 (Flatten)             (None, 256)          0           mlp_embedding_user[0][0]         
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# mlp_embedding_item (Embedding)  (None, 1, 256)       512000      item_input[0][0]                 
# __________________________________________________________________________________________________
# mf_embedding_user (Embedding)   (None, 1, 94)        1880000     user_input[0][0]                 
# __________________________________________________________________________________________________
# mf_embedding_item (Embedding)   (None, 1, 94)        188000      item_input[0][0]                 
# __________________________________________________________________________________________________
# concatenate_1 (Concatenate)     (None, 1256)         0           flatten_3[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# flatten_4 (Flatten)             (None, 256)          0           mlp_embedding_item[0][0]         
# __________________________________________________________________________________________________
# flatten_1 (Flatten)             (None, 94)           0           mf_embedding_user[0][0]          
# __________________________________________________________________________________________________
# flatten_2 (Flatten)             (None, 94)           0           mf_embedding_item[0][0]          
# __________________________________________________________________________________________________
# concatenate_2 (Concatenate)     (None, 1512)         0           concatenate_1[0][0]              
#                                                                  flatten_4[0][0]                  
# __________________________________________________________________________________________________
# multiply_1 (Multiply)           (None, 94)           0           flatten_1[0][0]                  
#                                                                  flatten_2[0][0]                  
# __________________________________________________________________________________________________
# layer1 (Dense)                  (None, 96)           145248      concatenate_2[0][0]              
# __________________________________________________________________________________________________
# concatenate_3 (Concatenate)     (None, 190)          0           multiply_1[0][0]                 
#                                                                  layer1[0][0]                     
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            191         concatenate_3[0][0]              
# ==================================================================================================
# Total params: 7,845,439
# Trainable params: 7,845,439
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.1246, Jaccard score = 0.0623
# Iteration 0 fit: [28.2 s]: Recall = 0.12456, Jaccard score = 0.0623, loss = 0.311487, gradient norm = 1.0000, eval: [35.8 s]
# Iteration 1 fit: [27.5 s]: Recall = 0.11669, Jaccard score = 0.0581, loss = 0.277857, gradient norm = 1.0000, eval: [36.1 s]
# Iteration 2 fit: [27.6 s]: Recall = 0.10635, Jaccard score = 0.0527, loss = 0.252134, gradient norm = 1.0000, eval: [36.0 s]
# Iteration 3 fit: [27.6 s]: Recall = 0.09753, Jaccard score = 0.0481, loss = 0.232463, gradient norm = 1.0000, eval: [36.2 s]
# Iteration 4 fit: [27.1 s]: Recall = 0.09079, Jaccard score = 0.0447, loss = 0.216825, gradient norm = 1.0000, eval: [36.1 s]
# Iteration 5 fit: [27.6 s]: Recall = 0.08338, Jaccard score = 0.0409, loss = 0.205143, gradient norm = 1.0000, eval: [35.9 s]
# Iteration 6 fit: [27.3 s]: Recall = 0.07793, Jaccard score = 0.0381, loss = 0.195398, gradient norm = 1.0000, eval: [40.1 s]
# Iteration 7 fit: [29.5 s]: Recall = 0.07287, Jaccard score = 0.0355, loss = 0.187789, gradient norm = 1.0000, eval: [36.1 s]
# Iteration 8 fit: [28.0 s]: Recall = 0.06832, Jaccard score = 0.0332, loss = 0.181650, gradient norm = 1.0000, eval: [38.4 s]
# Iteration 9 fit: [27.6 s]: Recall = 0.06512, Jaccard score = 0.0316, loss = 0.176496, gradient norm = 1.0000, eval: [36.2 s]
# End. Best Iteration -1:  Recall = 0.1246, Jaccard score = 0.0623. 
# The best NeuMF model has been saved to Pretrain/_NeuMF_94_[512,96]_1568978168.h5
