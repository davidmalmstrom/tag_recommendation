--nn_model: MLP
--is_tag: "1"
--eval_recall: "1"
--topk: "10"
--big_tag: "0"
--epochs: "100"
--lr: "0.001"
--early_stopping: "35"
--layers: "[512,750,350,96]"
--MLP_variant: ""
--reg_layers: "[0.000001,0.000001,0.000001,0.000001]"
--num_k_folds: "5"


# Launched by terminal.
# MLP arguments: Namespace(MLP_variant='', batch_size=256, big_tag=0, dataset='', dataset_name_prepend='', early_stopping=35, epochs=100, eval_recall=1, is_tag=1, layers='[512,750,350,96]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', nn_model='MLP', num_factors=8, num_k_folds=5, num_neg=4, out=1, path='../data/', percentage=0.5, reg_layers='[0.000001,0.000001,0.000001,0.000001]', reg_mf=0, test_dataset=0, topk=10, verbose=1) 
# The best NeuMF model will be saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
--weights_path: Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# Load data done [1.6 s]. #user=18000, #item=2000, #train=161301, #test=eval_recall
# __________________________________________________________________________________________________
# Layer (type)                    Output Shape         Param #     Connected to                     
# ==================================================================================================
# user_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# user_embedding (Embedding)      (None, 1, 256)       4608000     user_input[0][0]                 
# __________________________________________________________________________________________________
# item_input (InputLayer)         (None, 1)            0                                            
# __________________________________________________________________________________________________
# flatten_9 (Flatten)             (None, 256)          0           user_embedding[0][0]             
# __________________________________________________________________________________________________
# user_feature_input (InputLayer) (None, 1000)         0                                            
# __________________________________________________________________________________________________
# item_embedding (Embedding)      (None, 1, 256)       512000      item_input[0][0]                 
# __________________________________________________________________________________________________
# concatenate_9 (Concatenate)     (None, 1256)         0           flatten_9[0][0]                  
#                                                                  user_feature_input[0][0]         
# __________________________________________________________________________________________________
# flatten_10 (Flatten)            (None, 256)          0           item_embedding[0][0]             
# __________________________________________________________________________________________________
# concatenate_10 (Concatenate)    (None, 1512)         0           concatenate_9[0][0]              
#                                                                  flatten_10[0][0]                 
# __________________________________________________________________________________________________
# layer1 (Dense)                  (None, 750)          1134750     concatenate_10[0][0]             
# __________________________________________________________________________________________________
# layer2 (Dense)                  (None, 350)          262850      layer1[0][0]                     
# __________________________________________________________________________________________________
# layer3 (Dense)                  (None, 96)           33696       layer2[0][0]                     
# __________________________________________________________________________________________________
# prediction (Dense)              (None, 1)            97          layer3[0][0]                     
# ==================================================================================================
# Total params: 6,551,393
# Trainable params: 6,551,393
# Non-trainable params: 0
# __________________________________________________________________________________________________
# None
# 
# Performing k-fold 1
# Init: Recall = 0.0954, Jaccard score = 0.0298
# Iteration 0 fit: [40.0 s]: Recall = 0.48120, Jaccard score = 0.1706, loss = 2.314756, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 1 fit: [36.8 s]: Recall = 0.52532, Jaccard score = 0.1892, loss = 0.686099, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 2 fit: [37.0 s]: Recall = 0.55978, Jaccard score = 0.2042, loss = 0.505344, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 3 fit: [36.4 s]: Recall = 0.58478, Jaccard score = 0.2152, loss = 0.429984, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 4 fit: [36.6 s]: Recall = 0.58728, Jaccard score = 0.2163, loss = 0.375912, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 5 fit: [36.1 s]: Recall = 0.60384, Jaccard score = 0.2238, loss = 0.331800, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 6 fit: [36.9 s]: Recall = 0.60863, Jaccard score = 0.2260, loss = 0.294550, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 7 fit: [36.7 s]: Recall = 0.60307, Jaccard score = 0.2235, loss = 0.264492, gradient norm = 1.0000, eval: [17.8 s]
# Iteration 8 fit: [36.6 s]: Recall = 0.60959, Jaccard score = 0.2264, loss = 0.243275, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 9 fit: [36.6 s]: Recall = 0.61036, Jaccard score = 0.2268, loss = 0.225693, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 10 fit: [36.4 s]: Recall = 0.61586, Jaccard score = 0.2293, loss = 0.212803, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 11 fit: [36.4 s]: Recall = 0.61324, Jaccard score = 0.2281, loss = 0.202343, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 12 fit: [36.3 s]: Recall = 0.61611, Jaccard score = 0.2294, loss = 0.193639, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 13 fit: [36.4 s]: Recall = 0.61758, Jaccard score = 0.2301, loss = 0.186358, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 14 fit: [36.2 s]: Recall = 0.61643, Jaccard score = 0.2296, loss = 0.180246, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 15 fit: [36.6 s]: Recall = 0.61861, Jaccard score = 0.2305, loss = 0.175205, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 16 fit: [36.4 s]: Recall = 0.62347, Jaccard score = 0.2328, loss = 0.169442, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 17 fit: [36.9 s]: Recall = 0.61592, Jaccard score = 0.2293, loss = 0.166727, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 18 fit: [36.1 s]: Recall = 0.61573, Jaccard score = 0.2292, loss = 0.162162, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 19 fit: [36.2 s]: Recall = 0.62257, Jaccard score = 0.2324, loss = 0.159090, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 20 fit: [36.7 s]: Recall = 0.61368, Jaccard score = 0.2283, loss = 0.156946, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 21 fit: [36.6 s]: Recall = 0.61541, Jaccard score = 0.2291, loss = 0.154705, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 22 fit: [36.7 s]: Recall = 0.61656, Jaccard score = 0.2296, loss = 0.151633, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 23 fit: [36.3 s]: Recall = 0.61439, Jaccard score = 0.2286, loss = 0.149521, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 24 fit: [36.2 s]: Recall = 0.61586, Jaccard score = 0.2293, loss = 0.147796, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 25 fit: [36.3 s]: Recall = 0.61515, Jaccard score = 0.2290, loss = 0.146862, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 26 fit: [36.5 s]: Recall = 0.60754, Jaccard score = 0.2255, loss = 0.144740, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 27 fit: [36.3 s]: Recall = 0.61982, Jaccard score = 0.2311, loss = 0.142823, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 28 fit: [36.6 s]: Recall = 0.61324, Jaccard score = 0.2281, loss = 0.141589, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 29 fit: [37.0 s]: Recall = 0.61873, Jaccard score = 0.2306, loss = 0.139893, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 30 fit: [36.9 s]: Recall = 0.60985, Jaccard score = 0.2265, loss = 0.139140, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 31 fit: [36.5 s]: Recall = 0.61228, Jaccard score = 0.2277, loss = 0.138212, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 32 fit: [36.6 s]: Recall = 0.61419, Jaccard score = 0.2285, loss = 0.136383, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 33 fit: [36.7 s]: Recall = 0.61803, Jaccard score = 0.2303, loss = 0.135645, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 34 fit: [36.3 s]: Recall = 0.60786, Jaccard score = 0.2256, loss = 0.134100, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 35 fit: [37.0 s]: Recall = 0.61355, Jaccard score = 0.2282, loss = 0.133697, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 36 fit: [36.3 s]: Recall = 0.61189, Jaccard score = 0.2275, loss = 0.132387, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 37 fit: [36.3 s]: Recall = 0.61407, Jaccard score = 0.2285, loss = 0.132010, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 38 fit: [36.5 s]: Recall = 0.61426, Jaccard score = 0.2286, loss = 0.130501, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 39 fit: [37.0 s]: Recall = 0.61208, Jaccard score = 0.2276, loss = 0.129560, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 40 fit: [36.6 s]: Recall = 0.61784, Jaccard score = 0.2302, loss = 0.129716, gradient norm = 1.0000, eval: [19.1 s]
# Iteration 41 fit: [36.0 s]: Recall = 0.61394, Jaccard score = 0.2284, loss = 0.128548, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 42 fit: [36.8 s]: Recall = 0.60646, Jaccard score = 0.2250, loss = 0.127856, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 43 fit: [36.4 s]: Recall = 0.61049, Jaccard score = 0.2268, loss = 0.126639, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 44 fit: [36.4 s]: Recall = 0.60978, Jaccard score = 0.2265, loss = 0.126966, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 45 fit: [36.9 s]: Recall = 0.61432, Jaccard score = 0.2286, loss = 0.125351, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 46 fit: [36.4 s]: Recall = 0.61157, Jaccard score = 0.2273, loss = 0.124593, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 47 fit: [36.4 s]: Recall = 0.61503, Jaccard score = 0.2289, loss = 0.124303, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 48 fit: [36.8 s]: Recall = 0.60831, Jaccard score = 0.2258, loss = 0.123354, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 49 fit: [36.5 s]: Recall = 0.60850, Jaccard score = 0.2259, loss = 0.122663, gradient norm = 1.0000, eval: [17.9 s]
# Iteration 50 fit: [36.5 s]: Recall = 0.61189, Jaccard score = 0.2275, loss = 0.121867, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 51 fit: [36.0 s]: Recall = 0.61324, Jaccard score = 0.2281, loss = 0.122359, gradient norm = 1.0000, eval: [18.0 s]
# End. Best Iteration 16:  Recall = 0.6235, Jaccard score = 0.2328. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# The average best performance after k-fold 1 is: Recall = 0.62346547314578, Jaccard score = 0.2327818759101435
# 
# Performing k-fold 2
# Init: Recall = 0.0941, Jaccard score = 0.0298
# Iteration 0 fit: [40.3 s]: Recall = 0.47669, Jaccard score = 0.1717, loss = 2.350852, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 1 fit: [35.7 s]: Recall = 0.52093, Jaccard score = 0.1907, loss = 0.694591, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 2 fit: [36.1 s]: Recall = 0.54866, Jaccard score = 0.2029, loss = 0.508604, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 3 fit: [36.3 s]: Recall = 0.56975, Jaccard score = 0.2123, loss = 0.432727, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 4 fit: [36.5 s]: Recall = 0.58358, Jaccard score = 0.2186, loss = 0.377677, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 5 fit: [36.2 s]: Recall = 0.58934, Jaccard score = 0.2213, loss = 0.331430, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 6 fit: [36.6 s]: Recall = 0.59247, Jaccard score = 0.2227, loss = 0.293462, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 7 fit: [36.5 s]: Recall = 0.59979, Jaccard score = 0.2261, loss = 0.264174, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 8 fit: [36.2 s]: Recall = 0.60179, Jaccard score = 0.2270, loss = 0.242092, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 9 fit: [36.1 s]: Recall = 0.60342, Jaccard score = 0.2277, loss = 0.225981, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 10 fit: [36.7 s]: Recall = 0.59735, Jaccard score = 0.2249, loss = 0.213288, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 11 fit: [36.2 s]: Recall = 0.60580, Jaccard score = 0.2288, loss = 0.203249, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 12 fit: [36.6 s]: Recall = 0.60279, Jaccard score = 0.2275, loss = 0.195001, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 13 fit: [36.2 s]: Recall = 0.60454, Jaccard score = 0.2283, loss = 0.187000, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 14 fit: [36.3 s]: Recall = 0.60655, Jaccard score = 0.2292, loss = 0.181173, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 15 fit: [36.1 s]: Recall = 0.60367, Jaccard score = 0.2279, loss = 0.176236, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 16 fit: [36.1 s]: Recall = 0.59829, Jaccard score = 0.2254, loss = 0.170776, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 17 fit: [36.2 s]: Recall = 0.60329, Jaccard score = 0.2277, loss = 0.167436, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 18 fit: [36.1 s]: Recall = 0.61449, Jaccard score = 0.2329, loss = 0.163706, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 19 fit: [36.6 s]: Recall = 0.59710, Jaccard score = 0.2248, loss = 0.160288, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 20 fit: [35.8 s]: Recall = 0.60273, Jaccard score = 0.2274, loss = 0.158092, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 21 fit: [35.9 s]: Recall = 0.60648, Jaccard score = 0.2292, loss = 0.155799, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 22 fit: [36.3 s]: Recall = 0.60179, Jaccard score = 0.2270, loss = 0.153275, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 23 fit: [36.4 s]: Recall = 0.60073, Jaccard score = 0.2265, loss = 0.151182, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 24 fit: [36.2 s]: Recall = 0.59997, Jaccard score = 0.2262, loss = 0.148685, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 25 fit: [36.1 s]: Recall = 0.60561, Jaccard score = 0.2288, loss = 0.147369, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 26 fit: [36.2 s]: Recall = 0.60686, Jaccard score = 0.2293, loss = 0.146308, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 27 fit: [36.0 s]: Recall = 0.60292, Jaccard score = 0.2275, loss = 0.144923, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 28 fit: [36.4 s]: Recall = 0.60085, Jaccard score = 0.2266, loss = 0.143384, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 29 fit: [36.0 s]: Recall = 0.59822, Jaccard score = 0.2253, loss = 0.141566, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 30 fit: [36.0 s]: Recall = 0.60849, Jaccard score = 0.2301, loss = 0.140429, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 31 fit: [35.4 s]: Recall = 0.59760, Jaccard score = 0.2251, loss = 0.139415, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 32 fit: [35.8 s]: Recall = 0.59766, Jaccard score = 0.2251, loss = 0.138793, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 33 fit: [35.9 s]: Recall = 0.60386, Jaccard score = 0.2279, loss = 0.136668, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 34 fit: [36.0 s]: Recall = 0.60329, Jaccard score = 0.2277, loss = 0.136448, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 35 fit: [35.7 s]: Recall = 0.60529, Jaccard score = 0.2286, loss = 0.135474, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 36 fit: [35.6 s]: Recall = 0.60185, Jaccard score = 0.2270, loss = 0.134647, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 37 fit: [36.3 s]: Recall = 0.60010, Jaccard score = 0.2262, loss = 0.133926, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 38 fit: [36.0 s]: Recall = 0.60592, Jaccard score = 0.2289, loss = 0.133161, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 39 fit: [36.0 s]: Recall = 0.59972, Jaccard score = 0.2260, loss = 0.131978, gradient norm = 1.0000, eval: [18.0 s]
# Iteration 40 fit: [36.5 s]: Recall = 0.60229, Jaccard score = 0.2272, loss = 0.131315, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 41 fit: [36.2 s]: Recall = 0.59891, Jaccard score = 0.2257, loss = 0.130423, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 42 fit: [36.8 s]: Recall = 0.59879, Jaccard score = 0.2256, loss = 0.130548, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 43 fit: [36.7 s]: Recall = 0.59835, Jaccard score = 0.2254, loss = 0.128367, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 44 fit: [35.9 s]: Recall = 0.59522, Jaccard score = 0.2240, loss = 0.128081, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 45 fit: [36.4 s]: Recall = 0.60486, Jaccard score = 0.2284, loss = 0.127670, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 46 fit: [36.1 s]: Recall = 0.59791, Jaccard score = 0.2252, loss = 0.127216, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 47 fit: [35.8 s]: Recall = 0.60805, Jaccard score = 0.2299, loss = 0.126759, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 48 fit: [35.9 s]: Recall = 0.59854, Jaccard score = 0.2255, loss = 0.125762, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 49 fit: [36.3 s]: Recall = 0.60573, Jaccard score = 0.2288, loss = 0.125171, gradient norm = 1.0000, eval: [18.1 s]
# Iteration 50 fit: [36.2 s]: Recall = 0.59872, Jaccard score = 0.2256, loss = 0.124090, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 51 fit: [36.8 s]: Recall = 0.60586, Jaccard score = 0.2289, loss = 0.123379, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 52 fit: [36.7 s]: Recall = 0.59897, Jaccard score = 0.2257, loss = 0.123411, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 53 fit: [37.0 s]: Recall = 0.60379, Jaccard score = 0.2279, loss = 0.122773, gradient norm = 1.0000, eval: [18.2 s]
# End. Best Iteration 18:  Recall = 0.6145, Jaccard score = 0.2329. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# The average best performance after k-fold 2 is: Recall = 0.61897974827575, Jaccard score = 0.23284017894178902
# 
# Performing k-fold 3
# Init: Recall = 0.0901, Jaccard score = 0.0284
# Iteration 0 fit: [41.3 s]: Recall = 0.48284, Jaccard score = 0.1734, loss = 2.332691, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 1 fit: [36.3 s]: Recall = 0.52434, Jaccard score = 0.1912, loss = 0.694207, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 2 fit: [37.0 s]: Recall = 0.55772, Jaccard score = 0.2058, loss = 0.508969, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 3 fit: [36.8 s]: Recall = 0.58366, Jaccard score = 0.2175, loss = 0.431981, gradient norm = 1.0000, eval: [18.2 s]
# Iteration 4 fit: [36.6 s]: Recall = 0.59254, Jaccard score = 0.2215, loss = 0.376355, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 5 fit: [36.6 s]: Recall = 0.60004, Jaccard score = 0.2250, loss = 0.330610, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 6 fit: [36.8 s]: Recall = 0.60319, Jaccard score = 0.2264, loss = 0.292601, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 7 fit: [36.9 s]: Recall = 0.61024, Jaccard score = 0.2297, loss = 0.263588, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 8 fit: [36.7 s]: Recall = 0.61112, Jaccard score = 0.2301, loss = 0.241516, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 9 fit: [36.5 s]: Recall = 0.60615, Jaccard score = 0.2278, loss = 0.225144, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 10 fit: [36.6 s]: Recall = 0.60734, Jaccard score = 0.2283, loss = 0.211679, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 11 fit: [36.9 s]: Recall = 0.61295, Jaccard score = 0.2309, loss = 0.201760, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 12 fit: [36.7 s]: Recall = 0.61081, Jaccard score = 0.2299, loss = 0.192660, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 13 fit: [36.9 s]: Recall = 0.61232, Jaccard score = 0.2306, loss = 0.186264, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 14 fit: [36.8 s]: Recall = 0.60797, Jaccard score = 0.2286, loss = 0.180774, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 15 fit: [36.6 s]: Recall = 0.61030, Jaccard score = 0.2297, loss = 0.174928, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 16 fit: [36.5 s]: Recall = 0.61194, Jaccard score = 0.2305, loss = 0.170462, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 17 fit: [36.3 s]: Recall = 0.60413, Jaccard score = 0.2269, loss = 0.165844, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 18 fit: [36.7 s]: Recall = 0.61093, Jaccard score = 0.2300, loss = 0.163194, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 19 fit: [36.4 s]: Recall = 0.61402, Jaccard score = 0.2314, loss = 0.159699, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 20 fit: [36.2 s]: Recall = 0.60993, Jaccard score = 0.2295, loss = 0.157152, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 21 fit: [36.7 s]: Recall = 0.60652, Jaccard score = 0.2280, loss = 0.154342, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 22 fit: [36.8 s]: Recall = 0.61118, Jaccard score = 0.2301, loss = 0.152242, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 23 fit: [36.6 s]: Recall = 0.60640, Jaccard score = 0.2279, loss = 0.149438, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 24 fit: [37.0 s]: Recall = 0.60999, Jaccard score = 0.2296, loss = 0.147705, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 25 fit: [36.6 s]: Recall = 0.60747, Jaccard score = 0.2284, loss = 0.146422, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 26 fit: [36.7 s]: Recall = 0.61704, Jaccard score = 0.2328, loss = 0.145122, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 27 fit: [36.4 s]: Recall = 0.60835, Jaccard score = 0.2288, loss = 0.143062, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 28 fit: [36.7 s]: Recall = 0.60930, Jaccard score = 0.2292, loss = 0.141712, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 29 fit: [36.4 s]: Recall = 0.61062, Jaccard score = 0.2299, loss = 0.140725, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 30 fit: [37.2 s]: Recall = 0.60772, Jaccard score = 0.2285, loss = 0.139293, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 31 fit: [36.4 s]: Recall = 0.60495, Jaccard score = 0.2272, loss = 0.138888, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 32 fit: [36.3 s]: Recall = 0.60426, Jaccard score = 0.2269, loss = 0.137096, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 33 fit: [37.1 s]: Recall = 0.60482, Jaccard score = 0.2272, loss = 0.135522, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 34 fit: [36.4 s]: Recall = 0.60470, Jaccard score = 0.2271, loss = 0.135464, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 35 fit: [37.4 s]: Recall = 0.60684, Jaccard score = 0.2281, loss = 0.133903, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 36 fit: [36.8 s]: Recall = 0.60955, Jaccard score = 0.2294, loss = 0.132879, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 37 fit: [36.7 s]: Recall = 0.60300, Jaccard score = 0.2263, loss = 0.132478, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 38 fit: [36.7 s]: Recall = 0.60791, Jaccard score = 0.2286, loss = 0.131399, gradient norm = 1.0000, eval: [18.3 s]
# Iteration 39 fit: [36.6 s]: Recall = 0.60571, Jaccard score = 0.2276, loss = 0.130411, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 40 fit: [36.4 s]: Recall = 0.60911, Jaccard score = 0.2292, loss = 0.130350, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 41 fit: [37.2 s]: Recall = 0.61975, Jaccard score = 0.2341, loss = 0.128723, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 42 fit: [36.8 s]: Recall = 0.60356, Jaccard score = 0.2266, loss = 0.128161, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 43 fit: [36.6 s]: Recall = 0.60665, Jaccard score = 0.2280, loss = 0.127662, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 44 fit: [37.0 s]: Recall = 0.60407, Jaccard score = 0.2268, loss = 0.126095, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 45 fit: [36.8 s]: Recall = 0.61307, Jaccard score = 0.2310, loss = 0.126547, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 46 fit: [37.1 s]: Recall = 0.60961, Jaccard score = 0.2294, loss = 0.124907, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 47 fit: [36.8 s]: Recall = 0.61421, Jaccard score = 0.2315, loss = 0.124889, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 48 fit: [36.4 s]: Recall = 0.61496, Jaccard score = 0.2319, loss = 0.123863, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 49 fit: [36.5 s]: Recall = 0.61100, Jaccard score = 0.2300, loss = 0.123371, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 50 fit: [36.4 s]: Recall = 0.61087, Jaccard score = 0.2300, loss = 0.122862, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 51 fit: [36.2 s]: Recall = 0.60974, Jaccard score = 0.2294, loss = 0.121956, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 52 fit: [36.6 s]: Recall = 0.61257, Jaccard score = 0.2308, loss = 0.121455, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 53 fit: [36.3 s]: Recall = 0.61194, Jaccard score = 0.2305, loss = 0.121121, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 54 fit: [36.4 s]: Recall = 0.61622, Jaccard score = 0.2325, loss = 0.119794, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 55 fit: [37.0 s]: Recall = 0.60948, Jaccard score = 0.2293, loss = 0.119909, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 56 fit: [36.3 s]: Recall = 0.60930, Jaccard score = 0.2292, loss = 0.118948, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 57 fit: [36.6 s]: Recall = 0.60470, Jaccard score = 0.2271, loss = 0.118382, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 58 fit: [36.9 s]: Recall = 0.60822, Jaccard score = 0.2287, loss = 0.118236, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 59 fit: [37.4 s]: Recall = 0.60999, Jaccard score = 0.2296, loss = 0.117408, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 60 fit: [36.6 s]: Recall = 0.60810, Jaccard score = 0.2287, loss = 0.116439, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 61 fit: [36.8 s]: Recall = 0.60426, Jaccard score = 0.2269, loss = 0.116484, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 62 fit: [36.5 s]: Recall = 0.61396, Jaccard score = 0.2314, loss = 0.115402, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 63 fit: [36.6 s]: Recall = 0.60092, Jaccard score = 0.2254, loss = 0.115244, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 64 fit: [36.4 s]: Recall = 0.61175, Jaccard score = 0.2304, loss = 0.114517, gradient norm = 1.0000, eval: [18.9 s]
# Iteration 65 fit: [36.8 s]: Recall = 0.61219, Jaccard score = 0.2306, loss = 0.114034, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 66 fit: [36.9 s]: Recall = 0.61899, Jaccard score = 0.2337, loss = 0.112797, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 67 fit: [36.4 s]: Recall = 0.60268, Jaccard score = 0.2262, loss = 0.112874, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 68 fit: [36.3 s]: Recall = 0.61660, Jaccard score = 0.2326, loss = 0.112446, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 69 fit: [37.0 s]: Recall = 0.61288, Jaccard score = 0.2309, loss = 0.111537, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 70 fit: [36.3 s]: Recall = 0.60382, Jaccard score = 0.2267, loss = 0.111519, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 71 fit: [37.0 s]: Recall = 0.60715, Jaccard score = 0.2283, loss = 0.110804, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 72 fit: [36.4 s]: Recall = 0.61320, Jaccard score = 0.2311, loss = 0.110039, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 73 fit: [36.5 s]: Recall = 0.60841, Jaccard score = 0.2288, loss = 0.110162, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 74 fit: [37.2 s]: Recall = 0.60822, Jaccard score = 0.2287, loss = 0.108797, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 75 fit: [36.3 s]: Recall = 0.60753, Jaccard score = 0.2284, loss = 0.108653, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 76 fit: [36.7 s]: Recall = 0.60249, Jaccard score = 0.2261, loss = 0.108045, gradient norm = 1.0000, eval: [18.5 s]
# End. Best Iteration 41:  Recall = 0.6197, Jaccard score = 0.2341. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# The average best performance after k-fold 3 is: Recall = 0.6192362836816186, Jaccard score = 0.23325935966435013
# 
# Performing k-fold 4
# Init: Recall = 0.0921, Jaccard score = 0.0291
# Iteration 0 fit: [40.7 s]: Recall = 0.48573, Jaccard score = 0.1755, loss = 2.347943, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 1 fit: [37.3 s]: Recall = 0.52860, Jaccard score = 0.1940, loss = 0.697559, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 2 fit: [36.8 s]: Recall = 0.56026, Jaccard score = 0.2081, loss = 0.510635, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 3 fit: [37.0 s]: Recall = 0.57622, Jaccard score = 0.2153, loss = 0.434307, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 4 fit: [36.6 s]: Recall = 0.59011, Jaccard score = 0.2216, loss = 0.379494, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 5 fit: [36.7 s]: Recall = 0.59837, Jaccard score = 0.2254, loss = 0.333091, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 6 fit: [36.8 s]: Recall = 0.60613, Jaccard score = 0.2290, loss = 0.295572, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 7 fit: [37.9 s]: Recall = 0.60632, Jaccard score = 0.2291, loss = 0.266022, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 8 fit: [36.5 s]: Recall = 0.60945, Jaccard score = 0.2306, loss = 0.243196, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 9 fit: [36.7 s]: Recall = 0.61233, Jaccard score = 0.2319, loss = 0.226114, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 10 fit: [36.5 s]: Recall = 0.60907, Jaccard score = 0.2304, loss = 0.213036, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 11 fit: [36.7 s]: Recall = 0.61583, Jaccard score = 0.2335, loss = 0.202625, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 12 fit: [37.6 s]: Recall = 0.61227, Jaccard score = 0.2319, loss = 0.193972, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 13 fit: [37.0 s]: Recall = 0.61834, Jaccard score = 0.2347, loss = 0.186311, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 14 fit: [36.6 s]: Recall = 0.61202, Jaccard score = 0.2318, loss = 0.181316, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 15 fit: [36.3 s]: Recall = 0.61064, Jaccard score = 0.2311, loss = 0.175527, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 16 fit: [37.3 s]: Recall = 0.61233, Jaccard score = 0.2319, loss = 0.171118, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 17 fit: [36.4 s]: Recall = 0.61577, Jaccard score = 0.2335, loss = 0.167268, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 18 fit: [37.0 s]: Recall = 0.61621, Jaccard score = 0.2337, loss = 0.163287, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 19 fit: [37.0 s]: Recall = 0.61608, Jaccard score = 0.2337, loss = 0.160662, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 20 fit: [37.0 s]: Recall = 0.61020, Jaccard score = 0.2309, loss = 0.157484, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 21 fit: [37.5 s]: Recall = 0.60995, Jaccard score = 0.2308, loss = 0.155219, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 22 fit: [37.0 s]: Recall = 0.61051, Jaccard score = 0.2311, loss = 0.152172, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 23 fit: [37.3 s]: Recall = 0.61558, Jaccard score = 0.2334, loss = 0.150677, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 24 fit: [37.0 s]: Recall = 0.61314, Jaccard score = 0.2323, loss = 0.148608, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 25 fit: [37.0 s]: Recall = 0.61026, Jaccard score = 0.2309, loss = 0.146863, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 26 fit: [36.8 s]: Recall = 0.60701, Jaccard score = 0.2294, loss = 0.145742, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 27 fit: [37.2 s]: Recall = 0.61527, Jaccard score = 0.2333, loss = 0.143696, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 28 fit: [37.2 s]: Recall = 0.61039, Jaccard score = 0.2310, loss = 0.142723, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 29 fit: [37.0 s]: Recall = 0.61189, Jaccard score = 0.2317, loss = 0.141458, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 30 fit: [36.5 s]: Recall = 0.60532, Jaccard score = 0.2286, loss = 0.139887, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 31 fit: [36.6 s]: Recall = 0.61314, Jaccard score = 0.2323, loss = 0.139502, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 32 fit: [37.0 s]: Recall = 0.60782, Jaccard score = 0.2298, loss = 0.137731, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 33 fit: [37.0 s]: Recall = 0.61477, Jaccard score = 0.2330, loss = 0.136701, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 34 fit: [37.3 s]: Recall = 0.61577, Jaccard score = 0.2335, loss = 0.135304, gradient norm = 1.0000, eval: [18.9 s]
# Iteration 35 fit: [36.9 s]: Recall = 0.61070, Jaccard score = 0.2311, loss = 0.135442, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 36 fit: [37.5 s]: Recall = 0.61846, Jaccard score = 0.2348, loss = 0.133989, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 37 fit: [36.8 s]: Recall = 0.61746, Jaccard score = 0.2343, loss = 0.133743, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 38 fit: [37.0 s]: Recall = 0.61646, Jaccard score = 0.2338, loss = 0.132598, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 39 fit: [36.5 s]: Recall = 0.60607, Jaccard score = 0.2290, loss = 0.130764, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 40 fit: [37.2 s]: Recall = 0.61733, Jaccard score = 0.2342, loss = 0.130914, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 41 fit: [36.9 s]: Recall = 0.60426, Jaccard score = 0.2281, loss = 0.129030, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 42 fit: [37.0 s]: Recall = 0.60701, Jaccard score = 0.2294, loss = 0.129276, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 43 fit: [36.8 s]: Recall = 0.60745, Jaccard score = 0.2296, loss = 0.128775, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 44 fit: [36.9 s]: Recall = 0.60926, Jaccard score = 0.2305, loss = 0.128348, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 45 fit: [36.9 s]: Recall = 0.61489, Jaccard score = 0.2331, loss = 0.127211, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 46 fit: [37.0 s]: Recall = 0.60826, Jaccard score = 0.2300, loss = 0.126836, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 47 fit: [36.7 s]: Recall = 0.61258, Jaccard score = 0.2320, loss = 0.125926, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 48 fit: [37.1 s]: Recall = 0.61039, Jaccard score = 0.2310, loss = 0.125588, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 49 fit: [36.6 s]: Recall = 0.61339, Jaccard score = 0.2324, loss = 0.125028, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 50 fit: [36.7 s]: Recall = 0.60964, Jaccard score = 0.2306, loss = 0.123613, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 51 fit: [36.5 s]: Recall = 0.61852, Jaccard score = 0.2348, loss = 0.123011, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 52 fit: [36.8 s]: Recall = 0.62203, Jaccard score = 0.2364, loss = 0.122593, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 53 fit: [37.0 s]: Recall = 0.61345, Jaccard score = 0.2324, loss = 0.122526, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 54 fit: [36.2 s]: Recall = 0.62015, Jaccard score = 0.2356, loss = 0.120832, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 55 fit: [36.6 s]: Recall = 0.61646, Jaccard score = 0.2338, loss = 0.120928, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 56 fit: [36.6 s]: Recall = 0.61627, Jaccard score = 0.2337, loss = 0.121146, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 57 fit: [36.4 s]: Recall = 0.61571, Jaccard score = 0.2335, loss = 0.119694, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 58 fit: [36.6 s]: Recall = 0.60257, Jaccard score = 0.2274, loss = 0.119091, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 59 fit: [36.4 s]: Recall = 0.61602, Jaccard score = 0.2336, loss = 0.118997, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 60 fit: [36.4 s]: Recall = 0.62034, Jaccard score = 0.2356, loss = 0.117631, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 61 fit: [36.5 s]: Recall = 0.60976, Jaccard score = 0.2307, loss = 0.117390, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 62 fit: [36.2 s]: Recall = 0.61377, Jaccard score = 0.2326, loss = 0.117692, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 63 fit: [36.9 s]: Recall = 0.61552, Jaccard score = 0.2334, loss = 0.116253, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 64 fit: [36.6 s]: Recall = 0.61677, Jaccard score = 0.2340, loss = 0.115780, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 65 fit: [36.9 s]: Recall = 0.60770, Jaccard score = 0.2297, loss = 0.115044, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 66 fit: [36.2 s]: Recall = 0.61877, Jaccard score = 0.2349, loss = 0.114766, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 67 fit: [36.8 s]: Recall = 0.61464, Jaccard score = 0.2330, loss = 0.113722, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 68 fit: [36.9 s]: Recall = 0.60957, Jaccard score = 0.2306, loss = 0.114805, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 69 fit: [36.2 s]: Recall = 0.61164, Jaccard score = 0.2316, loss = 0.113031, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 70 fit: [36.6 s]: Recall = 0.60720, Jaccard score = 0.2295, loss = 0.112933, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 71 fit: [36.5 s]: Recall = 0.61414, Jaccard score = 0.2327, loss = 0.112547, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 72 fit: [36.4 s]: Recall = 0.61627, Jaccard score = 0.2337, loss = 0.111114, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 73 fit: [36.6 s]: Recall = 0.61477, Jaccard score = 0.2330, loss = 0.111168, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 74 fit: [36.3 s]: Recall = 0.60839, Jaccard score = 0.2301, loss = 0.110839, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 75 fit: [36.4 s]: Recall = 0.61615, Jaccard score = 0.2337, loss = 0.109958, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 76 fit: [36.7 s]: Recall = 0.61120, Jaccard score = 0.2314, loss = 0.109760, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 77 fit: [36.3 s]: Recall = 0.62071, Jaccard score = 0.2358, loss = 0.108849, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 78 fit: [36.8 s]: Recall = 0.61427, Jaccard score = 0.2328, loss = 0.108361, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 79 fit: [36.1 s]: Recall = 0.61014, Jaccard score = 0.2309, loss = 0.108821, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 80 fit: [37.2 s]: Recall = 0.62084, Jaccard score = 0.2359, loss = 0.107320, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 81 fit: [36.6 s]: Recall = 0.61352, Jaccard score = 0.2325, loss = 0.106698, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 82 fit: [36.1 s]: Recall = 0.61715, Jaccard score = 0.2342, loss = 0.106747, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 83 fit: [36.4 s]: Recall = 0.61896, Jaccard score = 0.2350, loss = 0.105834, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 84 fit: [36.7 s]: Recall = 0.60776, Jaccard score = 0.2298, loss = 0.105650, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 85 fit: [37.1 s]: Recall = 0.61514, Jaccard score = 0.2332, loss = 0.104621, gradient norm = 1.0000, eval: [18.7 s]
# Iteration 86 fit: [36.3 s]: Recall = 0.61339, Jaccard score = 0.2324, loss = 0.104611, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 87 fit: [36.6 s]: Recall = 0.62009, Jaccard score = 0.2355, loss = 0.104568, gradient norm = 1.0000, eval: [18.5 s]
# End. Best Iteration 52:  Recall = 0.6220, Jaccard score = 0.2364. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# The average best performance after k-fold 4 is: Recall = 0.6199340963657196, Jaccard score = 0.23405489082342912
# 
# Performing k-fold 5
# Init: Recall = 0.0952, Jaccard score = 0.0301
# Iteration 0 fit: [40.5 s]: Recall = 0.48389, Jaccard score = 0.1743, loss = 2.318446, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 1 fit: [37.0 s]: Recall = 0.53143, Jaccard score = 0.1947, loss = 0.691338, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 2 fit: [37.1 s]: Recall = 0.56132, Jaccard score = 0.2080, loss = 0.508954, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 3 fit: [36.8 s]: Recall = 0.58380, Jaccard score = 0.2181, loss = 0.433519, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 4 fit: [37.0 s]: Recall = 0.59466, Jaccard score = 0.2231, loss = 0.378102, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 5 fit: [37.3 s]: Recall = 0.59849, Jaccard score = 0.2248, loss = 0.332000, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 6 fit: [36.9 s]: Recall = 0.60772, Jaccard score = 0.2291, loss = 0.295255, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 7 fit: [36.9 s]: Recall = 0.60961, Jaccard score = 0.2300, loss = 0.265968, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 8 fit: [36.3 s]: Recall = 0.60389, Jaccard score = 0.2273, loss = 0.244031, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 9 fit: [37.6 s]: Recall = 0.60622, Jaccard score = 0.2284, loss = 0.226274, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 10 fit: [36.9 s]: Recall = 0.60590, Jaccard score = 0.2282, loss = 0.214185, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 11 fit: [37.0 s]: Recall = 0.61086, Jaccard score = 0.2305, loss = 0.202475, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 12 fit: [36.6 s]: Recall = 0.60967, Jaccard score = 0.2300, loss = 0.194803, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 13 fit: [36.6 s]: Recall = 0.61105, Jaccard score = 0.2306, loss = 0.187741, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 14 fit: [37.0 s]: Recall = 0.60879, Jaccard score = 0.2296, loss = 0.181256, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 15 fit: [36.6 s]: Recall = 0.61419, Jaccard score = 0.2321, loss = 0.176500, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 16 fit: [36.7 s]: Recall = 0.61438, Jaccard score = 0.2322, loss = 0.172020, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 17 fit: [37.1 s]: Recall = 0.61319, Jaccard score = 0.2316, loss = 0.166789, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 18 fit: [36.6 s]: Recall = 0.61790, Jaccard score = 0.2338, loss = 0.163949, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 19 fit: [37.2 s]: Recall = 0.60760, Jaccard score = 0.2290, loss = 0.160252, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 20 fit: [37.0 s]: Recall = 0.60948, Jaccard score = 0.2299, loss = 0.158550, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 21 fit: [37.3 s]: Recall = 0.60980, Jaccard score = 0.2300, loss = 0.154724, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 22 fit: [36.7 s]: Recall = 0.61495, Jaccard score = 0.2324, loss = 0.152679, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 23 fit: [36.8 s]: Recall = 0.60697, Jaccard score = 0.2287, loss = 0.150521, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 24 fit: [36.9 s]: Recall = 0.61790, Jaccard score = 0.2338, loss = 0.149451, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 25 fit: [37.1 s]: Recall = 0.61086, Jaccard score = 0.2305, loss = 0.147226, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 26 fit: [37.0 s]: Recall = 0.61664, Jaccard score = 0.2332, loss = 0.145597, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 27 fit: [37.3 s]: Recall = 0.61777, Jaccard score = 0.2338, loss = 0.143973, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 28 fit: [37.2 s]: Recall = 0.61212, Jaccard score = 0.2311, loss = 0.142979, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 29 fit: [36.6 s]: Recall = 0.61338, Jaccard score = 0.2317, loss = 0.141012, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 30 fit: [36.7 s]: Recall = 0.61042, Jaccard score = 0.2303, loss = 0.140142, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 31 fit: [37.1 s]: Recall = 0.61224, Jaccard score = 0.2312, loss = 0.138789, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 32 fit: [36.9 s]: Recall = 0.61551, Jaccard score = 0.2327, loss = 0.138622, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 33 fit: [36.8 s]: Recall = 0.61451, Jaccard score = 0.2322, loss = 0.137019, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 34 fit: [36.8 s]: Recall = 0.60741, Jaccard score = 0.2289, loss = 0.135581, gradient norm = 1.0000, eval: [18.9 s]
# Iteration 35 fit: [37.4 s]: Recall = 0.60641, Jaccard score = 0.2285, loss = 0.134972, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 36 fit: [36.7 s]: Recall = 0.60923, Jaccard score = 0.2298, loss = 0.134337, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 37 fit: [37.5 s]: Recall = 0.60892, Jaccard score = 0.2296, loss = 0.133209, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 38 fit: [36.1 s]: Recall = 0.60760, Jaccard score = 0.2290, loss = 0.131722, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 39 fit: [36.9 s]: Recall = 0.60345, Jaccard score = 0.2271, loss = 0.132136, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 40 fit: [36.9 s]: Recall = 0.61143, Jaccard score = 0.2308, loss = 0.131246, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 41 fit: [36.6 s]: Recall = 0.61294, Jaccard score = 0.2315, loss = 0.129788, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 42 fit: [36.9 s]: Recall = 0.60892, Jaccard score = 0.2296, loss = 0.129609, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 43 fit: [37.2 s]: Recall = 0.61124, Jaccard score = 0.2307, loss = 0.128331, gradient norm = 1.0000, eval: [18.4 s]
# Iteration 44 fit: [37.5 s]: Recall = 0.61155, Jaccard score = 0.2309, loss = 0.127842, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 45 fit: [36.8 s]: Recall = 0.61551, Jaccard score = 0.2327, loss = 0.127083, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 46 fit: [37.1 s]: Recall = 0.61294, Jaccard score = 0.2315, loss = 0.125848, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 47 fit: [37.1 s]: Recall = 0.61413, Jaccard score = 0.2321, loss = 0.126290, gradient norm = 1.0000, eval: [18.8 s]
# Iteration 48 fit: [36.5 s]: Recall = 0.61369, Jaccard score = 0.2319, loss = 0.124677, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 49 fit: [36.8 s]: Recall = 0.60333, Jaccard score = 0.2270, loss = 0.123880, gradient norm = 1.0000, eval: [18.6 s]
# Iteration 50 fit: [36.7 s]: Recall = 0.61155, Jaccard score = 0.2309, loss = 0.123722, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 51 fit: [36.9 s]: Recall = 0.60904, Jaccard score = 0.2297, loss = 0.122881, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 52 fit: [36.8 s]: Recall = 0.61325, Jaccard score = 0.2316, loss = 0.121931, gradient norm = 1.0000, eval: [18.5 s]
# Iteration 53 fit: [37.2 s]: Recall = 0.61250, Jaccard score = 0.2313, loss = 0.121348, gradient norm = 1.0000, eval: [18.5 s]
# End. Best Iteration 18:  Recall = 0.6179, Jaccard score = 0.2338. 
# The best NeuMF model has been saved to Pretrain/_MLP_8_[512,750,350,96]_1569600779.h5
# The average best performance after k-fold 5 is: Recall = 0.6195265549575678, Jaccard score = 0.2340064171140124
